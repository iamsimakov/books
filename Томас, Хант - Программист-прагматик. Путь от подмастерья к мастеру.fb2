<?xml version="1.0" encoding="windows-1251"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0" xmlns:l="http://www.w3.org/1999/xlink">
 <description>
  <title-info>
   <genre>comp_programming</genre>
   <author>
    <first-name>Эндрю</first-name>
    <last-name>Хант</last-name>
   </author>
   <author>
    <first-name>Дэвид</first-name>
    <last-name>Томас</last-name>
   </author>
   <book-title>Программист-прагматик. Путь от подмастерья к мастеру</book-title>
   <annotation>
    <p>Находясь на переднем крае программирования, книга "Программист-прагматик. Путь от подмастерья к мастеру" абстрагируется от всевозрастающей специализации и технических тонкостей разработки программ на современном уровне, чтобы исследовать суть процесса – требования к работоспособной и поддерживаемой программе, приводящей пользователей в восторг. Книга охватывает различные темы – от личной ответственности и карьерного роста до архитектурных методик, придающих программам гибкость и простоту в адаптации и повторном использовании.</p>
    <p>Прочитав эту книгу, вы научитесь:</p>
    <p>Бороться с недостатками программного обеспечения;</p>
    <p>Избегать ловушек, связанных с дублированием знания;</p>
    <p>Создавать гибкие, динамичные и адаптируемые программы;</p>
    <p>Избегать программирования в расчете на совпадение;</p>
    <p>Защищать вашу программу при помощи контрактов, утверждений и исключений;</p>
    <p>Собирать реальные требования;</p>
    <p>Осуществлять безжалостное и эффективное тестирование;</p>
    <p>Приводить в восторг ваших пользователей;</p>
    <p>Формировать команды из программистов-прагматиков и с помощью автоматизации делать ваши разработки более точными.</p>
   </annotation>
   <date>2000</date>
   <coverpage>
    <image l:href="#cover.jpg"/></coverpage>
   <lang>ru</lang>
   <src-lang>en</src-lang>
   <translator>
    <first-name>А.</first-name>
    <last-name>Алексашин</last-name>
   </translator>
  </title-info>
  <document-info>
   <author>
    <nickname>NickNem</nickname>
   </author>
   <program-used>Fiction Book Designer, FB Editor v2.0</program-used>
   <date value="2008-07-25">25.07.2008</date>
   <src-url>www.infanata.ru</src-url>
   <id>FBD-1TD7SF0P-OPLK-8QMD-51PA-VHAQU97RHRFE</id>
   <version>1.0</version>
   <history>
    <p>V 1.0 Convert to FB2 NickNem</p>
   </history>
  </document-info>
  <publish-info>
   <book-name>Э. Хант, Д. Томас "Программист-прагматик. Путь от подмастерья к мастеру"</book-name>
   <publisher>Лори</publisher>
   <city>М.</city>
   <year>2004</year>
   <isbn>5-85582-213-3, 0-201-61622-X</isbn>
   <sequence name="Библиотека программиста"/>
  </publish-info>
  <custom-info info-type="src-author-first-name">Andrew</custom-info>
  <custom-info info-type="src-author-last-name">Hunt</custom-info>
  <custom-info info-type="src-author-first-name">David</custom-info>
  <custom-info info-type="src-author-last-name">Thomas</custom-info>
  <custom-info info-type="src-book-title">The Pragmatic Programmer: From Journeyman to Master</custom-info>
 </description>
 <body>
  <title>
   <p>Эндрю Хант, Дэвид Томас</p>
   <p>Программист-прагматик</p>
   <p>Путь от подмастерья к мастеру</p>
  </title>
  <section>
   <title>
    <p>Высказывания программистов-практиков о книге "Программист-прагматик"</p>
   </title>
   <cite>
    <p>Главное в этой книге то, что она поддерживает процесс создания программ в хорошей форме. [Книга] способствует вашему постоянному росту и явно написана людьми, знающими толк в программировании.</p>
    <text-author>Кент Бек, автор книги Extreme Programming Explained: Embrace Change</text-author>
   </cite>
   <empty-line/>
   <cite>
    <p>Я обнаружил, что эта книга является смесью убедительных советов и замечательных аналогий!</p>
    <text-author>Мартин Фаулер, автор книг Refactoring и UML Distilled</text-author>
   </cite>
   <empty-line/>
   <cite>
    <p>Я бы купил книгу, прочел ее дважды, а затем сказал бы всем моим коллегам, чтобы они скорее бежали в магазин и купили себе по экземпляру. Эту книгу я никогда не дал бы никому почитать, так как сходил бы с ума от беспокойства за ее сохранность.</p>
    <text-author>Кевин Руланд, сотрудник отдела менеджмента фирмы MSG-Logistics</text-author>
   </cite>
   <empty-line/>
   <cite>
    <p>Мудрость и практический опыт авторов очевидны. Разделы, представленные в книге, уместны и полезны… Сильнейшее впечатление на меня произвели выдающиеся аналогии – стрельба трассирующими, разбитые окна и фантастическое по своей аналогии с управлением вертолетом объяснение необходимости ортогонального подхода, что особенно важно в критической ситуации. Я практически не сомневаюсь, что эта книга станет превосходным источником полезной информации как для начинающих программистов, так и для умудренных опытом мэтров.</p>
    <text-author>Джон Лакос, автор книги Large-Scale С++ Software Design</text-author>
   </cite>
   <empty-line/>
   <cite>
    <p>Когда такие книги появляются на прилавках магазинов, я покупаю по десять экземпляров для раздачи моим клиентам.</p>
    <text-author>Эрик Вот, инженер-программист</text-author>
   </cite>
   <empty-line/>
   <cite>
    <p>Большинство современных книг по разработке программ не в состоянии охватить основ становления программиста-мастера. Они тратят время на спецификацию синтаксиса или технологии, тогда как на самом деле движущей силой любой команды является наличие талантливых программистов, которые реально владеют своим ремеслом. Отличная книга.</p>
    <text-author>Пит Макбрии, независимый консультант</text-author>
   </cite>
   <empty-line/>
   <cite>
    <p>Прочитав книгу, я реализовал много из тех практических предложений и подсказок, которые дают нам авторы. Честно говоря, они сэкономили моей фирме время и деньги, помогая выполнить работу быстрее! "Программист-прагматик" должен стать настольной книгой для всех, кто зарабатывает на жизнь программированием.</p>
    <text-author>Джаред Ричардсон, старший программист фирмы iRenaissance, Inc.</text-author>
   </cite>
   <empty-line/>
   <cite>
    <p>Я хотел бы, чтобы эта книга попала ко всем новым сотрудникам моей фирмы.</p>
    <text-author>Крис Клилэнд, Старший инженер-программист фирмы Object Computing, Inc.</text-author>
   </cite>
  </section>
  <section>
   <title>
    <p>Предисловие</p>
   </title>
   <p>Книга, которую вы сейчас держите в руках, попала ко мне как рецензенту еще до выхода в свет. Даже в черновом варианте она оказалась превосходной. Дэйву Томасу и Энди Ханту есть что сказать, и они знают, как сказать. Я видел то, над чем они трудились, и уверен, что сделанное ими будет работать. Меня попросили написать это предисловие, в котором я объясняю причины своей уверенности.</p>
   <p>В этой книге говорится о способе программирования, которому вы можете последовать. Вполне возможно, что вы даже и не думали, что программирование окажется таким трудным занятием, но дело обстоит именно так. Почему? С одной стороны, не все книги по программированию написаны профессиональными программистами. Многие из них скомпилированы создателями языков программирования или же журналистами, которые сотрудничают с ними в продвижении на рынок этих языков. Книги эти рассказывают вам, как общаться на некоем языке программирования (что, конечно, является немаловажным фактором), но это лишь малая часть того, чем, собственно, занимается программист.</p>
   <p>Что же программист делает помимо общения на языке программирования? Эта проблема достаточно глубока. Большинство программистов затруднились бы объяснить, что же они делают. Программирование – это работа, насыщенная подробностями, и для того чтобы уследить за ними, необходимо сосредоточиться. Проходит время, на свет появляется программа. Если всерьез не задумываться над тем, что вы делали, можно придти к выводу, что программирование сводится к набору операторов на специфическом языке. Разумеется, это неправда, но вы ни за что бы так не подумали, осмотревшись по сторонам в секции программирования книжного магазина.</p>
   <p>В своей книге "Программист-прагматик" Дэйв и Энди рассказывают нам о способе программирования, которому мы можем последовать. Как же им удалось добиться таких успехов? Не сосредоточились ли они на деталях, уподобившись другим программистам? Нет, они лишь уделили внимание тому, что они делали, во время самой работы, а затем попытались сделать это несколько лучше.</p>
   <p>Представьте, что сидите на совещании. Наверное, выдумаете, что совещание длится целую вечность, а вместо него лучше было бы заняться программированием. Дэйв и Энди в такой ситуации думали бы о том, почему происходит это совещание, и задались вопросом, существует ли что-то еще, что они могли бы сделать вместо совещания, и может ли это «что-то» быть автоматизировано таким образом, чтобы это совещание проходило не в настоящем, а в будущем. Затем они бы осуществили задуманное.</p>
   <p>Именно таков образ мышления Дэйва и Энди. Это совещание не отвлекало бы их от программирования. Напротив, это и было бы программирование. И этот способ может быть усовершенствован. Я знаю, что они мыслят именно таким образом, поскольку в книге есть подсказка 2: "Думай! О своей работе".</p>
   <p>Представьте себе, что авторы мыслят подобным образом на протяжении нескольких лет. У них вскоре должна была бы собраться целая коллекция решений. Теперь представьте, что они используют эти решения в своей работе на протяжении еще нескольких лет и при этом отказываются от слишком трудных решений или тех, что не всегда приводят к желаемому результату. Этот подход и может быть определен как прагматический. Вы, вероятно, подумаете, что подобная информация – настоящая золотая жила. И будете правы.</p>
   <p>Авторы рассказывают нам, как они программируют. И рассказывают тем способом, которому мы можем последовать. Но в последнем утверждении есть нечто большее, чем вы думаете. Позвольте мне объяснить.</p>
   <p>Авторы проявили осторожность, избегая выдвижения теории разработки программного обеспечения. Это хорошо, поскольку в противном случае им пришлось бы исказить всю книгу, защищая эту теорию. Подобное искажение является традицией в физике, где теории в конечном счете становятся законами или же преспокойно отвергаются. С другой стороны, программирование подчиняется немногим (если вообще каким-нибудь) законам. Поэтому совет в области программирования, вращающегося вокруг квазизаконов, может прекрасно выглядеть в теории, но на практике не провалиться. Именно это происходит со многим книгами по методологии.</p>
   <p>Я изучал эту проблему в течение десяти лет и обнаружил, что самым многообещающим является подход, называемый языком шаблонов. Вкратце шаблон представляет собой некое решение, а язык шаблонов является некой системой решений, подкрепляющих друг друга. Вокруг поиска таких систем сформировалось целое сообщество.</p>
   <p>Эта книга – нечто большее, чем просто собрание подсказок. Это и есть язык шаблонов, но в "овечьей шкуре". Я говорю так потому, что каждая подсказка получена из реального опыта, подана как конкретный совет и соотносится с другими, образуя систему. Подсказки представляют собой характеристики, которые позволяют нам изучать язык шаблонов и следовать ему.</p>
   <p>Вы можете следовать советам, содержащимся в данной книге, потому что они конкретны. В книге нет расплывчатых абстракций. Дэйв и Энди пишут непосредственно для вас, так, как будто каждая подсказка является жизненно необходимой для пробуждения вашей карьеры в сфере программирования. Они упрощают эту сферу, они рассказывают некую историю, используют легкие намеки, а затем отвечают на вопросы, возникающие, когда вы попробуете сделать что-либо.</p>
   <p>Есть и нечто большее. После того как вы прочтете десять или пятнадцать подсказок, вам начнет открываться новое измерение вашей работы. В английском языке это измерение обозначается аббревиатурой QWAN (Quality Without A Name – качество без имени). Книга содержит философию, которая будет внедряться в ваше сознание и смешиваться с вашей собственной. Она не занимается проповедью. Она лишь сообщает, что может работать. Но рассказ способствует проникновению внутрь. В этом состоит красота этой книги: она воплощает философию и делает это непретенциозно.</p>
   <p>И вот она перед вами – простая в чтении и применении книга о практике программирования. Я все говорю и говорю о том, почему она действенна. Вам же, вероятно, нужно, чтобы она действовала в принципе. Она действует. Вы это увидите вами.</p>
   <p><emphasis><strong>Уорд Каннингхэм</strong></emphasis></p>
  </section>
  <section>
   <title>
    <p>От авторов</p>
   </title>
   <section>
    <p>Эта книга поможет вам стать лучшим программистом.</p>
    <p>Неважно, кем вы являетесь – разработчиком-одиночкой, членом большой проектной команды или консультантом, одновременно работающим со многими заказчиками. Эта книга поможет вам – отдельно взятой личности – повысить качество работы. Она не посвящена теории, авторы сосредоточились на практических аспектах, на том, как использовать свой опыт для принятия более продуманных решений. Слово «прагматик» происходит от латинского pragmaticus-"сведущий в каком-либо виде деятельности", а оно, в свою очередь, от греческого Trpaxxeiv, означающего "делать что-либо". Таким образом, эта книга посвящена деятельности.</p>
    <p>Программирование – это прикладное искусство. Его простейший смысл заключается в следующем: заставить компьютер делать то, что вам нужно (или то, что нужно пользователю, работающему с вашей программой). Программист – он и слушатель, он и советник, он и переводчик и даже диктатор. Вы пытаетесь ухватить суть не совсем ясных требований и найти такой способ их выражения, что только машина сможет оценить его по достоинству. Вы пытаетесь задокументировать работу так, чтобы она была понятна другим, спроектировать ее так, чтобы другие могли на нее положиться. Кроме того, вы пытаетесь сделать все это вопреки безжалостному ходу стрелки часов, отсчитывающих время, отпущенное на проект. Каждый день вы совершаете маленькое чудо.</p>
    <p>Это непростая работа.</p>
    <p>Многие предлагают вам помощь. Фирмы-поставщики инструментальных средств настойчиво говорят о чудесах, которые творят их программы. Мудрецы от методологии заверяют, что их средства гарантируют результаты. Каждый считает свой язык программирования лучшим из лучших, а операционную систему – панацеей.</p>
    <p>Разумеется, эти утверждения неверны. Простых ответов не существует. Нет такого понятия, как наилучшее решение, будь то инструментальное средство, язык или операционная система. Существуют лишь некие системы, которые являются более приемлемыми при конкретном стечении обстоятельств.</p>
    <p>И в этот момент на сцену выходит прагматизм. Стоит избегать обряда венчания с конкретной технологией, но при этом необходимо обладать подготовкой и опытом, настолько обширными, что это позволит выбрать верные решения в конкретных ситуациях. Ваша подготовка происходит из понимания основных принципов информатики, а опыт основывается на разнообразных практических проектах. Теория и практика сочетаются, придавая вам силу.</p>
    <p>Вы корректируете ваш подход, приспосабливая его к существующим обстоятельствам и окружающей среде. Вы оцениваете относительную важность всех факторов, влияющих на проект, и используете свой опыт в выработке приемлемых решений. И все это делаете непрерывно по ходу работы. Программисты-прагматики делают дело и делают его хорошо.</p>
   </section>
   <section>
    <title>
     <p>Кому адресована эта книга?</p>
    </title>
    <p>Эта книга предназначена программистам, желающим повысить эффективность и продуктивность своей работы. Возможно, вы разочарованы тем, что не реализуете до конца свой потенциал. Возможно, смотрите на коллег, которые, как вам кажется, используют инструментальные средства, чтобы опередить вас в продуктивности своего труда. Может быть, в вашей работе используются устаревшие технологии, и вам хотелось бы узнать, как можно приложить новые идеи к тому, над чем вы работаете в данный момент.</p>
    <p>Авторы не претендуют на знание ответов на все вопросы (или на большинство из них) и на то, что их идеи применимы к любым ситуациям. Можно лишь сказать, что если следовать подходу авторов, то опыт приобретается быстро, продуктивность увеличивается и целостное понимание процесса разработки программ улучшается. Вы создаете лучший программный продукт.</p>
   </section>
   <section>
    <title>
     <p>Как происходит становление программиста-прагматика?</p>
    </title>
    <p>Каждый разработчик уникален, со своими сильными сторонами и слабостями, предпочтениями и неприязнью. С течением времени каждый создает собственную окружающую среду. Эта среда отражает индивидуальность программиста в той же степени, как его (или ее) хобби, одежда или прическа. Однако, если вы принадлежите к программистам-прагматикам, то у вас есть общие черты, характеризующие данный тип:</p>
    <p>• <strong>Опережающее восприятие и быстрая адаптация.</strong> У вас есть инстинкт на технологии и методы, и вам нравится проверять их на практике. Вы быстро схватываете новое и объединяете его с уже имеющимися знаниями. Ваша уверенность рождается из опыта.</p>
    <p>• <strong>Любознательность.</strong> Вы стремитесь задавать вопросы. "Это здорово – как тебе это удалось?" "У тебя возникали сложности при работе с этой библиотекой?" "Что это за система BeOS, о которой я как-то слышал?" "Как реализуются символические ссылки?" Вы – охотник до мелких фактов, каждый из которых может повлиять на то или иное решение даже годы спустя.</p>
    <p>• <strong>Критическое осмысление.</strong> Вы редко принимаете что-то на веру, не ознакомившись предварительно с фактами. Когда коллеги говорят, что "этого не может быть, потому что этого не может быть никогда", или же фирма-поставщик обещает решить абсолютно все ваши проблемы, у вас возникает ощущение близящейся схватки с соперником.</p>
    <p>• <strong>Реализм.</strong> Вы пытаетесь нащупать, где же находятся подводные камни в каждой проблеме, с которой приходится сталкиваться. Реализм дает понимание того, насколько трудными могут быть многие предметы и сколько времени займет то или иное действие. Осознание для себя, что процесс должен быть непростым или что для его завершения потребуется время, придаст вам жизненные силы, необходимые для его осуществления.</p>
    <p>• <strong>Универсальность.</strong> Вы стараетесь познакомиться с большим числом технологий и операционных систем и работаете, чтобы не отставать от новшеств. Хотя для вашей теперешней работы может потребоваться узкая специализация, вы всегда сможете перейти в новую область, открывая для себя новые горизонты.</p>
    <p>Под конец авторы приберегли наиболее общие характеристики. Все программисты-прагматики обладают ими. Они настолько общие, что могут расцениваться как подсказки:</p>
    <empty-line/>
    <cite>
     <p>Подсказка 1: Позаботьтесь о вашем ремесле</p>
    </cite>
    <empty-line/>
    <p>Нет смысла разрабатывать программы, если вы не заботитесь о качестве работы.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 2: Думай! О своей работе</p>
    </cite>
    <empty-line/>
    <p>Авторы призывают вас во время работы думать исключительно о работе – только так вы останетесь программистом-прагматиком. Это не случайная оценка существующей практики, а критическая оценка каждого принимаемого вами решения – в течение каждого рабочего дня и по каждому проекту. Никогда не пользуйтесь автопилотом. Думайте постоянно, критикуя свою работу в реальном масштабе времени. Старый девиз фирмы IBM "ДУМАЙ!" является своего рода мантрой для программиста-прагматика.</p>
    <p>Если сказанное покажется вам каторжной работой, это значит, что вы обнаруживаете реалистическое мышление. Это, вероятно, отнимет некоторую часть вашего драгоценного времени – того времени, которое уже спрессовано до крайности. Но наградой станет более активное вовлечение в работу, которую вы любите, чувство властителя над все большим числом предметов и удовольствие, порождаемое чувством постоянного усовершенствования. Вложенное вами время будет приносить доход в течение долгого периода по мере того, как вы и ваша команда будут работать с большей эффективностью, писать программы, которые легче поддерживать, и тратить меньше времени на производственные собрания.</p>
   </section>
   <section>
    <title>
     <p>Прагматики-одиночки и большие команды</p>
    </title>
    <p>У некоторых людей возникает чувство, что в больших командах или сложных проектах нет места индивидуальности. "Разработка программ является инженерной дисциплиной, которая нарушается, когда отдельные члены команды начинают решать сами за себя", – говорят они.</p>
    <p>Авторы не согласны с этим утверждением.</p>
    <p>Разработка программ призвана быть инженерной дисциплиной. Однако это не исключает индивидуального мастерства. Достаточно вспомнить о больших соборах, построенных в Европе в средние века. Для каждого из них потребовались тысячи человеко-лет усилий, прилагаемых на протяжении десятилетий. Приобретенный опыт передавался следующему поколению строителей, которые своими достижениями двигали строительную технику вперед. Но плотники, каменотесы, резчики по дереву и стекольщики оставались мастерами, преобразующими требования для создания единого целого, что выходило за границы чисто механической стороны строительства. Именно вера в их личный вклад не давала замереть этим проектам:</p>
    <cite>
     <p>Отесывая камни, всегда думай о соборах, которые будут строиться из них.</p>
     <text-author>Кредо средневекового каменотеса</text-author>
    </cite>
    <p>В общей структуре проекта всегда найдется место индивидуальности и мастерству. Это утверждение особенно верно, если учитывать сегодняшнее состояние программирования. Через сотню лет современные методы программирования могут показаться такими архаичными, какими сегодня кажутся методы строительства средневековых соборов, тогда как наше мастерство по-прежнему будет в почете.</p>
   </section>
   <section>
    <title>
     <p>Непрерывность процесса</p>
    </title>
    <cite>
     <p>Во время экскурсии по Итонскому колледжу в Англии турист спросил садовника, как ему удается содержать лужайки в столь идеальном состоянии. "Это несложно, – ответил садовник, – вы просто стряхиваете росу каждое утро, выкашиваете лужайку через день и утрамбовываете раз в неделю".</p>
     <p>"И это все?" – спросил турист.</p>
     <p>"Абсолютно все, – ответил садовник, – если заниматься этим на протяжении 500 лет, то ваша лужайка будет не хуже".</p>
    </cite>
    <p>Великие лужайки, как и великие программисты, нуждаются в ежедневном уходе. В ходе беседы консультанты в области менеджмента не преминут вставить японское слово «кайдзен». "Кайдзен" – японский термин, означающий политику непрерывного внедрения большого количества мелких усовершенствований. Считается, что «кайдзен» стала одной из основных причин резкого роста производительности и качества в японской промышленности, и эту политику стали применять во многих странах. «Кайдзен» применима и к отдельным личностям. Каждый день необходимо работать, оттачивая свои навыки и добавляя в свой репертуар новые произведения. В отличие от итонских газонов, для достижения результата потребуются дни. Годы спустя вы будете поражаться своему преуспеванию и профессиональному росту.</p>
   </section>
   <section>
    <title>
     <p>Как составлена эта книга</p>
    </title>
    <p>Книга состоит из кратких разделов, каждый из которых является законченным и посвящен определенной теме. В тексте есть перекрестные ссылки, которые помогают поставить каждую тему в контекст. Разделы можно читать в любом порядке – данная книга не предназначена для чтения от начала до конца.</p>
    <p>Периодически вам будут попадаться вставки типа "Подсказка nn" (например, "Подсказка 1: Позаботьтесь о вашем ремесле"). Помимо выделения некоторых важных моментов в тексте, подсказки живут своей собственной жизнью, а авторы живут по ним повседневно.</p>
    <p>В приложении А содержится перечень использованных ресурсов: библиографический список, список ссылок на web-ресурсы, а также перечень рекомендованных периодических изданий, книг и профессиональных организаций. В тексте книги есть библиографические ссылки и ссылки на web-ресурсы, такие как [КР99] и [URL 18] соответственно.</p>
    <p>Авторы включили также Упражнения и Вопросы для обсуждения. Упражнения (и ответы к ним) как правило, несложные, тогда как Вопросы для обсуждения более замысловаты. Для того чтобы передать свой образ мышления, авторы включили свои собственные ответы к упражнениям в приложение В, но лишь некоторые из упражнений имеют единственное корректное решение. Вопросы для обсуждения могут стать основой для групповых дискуссий или написания эссе на углубленных курсах программирования.</p>
   </section>
   <section>
    <title>
     <p>Исходные тексты программ и другие ресурсы</p>
    </title>
    <p>Большинство программ, представленных в этой книге, извлечены из компилируемых исходных файлов, которые можно загрузить с web-сайта  <a l:href="#http://www.pragmaticprogrammer.com">www.pragmaticprogrammer.com</a>.</p>
   </section>
   <section>
    <title>
     <p>Ваши отклики</p>
    </title>
    <p>Авторам книги интересны ваши отклики. Комментарии, предложения, замеченные в тексте ошибки и проблемы в приведенных примерах всячески приветствуются. Наш электронный адрес:</p>
    <p><a l:href="mailto:ppbook@pragmaticptogrammer.com">ppbook@pragmaticptogrammer.com</a>.</p>
   </section>
   <section>
    <title>
     <p>Благодарности</p>
    </title>
    <p>Когда мы начали писать эту книгу, у нас и в мыслях не было, сколько коллективных усилий необходимо для ее выпуска в свет.</p>
    <p>Издательство Addison-Wesley было как всегда великолепно, пригласив пару начинающих хакеров и показав авторам весь процесс издания книги – от идеи до оригинал-макета. Авторы выражают благодарность Джону Уэйту и Меере Равиндирану за поддержку в начале работы над книгой, Майку Хендриксону, редактору-энтузиасту (и оформителю обложки!), Лоррейн Ферье и Джону Фуллеру за помощь в производстве, а также неутомимой труженице Джулии Дебаггис, связавшей нас воедино.</p>
    <p>Затем наступил черед рецензентов. Это Грег Эндресс, Марк Чиэрс, Крис Кли-лэнд, Алистер Кокбэрн, Уорд Каннингхэм, Мартин Фаулер, Тхапг Т. Зиан, Роберт Л.</p>
    <p>Гласе, Скотт Хеннингер, Майкл Хантер, Брайан Кирби, Джон Лакос, Пит Макбрин, Кэри П. Моррис, Джаред Ричардсон, Кевин Рулэнд, Эрик Старр, Эрик Ваут, Крис Ван Вик и Дебора Зуковски. Без их заботливых комментариев и ценных советов эта книга читалась бы хуже, была бы менее точной и в два раза длиннее. Благодарим их за уделенное нам время и мудрость.</p>
    <p>Второе издание этой книги существенно выиграло за счет пристальных взоров читателей. Благодарим Брайана Блэнка, Пола Боула, Тома Экберга, Брента Фулгэ-ма, Луи Поля Эбера, Хенка-Яна Ульде Лоохюса, Алана Лунда, Гарета Маккофана, Иошики Шибату и Фолькера Вурста за найденные ошибки и деликатность, проявленную при указывании на них авторам.</p>
    <p>В течение многих лет мы работали с большим количеством продвинутых клиентов, от них мы набирались опыта, который и описали в этой книге. Недавно мы имели счастье работать с Питером Герке над несколькими проектами. Мы благодарны ему за его поддержку и энтузиазм.</p>
    <p>При издании данной книги использовались программные продукты LaTex, pic, Perl, dvips, ghostview, ispell, GNU make, CVS, Emacs, XEmacs, EGCS, GCC, Java, iContract и SmallEiffel, оболочки Bash и zsh в операционной среде Linux. Поражает тот факт, что все эта груда программного обеспечения распространяется абсолютно бесплатно. Авторы говорят «спасибо» тысячам программистов-прагматиков, создавших эти продукты и передавших их нам. Отдельно хотелось бы поблагодарить Рето Крамера за его помощь в работе с iContract.</p>
    <p>И последнее, но оттого не менее важное: авторы в огромном долгу перед своими семьями, которые не только смирились с поздним засиживанием за компьютером, огромными счетами за телефонные разговоры и постоянным беспорядком, но и благородно время от времени соглашались прочесть то, что написали авторы. Благодарим их за то, что они не давали нам спускаться с небес на землю.</p>
    <p><strong><emphasis>Энди Хант</emphasis></strong></p>
    <p><strong><emphasis>Дэйв Томас</emphasis></strong></p>
   </section>
  </section>
  <section>
   <title>
    <p>Глава 1</p>
    <p>Прагматическая философия</p>
   </title>
   <section>
    <p>Что отличает программистов-прагматиков? Мы полагаем, что это склад ума, стиль, философия подхода к существующим проблемам и их решениям. Прагматики выходят за пределы сиюминутной проблемы, всегда стараются рассмотреть ее в более широком контексте, осознать общую картину происходящего. В конце концов, как можно быть прагматиком вне широкого контекста? Как приходить к интеллектуальным компромиссам и принимать взвешенные решения?</p>
    <p>Другим ключом к успеху прагматиков является то, что они берут на себя ответственность за все, что они делают; это обсуждается ниже в разделе "Мой исходный текст съел кот Мурзик". Будучи ответственными, прагматики не сидят, сложа руки, глядя на то, как их проекты погибают из-за небрежного отношения. В разделе "Программная энтропия" говорится о том, как сохранить проекты в первоначальном виде.</p>
    <p>Большинство людей с трудом воспринимают изменения: иногда по понятным причинам, иногда в силу старой доброй инерции. В разделе "Суп из камней и сварившиеся лягушки" рассматривается стратегия провоцирования изменений, а также (для равновесия) предлагается поучительная сказка о некоем земноводном, которое не учло опасностей, таящихся в постепенном изменении.</p>
    <p>Одним из преимуществ понимания контекста, в котором вы работаете, является более легкое осознание того, насколько хорошими должны быть создаваемые программы. Иногда "почти идеальность" является единственно возможным вариантом, но зачастую приходится идти на компромиссы. Этот аспект исследуется в разделе "Приемлемые программы".</p>
    <p>Конечно, необходимо обладать обширной базой знаний и опыта, чтобы все это одолеть. Обучение представляет собой непрерывный и продолжительный процесс. В разделе "Портфель знаний" обсуждаются некоторые стратегии поддержания стремления к обучению.</p>
    <p>Разумеется, никто из нас не работает в безвоздушном пространстве. Все мы проводим большое количество времени в общении с другими людьми. В разделе "Общайтесь!" перечислены способы, как сделать это общение более эффективным.</p>
    <p>Прагматическое программирование ведет свое начало от философии прагматического мышления. В данной главе приводятся основные положения этой философии.</p>
   </section>
   <section>
    <title>
     <p>1</p>
     <p>Мой исходный текст съел кот Мурзик</p>
    </title>
    <epigraph>
     <p>Страх показаться слабым есть величайшая из всех слабостей.</p>
     <text-author>Ж. Б. Боссюэ, Политика и Священное Писание, 1709</text-author>
    </epigraph>
    <section>
     <p>Одним из краеугольных камней прагматической философии является идея принятия ответственности за себя и за свои действия с точки зрения карьерного роста, проекта и каждодневной работы. Программист-прагматик принимает на себя ответственность за свою собственную карьеру и не боится признаться в неведении или ошибке. Конечно, это не самый приятный момент программирования, но иногда подобное случается даже с самым лучшим из проектов. Несмотря на тщательное тестирование, хорошее документирование и основательную автоматизацию, все идет не так как надо. Выпуски программ запаздывают. Возникают непредусмотренные технические проблемы.</p>
     <p>Подобные вещи случаются, и мы пытаемся справиться с ними настолько профессионально, насколько это возможно. Это означает необходимость быть честным и непосредственным. Мы можем гордиться нашими способностями, но мы должны быть честными, говоря и о наших недостатках – нашем неведении и наших ошибках.</p>
    </section>
    <section>
     <title>
      <p>Принятие ответственности</p>
     </title>
     <p>Ответственность – это то, на что активно соглашаются. Вы связываете себя обязательством, чтобы гарантировать, что нечто делается правильно, но ваш непосредственный контроль над каждым аспектом делаемого не является необходимостью. В дополнение к тому, что вы делаете все от вас зависящее, необходимо анализировать ситуацию на предмет наличия неконтролируемых вами рисков. Вы имеет право не принимать на себя ответственность за невозможную ситуацию, или за ситуацию, риски в которой слишком велики. Вам придется сделать самоотвод, основанный на вашей собственной этике и оценках.</p>
     <p>Если вы приняли на себя ответственность за результат, то вам придется за него перед кем-то отчитываться. Если вы делаете ошибку (как и все мы), признайте ее честно и попытайтесь предложить варианты исправления.</p>
     <p>Не стоит перекладывать вину на кого-либо (или на что-либо) или выдумывать отговорки. Не стоит сваливать все на субподрядчика, язык программирования, менеджмент или коллег по работе. Все они могут сыграть свою роль в неудаче, но вашим делом является решение проблем, а не отговорки.</p>
     <p>Если есть вероятность, что субподрядчик не справится со своими обязанностями, то у вас должен быть план на случай возникновения непредвиденных обстоятельств. Если жесткий диск выходит из строя, унося в небытие весь исходный текст, а у вас нет резервной копии, это ваша вина. Фраза "Мой исходный текст съел кот Мурзик", высказываемая вашему шефу, не решит возникшей проблемы.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 3: Представьте варианты решения проблемы, а не варианты отговорок</p>
     </cite>
     <empty-line/>
     <p>Перед тем как подойти к кому-либо, чтобы высказать, почему что-либо не может быть сделано или уже сломалось, остановитесь и прислушайтесь к себе. Поговорите с резиновым утенком, стоящим на вашем мониторе, или с котом. Как звучит ваша отговорка, разумно или глупо? И как ее воспримет ваш шеф?</p>
     <p>Смоделируйте разговор в уме. Что, вероятнее всего, скажет ваш собеседник? Спросит ли он: "А так вы пробовали?" или "А это вы учли?" Как ответить? Перед тем как пойти и сообщить плохие новости, может, попробовать что-то еще? Иногда вы просто знаете, что он собирается сказать, поэтому избавьте его от лишних забот.</p>
     <p>Вместо отговорок представьте варианты решения проблемы. Не говорите, что это не может быть сделано, объясните, что может быть сделано для спасения ситуации. Может быть, взять да и выбросить исходный текст? Развивайте эти варианты, используя реорганизацию (см. "Реорганизация"). Стоит ли тратить время на разработку прототипа, чтобы определить лучший способ, который необходимо использовать (см. "Прототипы и памятные записки")? Стоит ли внедрять более совершенные процедуры тестирования (см. "Программа, которую легко тестировать" и "Безжалостное тестирование") или автоматизации (см. "Вездесущая автоматизация"), чтобы предотвратить дальнейшие неудачи? Возможно, вам понадобятся дополнительные ресурсы. Не бойтесь спрашивать или признаться, что нуждаетесь в помощи.</p>
     <p>Попытайтесь исключить неубедительные отговорки до того, как их озвучить. Если нужно, выскажите их сначала вашему коту. Ну а если ваш Мурзик возьмет вину на себя…</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Прототипы и памятные записки</p>
     <p>• Реорганизация</p>
     <p>• Программа, которую легко тестировать</p>
     <p>• Вездесущая автоматизация</p>
     <p>• Безжалостное тестирование</p>
     <subtitle>Вопросы для обсуждения:</subtitle>
     <p>• Как вы отреагируете, когда кто-нибудь – кассир в банке, механик в автосервисе, или клерк придет к вам с подобными отговорками? Что в итоге можно подумать о них лично и об их фирме?</p>
    </section>
   </section>
   <section>
    <title>
     <p>2</p>
     <p>Энтропия в программах</p>
    </title>
    <p>Разработка программного обеспечения обладает иммунитетом почти ко всем физическим законам, однако энтропия оказывает на нас сильное влияние. Энтропия – это термин из физики, обозначающий уровень «беспорядка» в системе. К сожалению, законы термодинамики утверждают, что энтропия во вселенной стремится к максимуму. Увеличение степени беспорядка в программах на профессиональном жаргоне называется "порчей программ".</p>
    <p>Существует много факторов, вносящих свой вклад в порчу программ. Похоже, что наиболее важным из них является психология или культура в работе над проектом. Даже если команда состоит лишь из одного-единственного сотрудника, психология проекта может быть весьма тонкой материей. При наличии наилучших планов и специалистов экстракласса, проект все же может рухнуть и сгнить в период разработки. Однако существуют и другие проекты, которые, несмотря на огромные трудности и постоянные неудачи, успешно борются с природной тенденцией к беспорядку и заканчиваются хорошо.</p>
    <subtitle>В чем же состоит разница?</subtitle>
    <p>Некоторые здания, расположенные в старых кварталах города, находятся в хорошем состоянии и чистоте, тогда как другие являют собой жуткие развалины. Почему? Исследователи в области преступности и упадка больших городов открыли удивительный механизм, запускающий процесс быстрого превращения чистенького, нетронутого жилого дома в полуразрушенную и заброшенную трущобу [WK82]</p>
    <p>Причина – одно-единственное разбитое окно.</p>
    <p>Одно разбитое окно, стекло в котором не меняется в течение длительного времени, развивает в обитателях здания ощущение заброшенности – ощущение, что властям нет дела до того, что происходит со зданием. Затем разбивается другое окно. Люди начинают мусорить. На стенах появляются похабные надписи. Возникают серьезные повреждения строительной конструкции. За относительно короткое время здание портится, несмотря на стремление владельца отремонтировать его, и ощущение заброшенности становится реальностью.</p>
    <p>"Теория разбитого окна" дала полицейским участкам в Нью-Йорке и других больших городах стимул: навалиться всем миром на решение малых проблем ради сдерживания больших. И это срабатывает: сосредоточение усилий на первоочередном решении проблем разбитых окон, похабных надписей и других малых правонарушений, привело к сокращению уровня тяжких преступлений.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 4: Не живите с разбитыми окнами</p>
    </cite>
    <empty-line/>
    <p>Не оставляйте "разбитые окна" (неудачные конструкции, неверные решения или некачественный текст программы) без внимания. Как только вы их обнаружите, чините сразу. Если нет времени на надлежащий ремонт, забейте окно досками. Наверняка вы сможете закомментировать ошибочный фрагмент или вывести на экран сообщение "В стадии разработки", или использовать фиктивные данные. Необходимо предпринять хотя бы малейшее действие, чтобы предотвратить дальнейшее разрушение, и показать, что вы контролируете ситуацию.</p>
    <p>Мы видели, как безошибочные, функциональные системы быстро портились, как только окна начали разбиваться. Существуют и другие факторы, которые вносят свой вклад в порчу программ, и мы коснемся некоторых из них далее, но небрежность ускоряет порчу быстрее, чем любой другой фактор.</p>
    <p>Вы можете подумать, что ни у кого не будет времени обойти "разбитые окна" проекта и отремонтировать их. Если вы продолжаете думать подобным образом, тогда вам лучше спланировать приобретение мусорного контейнера или переехать в другой район города. Не давайте энтропии победить себя.</p>
    <subtitle>Как погасить пожар</subtitle>
    <p>И напротив, существует история абсурдного (до неприличия) опыта одного из авторов книги, Энди Ханта. Его дом был в идеальном порядке, великолепен, наполнен бесценным антиквариатом, произведениями искусства и прочими ценностями. Однажды гобелен, висевший в гостиной слишком близко от камина, загорелся. Пожарные примчались, чтобы спасти положение, а заодно и дом. Но перед тем как втащить в дом свои большие, грязные шланги, они остановились перед полыхающим огнем, чтобы раскатать специальный мат от входной двери до очага пожара. Они боялись испортить ковер.</p>
    <p>Конечно, это весьма экстремальный случай, но именно этот способ должен использоваться в случае с программным обеспечением. Одно разбитое окно – неудачно спроектированный фрагмент программы, неверное решение, принятое менеджером (действующее на протяжении всего проекта) – это все, что требуется дня того, чтобы началось отклонение от нормы. Если оказывается, что вы работаете над проектом с несколькими разбитыми окнами, то слишком легко сползти к умонастроению типа "Вся оставшаяся часть программы – это ерунда, я всего лишь следую примеру". Не важно, в каком состоянии находился проект до этого момента. В оригинальном эксперименте, приведшем к возникновению теории разбитых окон, заброшенный автомобиль стоял в течение недели нетронутым. Но как только одно-единственное окно было разбито, автомобиль был «раздет» и перевернут вверх колесами за несколько часов.</p>
    <p>К тому же, если вы находитесь в команде и работаете над проектом, тексты программ которого совершенны изначально – корректно написаны, хорошо спроектированы и элегантны – вы, вероятно, предпримете дополнительные усилия к тому, чтобы не испортить их, так как это сделали пожарные с ковром. Даже если речь идет о чрезвычайной ситуации (контрольные сроки, дата выпуска, демонстрационная версия для выставки и т. д.), вы не захотите быть первым среди тех, кто портит проект.</p>
    <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
    <p>• Суп из камней и сварившиеся лягушки</p>
    <p>• Реорганизация</p>
    <p>• Команды прагматиков</p>
    <subtitle>Вопросы для обсуждения</subtitle>
    <p>• Поспособствуйте укреплению вашей команды, изучив ваших компьютерных «соседей». Выберите одно или два "разбитых окна" и обсудите с вашими коллегами, в чем состоят проблемы и что можно сделать для их решения.</p>
    <p>• Можно ли сказать, когда разбивается первое окно? Какова ваша реакция? Если это произошло в результате чьего-либо решения, или по воле руководства, то как вести себя в этом случае?</p>
   </section>
   <section>
    <title>
     <p>3</p>
     <p>Суп из камней и сварившиеся лягушки</p>
    </title>
    <cite>
     <p>Трое солдат возвращались с войны и проголодались. Когда они увидели впереди деревню, их настроение поднялось – они были уверены, что крестьяне накормят их. Но как только они пришли в деревню, все двери оказались заперты, а окна – закрыты. После долгой войны крестьяне бедствовали и прятали все, что у них есть.</p>
     <p>Это не смутило солдат, они вскипятили котел воды и аккуратно положили в него три камня. Удивленные крестьяне вышли посмотреть.</p>
     <p>"Это суп из камней", – объяснили солдаты крестьянам. "И это все, что вы в него кладете?" – спросили крестьяне. "Абсолютно все – хотя на вкус он будет намного лучше, если положить в него немного моркови". Один из крестьян убежал и быстро вернулся с корзиной моркови из своего погреба.</p>
     <p>Через некоторое время крестьяне вновь спросили: "И это все?"</p>
     <p>"Да", – сказали солдаты, "но пара картофелин сделает суп посытнее", И другой крестьянин убежал.</p>
     <p>В течение следующего часа солдаты попросили у крестьян другие ингредиенты, которые сделали суп вкуснее: мясо, лук, соль и травы. И каждый раз крестьяне потрошили свои запасы.</p>
     <p>Так они сварили большой котел дымящегося супа. Затем солдаты вынули камни и уселись вместе со всей деревней, чтобы поесть досыта – первый раз за многие месяцы.</p>
    </cite>
    <p>В истории с супом из камней есть два важных урока. Солдаты обманывали крестьян, используя любопытство последних, чтобы добыть у них пищу. Но что более важно, солдаты явились катализатором, объединяя жителей деревни с тем, чтобы общими усилиями сделать то, что они не смогли сделать сами, – синергетический результат. В конечном итоге выигрывают все.</p>
    <p>Иногда в этой жизни вам бы хотелось оказаться на месте солдат.</p>
    <p id="_ednref1">Вы можете оказаться в ситуации, когда вам точно известно, что нужно сделать и как это сделать. Перед глазами возникает общий план системы, и вы осознаете, что именно так это и должно быть. Но если вы попросите разрешения на проработку аспекта в целом, то столкнетесь с волокитой и пустыми глазами. Люди будут образовывать комиссии, бюджет должен быть одобрен, и все будет усложнено. Каждый будет держаться за свое кресло. Иногда это называется "изначальной усталостью". Пора вытаскивать камни из котла. Выработайте то, о чем вы реально можете попросить. Проработайте детали. Как только вы это сделаете, покажите людям и позвольте им удивиться. Они скажут: "Конечно, было бы лучше, если бы мы добавили". Положим, что это не важно. Расслабьтесь и подождите, пока они не начнут спрашивать вас о добавлении функциональных возможностей, которые вы задумали изначально. Людям легче присоединиться к грядущему успеху. Покажите им свет в конце туннеля, и они сплотятся вокруг вас <a l:href="#n_1">[1]</a>.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 5: Будьте катализатором изменений</p>
    </cite>
    <empty-line/>
    <p>С другой стороны, история с супом из камней – это история о ненавязчивом и постепенном обмане. Это история о шорах на глазах. Крестьяне думают о камнях и забывают обо всем остальном в мире. Все мы впадаем в подобное состояние ежедневно. Нечто просто подкрадывается к нам.</p>
    <p>Всем нам известны симптомы. Проекты медленно и неизбежно полностью выходят из-под контроля. Большинство программных катастроф начинаются с малозаметных вещей, и большинство проектов в один прекрасный день идут вразнос. Шаг за шагом система отклоняются от требований, при этом фрагмент текста программы обрастает «заплатами», пока от оригинала не остается ничего. Зачастую именно скопившиеся мелочи приводят к разрушению морали и команд.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 6: Следите за изменениями</p>
    </cite>
    <empty-line/>
    <p>Сами мы, по чести, никогда этого не делали. Но говорят, что если взять лягушку и бросить ее в кипящую воду, то она сразу выпрыгнет наружу. Однако если бросить лягушку в кастрюлю с холодной водой, а затем медленно нагревать ее, то лягушка не заметит медленного увеличения температуры и останется сидеть в кастрюле, пока не сварится.</p>
    <p>Заметим, что проблема лягушки отличается от проблемы разбитых окон, обсуждаемой в разделе 2. В "теории разбитых окон" люди теряют волю к борьбе с энтропией, поскольку она никого не волнует. Лягушка же просто не замечает изменений.</p>
    <p>Не будьте лягушкой. Не сводите глаз с общей картины происходящего. Постоянно наблюдайте за тем, что происходит вокруг вас, а не только за тем, что делаете вы лично.</p>
    <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
    <p>• Энтропия в программах</p>
    <p>• Программирование в расчете на совпадение</p>
    <p>• Реорганизация</p>
    <p>• Западня требований</p>
    <p>• Команды прагматиков</p>
    <subtitle>Вопросы для обсуждения</subtitle>
    <p>• Просматривая черновик данной книги, Джон Лакос поднял следующий вопрос: солдаты постоянно обманывали крестьян, но в результате изменений, катализатором которых они стали, лучше стало всем. Однако, постоянно обманывая лягушку, вы наносите ей вред. Когда вы пытаетесь ускорить изменения, то можете ли определить, варите вы суп из камней или же лягушку? Является ли это решение субъективным или объективным?</p>
   </section>
   <section>
    <title>
     <p>4</p>
     <p>Приемлемые программы</p>
    </title>
    <epigraph>
     <p>Для лучшего добро сгубить легко.</p>
     <text-author>У. Шекспир, Король Лир, действие 1, сцена 4</text-author>
    </epigraph>
    <section>
     <p>Существует старый анекдот об американской фирме, которая заказала 100000 интегральных схем на предприятии в Японии. В условиях контракта указывался уровень дефектности: один чип на 10000. Несколько недель спустя заказ прибыл в Америку: одна большая коробка, содержащая тысячи интегральных схем, и одна маленькая, в которой находилось десять схем. К маленькой коробке был приклеен ярлычок с надписью "Дефектные схемы".</p>
     <p>Если бы у нас был такой контроль качества! Но реальный мир не позволяет производить многое из того, что является действительно совершенным – особенно программы без ошибок. Время, технология и темперамент – все находится в сговоре против нас.</p>
     <p>Однако это не должно вас обескураживать. По словам Эда Иордона, автора статьи в журнале IEEE Software [You95], вы можете обучиться созданию приемлемых программ – приемлемых для ваших пользователей, служб сопровождения и с точки зрения вашего же собственного спокойствия. Вы обнаружите, что производительность вашего труда повысилась, а ваши пользователи стали чуть-чуть счастливее. Кроме того, ваши программы станут лучше за счет сокращения инкубационного периода.</p>
     <p>Перед тем как пойти дальше, мы должны определиться в том, что собираемся сказать. Фраза «приемлемый» не подразумевает неаккуратную или неудачно написанную программу. Все удачные системы должны отвечать требованиям их пользователей. Мы просто призываем к тому, чтобы пользователям была дана возможность участвовать в процессе принятия решения, если созданное вами действительно приемлемо.</p>
    </section>
    <section>
     <title>
      <p>Находите компромисс с пользователями</p>
     </title>
     <p id="_ednref2">Обычно вы пишете программы для других людей. Часто вы вспоминаете о том, что хорошо бы получить от них требования <a l:href="#n_2">[2]</a>. Но как часто вы спрашиваете их, а насколько хорошими они хотят видеть эти программы? Иногда выбирать не из чего. Если вы работаете над передовыми технологиями, космическим челноком, или низкоуровневой библиотекой, которая будет широко распространяться, то требования будут более строгими, а варианты – ограниченными. Но если вы работаете над новым продуктом, то у вас будут ограничения другого рода. Маркетологам придется сдерживать обещания, вероятные конечные пользователи могут строить планы, основанные на дате поставки программы, а ваша фирма, конечно, будет ограничена в денежных средствах. Профессионалы не могут игнорировать требования пользователей – просто добавить к программе новые средства или «отшлифовать» еще раз тексты программ. Мы не призываем к паническим настроениям: одинаково непрофессионально обещать невероятные сроки и срезать основные "технические углы" чтобы уложиться вовремя.</p>
     <p>Сфера действия и качество создаваемой вами системы должны указываться в части системных требований.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 7: Сделайте качество одним из пунктов требований</p>
     </cite>
     <empty-line/>
     <p>Часто вы будете оказываться в ситуациях, когда необходимо идти на компромисс. Удивительно, но многие пользователи предпочтут использовать программы с некоторыми недоработками, но сегодня, чем год ожидать выпуска мультимедийной версии. Многие IT-департаменты, имеющие ограничения по бюджету, могли бы согласиться с этим утверждением. Хорошие программы (но сегодня) зачастую являются более предпочтительными по сравнению с отличными программами (но завтра). Если вы заранее дадите другим пользователям поиграться с вашей программой, то часто их отзывы будут способствовать выработке лучшего конечного решения (см. "Стрельба трассирующими").</p>
    </section>
    <section>
     <title>
      <p>Знайте меру</p>
     </title>
     <p>В ряде случаев программирование подобно живописи. Вы начинаете с чистого холста и определенных базовых исходных материалов. Используете сочетание науки, искусства и ремесла, чтобы определить, что же делать с ними. Набрасываете общую форму, выписываете основу, затем работаете над деталями. Постоянно отступаете назад, чтобы критически взглянуть на то, что же вы сделали. Иногда отбрасываете холст и начинаете снова.</p>
     <p>Но художники скажут вам, что вся тяжелая работа идет насмарку, если вы не знаете, в какой момент нужно остановиться. Если вы добавляете слой за слоем, деталь за деталью, живопись может потеряться в краске.</p>
     <p>Не стоит портить очень хорошую программу путем приукрашивания и излишней шлифовки. Двигайтесь вперед и дайте вашей программе отстаивать свои права в течение какого-то времени. Она может быть несовершенной. Не беспокойтесь, возможно, она никогда не станет совершенной. (В главе 6 мы обсудим философию разработки программ в несовершенном мире.)</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Стрельба трассирующими</p>
     <p>• Западня требований</p>
     <p>• Команды прагматиков</p>
     <p>• Большие надежды</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Обратите внимание на производителей инструментальных программных средств и операционных систем, которыми вы пользуетесь. Можете ли вы найти свидетельство тому, что эти компании не испытывают неудобства, поставляя программное обеспечение, хотя им известно, что оно несовершенно? Как пользователь, вы скорее: (1) подождете, пока они устранят все ошибки, (2) выберете усложненную версию программы и примете отдельные ошибки или (3) выберете упрощенную версию программы, но с меньшим числом дефектов?</p>
     <p>• Рассмотрите эффект разбиения на модули при поставке программного обеспечения. Больше или меньше времени потребуется для доведения монолитного программного блока до требуемого уровня качества по сравнению системой, спроектированной по модульному принципу? Можете ли вы привести коммерческие примеры?</p>
    </section>
   </section>
   <section>
    <title>
     <p>5</p>
     <p>Портфель знаний</p>
    </title>
    <epigraph>
     <p>Инвестиции в знания окупаются лучше всего.</p>
     <text-author>Бенджамин Франклин</text-author>
    </epigraph>
    <section>
     <p>Ах, старина Франклин! Никогда не лез в карман за многозначительным наставлением. Если бы мы рано ложились и рано вставали, мы стали бы великими программистами, не так ли? Ранняя птичка никогда не остается без червячка, но что при этом происходит с червячком?</p>
     <p>Хотя в данном случае Бенджамин действительно попал в точку. Знание и опыт являются самыми важными профессиональными активами.</p>
     <p id="_ednref3">К сожалению, знания и опыт представляют собой истекающие активы <a l:href="#n_3">[3]</a>. Ваше знание устаревает по мере того, как разрабатываются новые методики, языки, технологии и операционные среды. Изменение расстановки сил на рынке может сделать ваш опыт устаревшим или полностью неприменимым. Принимая во внимание скорость, с которой промчались годы Интернета, это может произойти довольно быстро.</p>
     <p>По мере того как величина ваших знаний уменьшается, то же самое происходит с ценностью вас для фирмы-работодателя или заказчика. Мы хотели бы предотвратить возникновение подобной ситуации.</p>
    </section>
    <section>
     <title>
      <p>Ваш портфель знаний</p>
     </title>
     <p>Портфелями знаний мы предпочитаем называть все факты, известные программистам об информатике, области приложений, в которых они работают, и накопленный ими опыт. Управление портфелем знаний очень похоже на управление финансовым портфелем:</p>
     <p>1. Серьезные инвесторы инвестируют регулярно – это как привычка.</p>
     <p>2. Диверсификация – это залог успеха в течение длительного времени.</p>
     <p>3. У проворных инвесторов портфель всегда сбалансирован – в нем имеются и консервативные, и высокорисковые, высокодоходные инвестиции.</p>
     <p>4. Инвесторы стараются покупать ценные бумаги подешевле и продавать их подороже, обеспечивая тем самым максимальный возврат.</p>
     <p>5. Портфели нуждаются в периодическом пересмотре и повторной балансировке.</p>
     <p>Управляйте вашим портфелем знаний, используя те же самые принципы, и ваша карьера будет успешной.</p>
    </section>
    <section>
     <title>
      <p>Построение вашего портфеля</p>
     </title>
     <p>• <strong>Инвестируйте на регулярной основе.</strong> Как и в случае финансов, необходимо регулярно инвестировать в ваш портфель знаний. Даже если объем инвестиций невелик, сама по себе привычка важна, как, впрочем, и объемы. Несколько примеров на эту тему приводятся в следующем разделе.</p>
     <p>• <strong>Инвестируйте в различные сферы.</strong> Чем больше вы знаете о различных вещах, тем большую ценность вы представляете. Как минимум вы обязаны знать плюсы и минусы конкретной технологии, с которой вы работаете в данный момент. Но не останавливайтесь на этом. Лицо информатики меняется быстро – новейшая технология сегодняшнего дня может оказаться почти бесполезной (или, по меньшей мере, не найти спроса) завтра. Чем больше технологий вы освоите, тем легче вам будет приспособиться к изменениям.</p>
     <p>• <strong>Управляйте риском.</strong> Технология находится в некоем диапазоне – от рисковых и потенциально высокодоходных до низкорисковых и низкодоходных стандартов. Вложение всех ваши денег в высокорисковые акции, курс которых может внезапно обвалиться, и другая крайность – консервативное вложение и упущение возможностей – не самые лучшие идеи. Не кладите все "технические яйца" в одну корзину.</p>
     <p>• <strong>Покупайте подешевле, продавайте подороже.</strong> Обучение передовой технологии до того, как она станет популярной, может быть столь же сложной задачей, как найти обесцененные акции, но отдача может стать наградой. Изучение языка Java, когда он только что появился, могло показаться рискованным, но оно щедро вознаградило тех, кто принял это раньше всех, и сегодня они занимают лидирующие позиции в данной области.</p>
     <p>• <strong>Пересмотр и повторная балансировка.</strong> Информатика – очень динамичная отрасль. Новейшая технология, которую вы начали изучать в прошлом месяце, сегодня может устареть. Возможно, вам понадобится восстановление навыков по технологии баз данных, которой вы не пользовались какое-то время. А может быть, вы смогли бы стать лучшей кандидатурой на открывшуюся вакансию, если бы попробовали изучить другой язык…</p>
     <p>Из всех этих директив, самой важной и самой простой в исполнении является</p>
     <empty-line/>
     <cite>
      <p>Подсказка 8: Инвестируйте регулярно в ваш портфель знаний</p>
     </cite>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>Цели</p>
     </title>
     <p>Теперь у вас есть некоторые директивы, что и когда добавлять к вашему портфелю знаний, как лучше приобрести интеллектуальный капитал, который будет вложен в ваш портфель? Вот несколько предложений.</p>
     <p>• <strong>Учите (как минимум) по одному языку программирования каждый год.</strong> Различные языки решают различные проблемы по-разному. Выучив несколько различных подходов, вы можете расширить мышление и избежать закоснелости. Вдобавок, изучать многие языки сейчас намного легче, благодаря богатому выбору бесплатно распространяющегося программного обеспечения в сети Интернет (см. Приложение А).</p>
     <p>• <strong>Читайте по одной технической книге ежеквартально.</strong> В книжных магазинах полным-полно технической литературы по темам, интересующим вас или связанным с проектом, над которым вы работаете в настоящее время. Как только это войдет у вас в привычку, читайте по одной книге в месяц. После того как вы овладеете технологиями, которыми вы пользуетесь на данный момент, расширяйте круг своих интересов и изучайте другие технологии.</p>
     <p>• <strong>Читайте книги, не относящиеся к технической литературе.</strong> Важно помнить, что пользователями компьютеров являются люди – люди, чьи потребности вы пытаетесь удовлетворить. Не забывайте о человеческом факторе.</p>
     <p>• <strong>Повышайте квалификацию на курсах.</strong> Ищите интересные курсы в вашем районе, школе или университете, а может быть, и во время грядущей технической выставки, которая проводится в вашем городе.</p>
     <p>• <strong>Участвуйте в собраниях локальных групп пользователей.</strong> Но не просто приходите и слушайте, а принимайте активное участие. Изоляция может оказаться смертельной для вашей карьеры; разузнайте, над чем работают люди за пределами вашей компании.</p>
     <p>• <strong>Экспериментируйте с различными операционными средами.</strong> Если вы работали только в среде Windows, поиграйте со средой Unix дома (для этой цели прекрасно подходит бесплатно распространяемая версия Unix). Если вы использовали только сборочные файлы и редактор, попробуйте интегрированную среду разработчика и наоборот.</p>
     <p>• <strong>Оставайтесь в курсе событий.</strong> Подпишитесь на профессиональные журналы и другие периодические издания (рекомендации приведены в Приложении А). Выберите из них те, которые покрывают технологии, отличные от вашего текущего проекта.</p>
     <p>• <strong>Подключайтесь к информационным сетям.</strong> Хотите знать плюсы и минусы нового языка или технологии? Группы новостей отлично подходят для поиска практических результатов работы с ними других людей, используемого ими жаргона и т. д. Походите по Интернету в поисках статей, платных сайтов, и любых других доступных источников информации.</p>
     <p>Важно продолжать инвестирование. Как только вы почувствуете, что освоили новый язык или фрагмент технологии, двигайтесь дальше. Изучайте другой.</p>
     <p>Неважно, будете ли вы когда-либо использовать одну из этих технологий в проекте, или даже не упомянете о них в своем резюме. Процесс обучения расширит ваше мышление, открывая для вас новые возможности и новые пути в творчестве. "Перекрестное опыление" идей важно; попытайтесь применить выученные уроки к проекту, над которым вы работаете в настоящее время. Даже если в вашем проекте не используется некая технология, вы наверняка сможете позаимствовать некоторые идеи. К примеру, ознакомьтесь с объектно-ориентированным подходом, и вы напишете простые программы на языке С различными способами.</p>
    </section>
    <section>
     <title>
      <p>Возможности обучения</p>
     </title>
     <p>Итак, вы жадно и много читаете, находитесь в курсе всех новейших разработок в вашей сфере (это не так-то легко) и кто-то задает вам вопрос. У вас нет даже намека на идею, каким должен быть ответ, но вы не признаете это открыто, как и многие.</p>
     <p id="_ednref4">В этот момент не останавливайтесь. Примите это как брошенный вам вызов для поиска ответа. Спросите гуру (если в вашем офисе нет гуру, вы должны найти его в Интернете: см. следующую врезку.) Поищите в Интернете. Сходите в библиотеку <a l:href="#n_4">[4]</a>.</p>
     <p>Если вы не можете найти ответ самостоятельно, найдите того, кто это может. Не бросайте поиски. Разговор с другими людьми поможет в построении вашей собственной сети, и вы можете удивиться, находя по пути ответы на другие, не относящиеся к делу проблемы. И этот старый портфель все утолщается и утолщается…</p>
     <p>Все это чтение и исследование требует времени, а времени уже не хватает. Так что вам придется планировать наперед. Запаситесь литературой на то время, которое может бездарно пропасть. Время, которое проходит в очередях на прием к врачам, можно с пользой потратить на чтение литературы – но убедитесь, что вы принесли с собой ваш журнал, а не замусоленную страницу из газеты 1973 года о положении в Папуа Новой Гвинее.</p>
    </section>
    <section>
     <title>
      <p>Критическое осмысление</p>
     </title>
     <p>Последним важным пунктом является критическое осмысление того, что вы прочли или услышали. Необходимо убедиться, что знание в вашем портфеле является точным и не поддается влиянию субподрядчика или типа носителя информации. Опасайтесь фанатиков, настаивающих на том, что их догма обеспечивает единственно правильный ответ, – последний может быть применим или неприменим к вам и вашему проекту.</p>
     <p>Всегда имейте в виду силу меркантильности. Первое попадание, выданное поисковой системой, не обязательно оказывается наилучшим; владелец содержимого может просто заплатить, чтобы оказаться в начале списка. Если книжный магазин «раскручивает» книгу, это вовсе не означает, что она хороша, или даже популярна; за это просто могли заплатить.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 9: Критически анализируйте прочитанное и услышанное</p>
     </cite>
     <empty-line/>
     <p>К сожалению, простых ответов немного. Но, обладая растущим портфелем и применив некоторый критический анализ к потоку изучаемой вами технической литературы, вы сможете понять и сложные ответы.</p>
     <subtitle>Уход за гуру и их разведение</subtitle>
     <p>С глобальным принятием сети Интернет, гуру внезапно стали ближе – на расстоянии нажатия клавиши Enter. Итак, как найти гуру и вызвать его на разговор?</p>
     <p>Здесь есть несколько простых уловок.</p>
     <p>• Знайте точно, что вы хотите спросить, и будьте конкретным, насколько это возможно.</p>
     <p>• Формулируйте ваш вопрос внимательно и вежливо. Помните, что вы просите одолжения; в противном случае может показаться, что вы требуете ответа.</p>
     <p>• Как только вы сформулировали вопрос, остановитесь и вновь поищите ответ. Выхватите несколько ключевых слов и поищите их в Интернете. Поищите подходящие списки часто задаваемых вопросов и ответов на них.</p>
     <p>• Решите, каким образом вы зададите вопрос: в открытой форме или же частным образом. Группы новостей Usenet – прекрасное место встреч для экспертов практически по любой теме, но некоторые опасаются открытого характера этих групп. Кроме того, вы всегда можете отправить сообщение непосредственно вашему гуру по электронной почте. В любом случае используйте строку темы сообщения со смыслом. (Сообщение "Нужна помощь!" не останется незамеченным.)</p>
     <p>• Расслабьтесь и наберитесь терпения. Люди заняты, и, возможно, потребуется несколько дней, чтобы получить конкретный ответ.</p>
     <p>И наконец, обязательно поблагодарите всех, кто ответил вам. И если вы видите людей, задающих вопросы, на которые вы можете ответить, ответьте взаимностью и примите участие.</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• На этой неделе начните учить новый язык программирования. Всегда программировали на С++? Попытайтесь выучить язык Smalltalk [URL 13] или Squeak [URL 14]. Работаете с Java? Попробуйте поработать с языком Eiffel [URL 10] или ТОМ [URL 15]. Информация о других бесплатных компиляторах и средах разработчиков содержится в Приложении А.</p>
     <p>• Начните читать новую книгу (но сначала прочтите эту книгу до конца!) Если вы занимаетесь детальной реализацией и программированием, прочтите книгу по проектированию и архитектуре. Если вы занимаетесь высокоуровневым проектированием, прочтите книгу о методиках программирования.</p>
     <p>• Найдите время для разговора о технологии с людьми, которые не участвуют в проекте, над которым вы работаете в настоящее время, или с теми, кто не работает в вашей фирме. Общение может проходить в кафетерии вашей фирмы, а может быть, стоит поискать коллег-энтузиастов на собрании локальной группы пользователей.</p>
    </section>
   </section>
   <section>
    <title>
     <p>6</p>
     <p>Общайтесь!</p>
    </title>
    <epigraph>
     <p>Лучше быть проигнорированным вовсе, чем недооцененным.</p>
     <text-author>Мэй Уэст, Красавица 90-х, 1934.</text-author>
    </epigraph>
    <p>Может быть, мы способны выучить урок, преподанный мисс Уэст. Важно не только то, что у вас есть, но и как оно упаковано. Лучшие идеи, лучшие программы или самое прагматичное мышление практически не приносят результата, если вы не можете общаться с другими людьми. Без эффективного общения удачная идея может осиротеть.</p>
    <p>Нам, разработчикам, приходится общаться на многих уровнях. Мы проводим время на собраниях, слушаниях и переговорах. Мы работаем с конечными пользователями, пытаясь понять их нужды. Мы пишем программы, которые передают наши намерения машине и документируют наши размышления для будущих поколений разработчиков. Мы пишем предложения и служебные записки, в которых требуем и обосновываем предоставляемые нам ресурсы, сообщая наш статус и предлагая новые подходы. Мы работаем ежедневно в своих командах, отстаивая наши идеи, изменяя существующую практику и вводя новую. Большая часть дня проходит в общении, поэтому нам необходимо овладеть его искусством.</p>
    <p>Мы обобщили ряд идей, которые находим полезными.</p>
    <subtitle>Знайте то, что вы хотите сказать</subtitle>
    <p>Возможно, самой трудной частью более формальных стилей общения, используемых в бизнесе, является выработка именно того, что вы хотите сказать. Беллетристы в деталях намечают сюжет книги перед тем, как начать свой труд, но люди, составляющие технические документы, часто рады сесть за клавиатуру, напечатать "1. Введение" и затем набирать все, что прилет им в голову.</p>
    <p>Планируйте то, что вы хотите сказать. Напишите «рыбу». Затем спросите себя: "Не противоречит ли это тому, что я пытаюсь высказать?" Совершенствуйте содержание, пока не наступит момент выступления.</p>
    <p>Этот подход применим не только к написанию документов. Когда вы готовитесь к важной встрече или телефонному разговору с важным заказчиком, законспектируйте идеи, которыми собираетесь обменяться, и разработайте несколько стратегий для четкого их изложения.</p>
    <subtitle>Знайте вашу аудиторию</subtitle>
    <p id="_ednref5">Вы общаетесь только в том случае, если передаете информацию. Для этого вам необходимо осознавать потребности, интересы и способности вашей аудитории. Всем нам приходилось присутствовать на собраниях, где нахал-разработчик затуманивает глаза вице-президенту по маркетингу долгим монологом о заслугах некоторой скрытой технологии. Это не общение: это просто разговоры и это утомляет <a l:href="#n_5">[5]</a>.</p>
    <p>Составьте устойчивый психологический образ вашей аудитории. Акростих WISDOM, показанный на рисунке 1.1, может помочь в этом.</p>
    <p>Например, вы собираетесь предложить интернет-систему, позволяющую конечным пользователям представлять отчеты об ошибках. Об этой системе можно рассказать по-разному, в зависимости от аудитории. Конечные пользователи обрадуются тому, что смогут представлять отчеты об ошибках 24 часа в сутки, не занимая телефона. Отдел маркетинга сможет использовать этот факт в целях увеличения объема продаж. Менеджеры в отделе поддержки будут счастливы по двум причинам: можно будет обойтись меньшим числом сотрудников и генерация отчетов о возникающих проблемах будут автоматизирована. И, наконец, разработчики смогут приобрести опыт в работе с клиент-серверными интернет-технологиями и новым ядром баз данных. Выступая перед каждой из этих групп с отдельной трибуны, вы добьетесь того, что они станут неравнодушными к вашему проекту.</p>
    <subtitle>Выбирайте подходящий момент</subtitle>
    <p>Итак, наступила пятница, конец рабочего дня, неделю назад на фирме прошла аудиторская проверка. Младший ребенок вашей начальницы попал в больницу, на улице идет проливной дождь, и дорога домой представляется сущим кошмаром. Не самое лучшее время для просьб о наращивании памяти на вашем компьютере.</p>
    <p>Необходимо уяснить для себя приоритеты аудитории, чтобы лучше понять то, что она хочет услышать от вас. Поймайте менеджера, получившего выговор от шефа, потому что потерялась часть исходного текста программы, и вы найдете в его лице слушателя, который лучше воспринимает ваши идеи о централизованных БД данных исходных текстов. То, что вы говорите, должно быть уместным по времени и содержанию. Иногда для этого достаточно лишь задать вопрос типа: "Удобно ли сейчас поговорить о…?"</p>
    <cite>
     <p>What do you want them to learn? (Чему вы хотите их научить)</p>
     <p>What is their interest in what you have got to say? (Какова их заинтересованность в вашей речи?)</p>
     <p>How sophisticated are they? (Насколько искушена ваша аудитория?)</p>
     <p>How much detail do they want? (Насколько детальным должно быть выступление?)</p>
     <p>Whom do you want to own the information? (Кто должен обладать информацией?)</p>
     <p>How can you motivate them to listen to you? (Как мотивировать слушателей?)</p>
     <p><emphasis>Буквы оригинала складываются в слово «Wisdom» – мудрость (англ.)</emphasis></p>
    </cite>
    <p>Рис. 1.1. Акростих WISDOM – о понимании аудитории</p>
    <subtitle>Выбирайте стиль</subtitle>
    <p>Определите стиль подачи материала в соответствии с требованиями аудитории. Одним хочется формального брифинга в стиле "только факты". Другим нравятся долгие, обширные беседы, перед тем как перейти к делу. Что касается печатных материалов, то одни любят получать большие переплетенные отчеты, тогда как другие ожидают простой записки или сообщения по электронной почте. Если сомневаетесь, спрашивайте.</p>
    <p>Однако следует помнить, что вы – лишь одна половина коммуникационной транзакции. Если кто-нибудь говорит, что ему необходимо описать что-либо в одном абзаце, а вы видите, что это можно сделать лишь в объеме нескольких страниц, скажите ему об этом. Помните, этот вид отклика также является формой общения.</p>
    <subtitle>Встречают по одежке</subtitle>
    <p>Ваши идеи важны. Они заслуживают хорошего способа их подачи вашей аудитории.</p>
    <p>Многие разработчики (и их менеджеры) при подготовке письменных документов сосредоточены исключительно на содержании. Мы думаем, что это ошибочно. Любой шеф-повар скажет вам, что вы можете корпеть на кухне часами и затем обратить в прах все ваши усилия неправильной сервировкой стола.</p>
    <p>Сегодня нет оправдания подготовке небрежных печатных материалов. Современные текстовые процессоры (наряду с настольными издательскими системами, такими как LaTeX и troff) могут печатать великолепные выходные документы. Вам необходимо выучить лишь несколько основных команд. Если ваш текстовый процессор поддерживает стили, используйте их. (Ваша фирма могла уже определить стили, которыми вы можете пользоваться). Выучите, как задаются верхние и нижние колонтитулы. В поисках идей стиля и макета, взгляните на образцы документов, включенные в текстовый процессор. Проверьте правописание, вначале автоматически и затем вручную. <emphasis>Ведь в право писании мокнут встретить си и такие ушиб кий, кто торты программа не смолит у ловить.</emphasis></p>
    <subtitle>Привлекайте свою аудиторию</subtitle>
    <p>Мы часто обнаруживаем, что документы, которые мы составляем, менее важны, чем процесс их составления. Если возможно, привлекайте ваших читателей с момента появления черновиков документов. Получите их отклики и используйте их идеи. Вы построите хорошие рабочие взаимоотношения и наверняка улучшите составленный документ.</p>
    <subtitle>Умейте слушать</subtitle>
    <p>Существует одна методика, которую вы должны использовать, если хотите, чтобы люди слушали вас: прислушивайтесь к ним. И в ситуации, когда вы располагаете всей информацией, и во время формального собрания, на котором выдержите речь перед двадцатью руководителями – если вы не будете слушать их, они не будут слушать вас.</p>
    <p>Вдохновляйте людей завязать беседу, задавая вопросы или заставляя их подытожить сказанное вами. Превратите собрание в диалог, и вы сможете выделить что-либо более эффективно. Может быть, вы почерпнете что-то и для себя.</p>
    <subtitle>Обращайтесь к людям</subtitle>
    <p>Если вы задаете кому-нибудь вопрос, а вам не отвечают, то вы полагаете, что данный человек невежлив. Но как часто вы не можете ответить людям, когда они посылают вам сообщение по электронной почте или служебную записку, пытаясь получить информацию, или требуют какого-либо действия? Всегда отвечайте на сообщения электронной почты и голосовые сообщения, даже если ваш ответ звучит просто: "Я вернусь к вам с этим позже". Если вы держите людей в курсе, они намного легче прощают случайные промахи, и чувствуют, что о них не забыли.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 10: Важно, что говорить и как говорить</p>
    </cite>
    <empty-line/>
    <p>Поскольку вы не работаете в безвоздушном пространстве, вам необходимо уметь общаться. Чем эффективнее это общение, тем более влиятельным вы становитесь.</p>
    <subtitle>Связь по электронной почте</subtitle>
    <p>Все, что сказано о коммуникации в письменном виде, одинаково применимо и к электронной почте. Электронная почта стала основой внутрикорпоративных и межкорпоративных коммуникаций. Электронная почта используется при обсуждении контрактов, решении споров и в качестве свидетельства в суде. Но, в силу некоторых причин, люди, которые никогда бы не выслали убогий бумажный документ, позволяют себе распространять отвратительного вида сообщение по всему миру.</p>
    <p>Наши подсказки относительно электронной почты довольно просты:</p>
    <p>• Перед тем как щелкнуть мышкой на кнопке SEND (Отправить), тщательно проверьте текст.</p>
    <p>• Проверьте правописание.</p>
    <p>• Используйте простой формат. Некоторые люди читают сообщения электронной почты, используя пропорциональные шрифты, так что картинки, которые вы старательно создавали при помощи символов ASCII, для них будут выглядеть так, как будто это писала "курица лапой".</p>
    <p>• Используйте форматы RTF или HTML, если вы точно знаете, что все получатели смогут прочесть послание. Простой текст универсален.</p>
    <p>• Старайтесь сводить цитирование к минимуму. Никто не любит получать назад свое собственное сообщение в 100 строк, снабженное пометкой "согласен".</p>
    <p>• Если вы цитируете сообщения других людей, убедитесь, что они атрибутированы, и цитируйте их в тексте (это лучше, чем вложение).</p>
    <p>• Не используйте обидных сообщений, если не хотите, чтобы позже они вернулись, лишив вас покоя.</p>
    <p>• Перед отправкой необходимо проверить список адресатов. Статья в недавнем номере "Уолл-стрит джорнэл" рассказывает о служащем, который взялся распространять критические высказывания о своем шефе по отделу, не подумав о том, что адрес шефа был включен в список рассылки.</p>
    <p>• Архивируйте и организуйте вашу электронную почту – как получаемые, так и отсылаемые материалы.</p>
    <p>Как обнаружили служащие фирм Microsoft и Netscape во время расследования Министерства юстиции США (1999 г.), электронная почта – это бессмертно. Постарайтесь заботиться об электронной почте так, как вы заботитесь о любой написанной записке или отчете.</p>
    <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
    <p>• Прототипы и памятные записки</p>
    <p>• Команды прагматиков</p>
    <subtitle>Вопросы для обсуждения</subtitle>
    <p>• Есть несколько хороших книг, описывающих взаимодействие внутри команд разработчиков [Bro95, МсС95, DL99]. Следует обратить на это особое внимание и попытаться прочесть все три книги течение следующих 18 месяцев. В дополнение к этому, книга "Dinosaur Brains" [Вег96] посвящена эмоциональному багажу, который мы вносим в рабочую среду.</p>
    <p>• В следующий раз, когда вам придется проводить презентацию или писать служебную записку, отстаивающую некую позицию, до начала работы воспользуйтесь акростихом WISDOM. Посмотрите, поможет ли это вам в представлении того, с чем вы выступаете. Если это возможно, поговорите со своей аудиторией после выступления, и посмотрите, насколько точной оказалась ваша оценка их потребностей.</p>
   </section>
  </section>
  <section>
   <title>
    <p>Глава 2</p>
    <p>Прагматический подход</p>
   </title>
   <section>
    <p>Существует ряд подсказок и уловок, применимых ко всем уровням разработки программ: идеи, которые почти аксиоматичны, и процессы, которые практически универсальны. Однако эти подходы редко документируются как таковые; в основном они фиксируются как случайные высказывания в дискуссиях по проектированию, руководству проектами или программированию.</p>
    <p>В этой главе эти идеи и процессы сводятся воедино. Первые два раздела, "Пороки дублирования" и «Ортогональность», тесно связаны между собой. Первый предостерегает от дублирования знания в ваших системах, второй – от растаскивания единого фрагмента знания по многим компонентам системы.</p>
    <p>Все вокруг меняется очень быстро, и становится все труднее и труднее поддерживать приложения на должном уровне. В разделе «Обратимость» рассматриваются некоторые методики, позволяющие изолировать проекты от изменяющейся окружающей среды.</p>
    <p>Следующие два раздела также связаны между собой. В разделе "Стрельба трассирующими" говорится о стиле разработки программ, позволяющем одновременно осуществлять сбор требований, тестировать проектные решения и реализовывать текст программы. Если для вас это звучит слишком хорошо, чтобы быть правдой, то так оно и есть: разработки в стиле "Стрельба трассирующими" применимы не всегда. Для последнего случая в разделе "Прототипы и памятные записки" показано, как при тестировании архитектур, алгоритмов, интерфейсов и идей используются прототипы.</p>
    <p>По мере того как информатика становится зрелой наукой, разработчики изобретают языки программирования все более высокого уровня. Поскольку компилятор, работающий по принципу "сделай так, как приказано" еще не изобретен, в разделе "Языки, отражающие специфику предметной области" представлен ряд более скромных предложений, которые можно реализовать для себя.</p>
    <p>Ну и наконец, все мы работаем в мире с ограниченным временем и ресурсами. Оба этих недостатка переживаются легче (радуя ваше начальство), если поднатореть в оценке продолжительности какого-либо дела, о чем и говорится в разделе "Оценка".</p>
    <p>Держа в голове эти фундаментальные принципы, можно создать программу, которая будет лучше, быстрее и устойчивее. Ее можно даже сделать на вид более простой.</p>
   </section>
   <section>
    <title>
     <p>7</p>
     <p>Пороки дублирования</p>
    </title>
    <section>
     <p>Капитан Джеймс Т. Кирк больше всего любил отключать хищный искусственный интеллект, вводя в компьютер два противоречащих друг другу фрагмента знания. К несчастью, этот принцип оказывается столь же эффективным при доведении вашей программы до обморочного состояния.</p>
     <p>Программисты собирают, организуют, сопровождают и связывают воедино знание. Знание документируется в требованиях, воплощается в запускаемых программах и используется для контроля в ходе тестирования.</p>
     <p>К сожалению, знание нестабильно. Оно изменяется – часто очень быстро. Понимание некоего требования может измениться после встречи с заказчиком. Правительство изменяет административные положения, и некая бизнес-логика устаревает. Тесты могут показать, что выбранный алгоритм не будет работать. Вся эта нестабильность означает, что мы проводим большую часть времени в режиме сопровождения, осуществляя реорганизацию знания и выражая его по-новому в опекаемых нами системах.</p>
     <p>Большинство людей полагает, что сопровождение начинается в момент выпуска приложения в свет и означает устранение ошибок и улучшение характеристик. Мы думаем, что эти люди ошибаются. Программисты постоянно находятся в режиме сопровождения. Наше понимание изменяется день ото дня. Новые требования возникают по мере того, как мы проектируем или создаем текст программы. Возможно, изменяется операционная система. Какой бы ни была причина, сопровождение является не дискретным видом деятельности, а рутинной частью процесса разработки в целом.</p>
     <p>Когда мы осуществляем сопровождение, нам приходится отыскивать и изменять представления о предметах – капсулах знания, заложенных в приложение. Проблема состоит в том, что тиражировать знание в требованиях, процессах и программах, которые мы разрабатываем, легко, и когда мы поступаем подобным образом, возникает призрак сопровождения – тот самый, который начинает делать свое черное дело задолго до отправки готового приложения заказчику.</p>
     <p>Мы полагаем, что единственно надежным способом разработки программ и облегчения их понимания и сопровождения является следование принципу "Не повторяй самого себя" (Далее DRY = Don't Repeat Yourself. – Прим. пер.):</p>
     <p>КАЖДЫЙ ФРАГМЕНТ ЗНАНИЯ ДОЛЖЕН ИМЕТЬ ЕДИНСТВЕННОЕ, ОДНОЗНАЧНОЕ, НАДЕЖНОЕ ПРЕДСТАВЛЕНИЕ В СИСТЕМЕ.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 11: Не повторяй самого себя</p>
     </cite>
     <empty-line/>
     <p>Альтернативой является представление одного и того же предмета в двух или более местах. Если меняется одно, придется вспоминать и об изменении других, или же ваша программа (подобно компьютерам пришельцев) будет поставлена на колени в виду противоречий. Вопрос не в том, вспомните ли вы о необходимом изменении или нет; вопрос в том, когда вы об этом забудете.</p>
     <p>Вы обнаружите, что принцип DRY будет время от времени появляться на протяжении всей книги, часто в контексте, который не имеет ничего общего с программированием. Мы полагаем, что этот принцип является одним из наиболее важных инструментов в арсенале программиста-прагматика.</p>
     <p>В этом разделе мы обрисуем проблемы, связанные с дублированием, и предложим общие стратегии по тому, как с ним справиться.</p>
    </section>
    <section>
     <title>
      <p>Как возникает дублирование?</p>
     </title>
     <p>Большинство наблюдаемых явлений дублирования подпадают под одну из следующих категорий:</p>
     <p>• <strong>Навязанное дублирование.</strong> Разработчики чувствуют, что у них нет выбора – им кажется, что дублирования требует среда окружения.</p>
     <p>• <strong>Неумышленное дублирование.</strong> Разработчики не осознают, что они тиражируют информацию.</p>
     <p>• <strong>Нетерпеливое дублирование.</strong> Разработчики ленятся и осуществляют дублирование, потому что им кажется, что так проще.</p>
     <p>• <strong>Коллективное дублирование.</strong> Фрагмент информации тиражируются несколькими членами одной команды разработчиков (или нескольких команд)</p>
     <p>Рассмотрим эти четыре категории дублирования более подробно.</p>
    </section>
    <section>
     <title>
      <p>Навязанное дублирование</p>
     </title>
     <p>Иногда кажется, что нас заставляют осуществлять дублирование. Стандарты, по которым делается проект, могут потребовать наличия документов, содержащих дублированную информацию, или документов, которые тиражируют информацию в тексте программы. При наличии нескольких целевых платформ каждая из них требует отдельных языков программирования, библиотек и сред разработки, что заставляет нас тиражировать общедоступные определения и процедуры. Сами языки программирования требуют наличия ряда конструкций, которые тиражируют информацию. Все мы находились в ситуациях, когда были не в силах избежать дублирования. И все же зачастую находятся способы сохранения каждого фрагмента знания в одном и том же месте – в соответствии с принципом DRY – и облегчения нашей жизни одновременно. Вот некоторые методики:</p>
     <p><strong>Множественные представления информации.</strong> На уровне создания текста программы, нам часто необходимо представить одну и ту же информацию в различных формах. Предположим, мы пишем приложение «клиент-сервер» с использованием различных языков для клиента и сервера и должны представить некоторую общедоступную конструкцию и на первом, и на втором. Возможно, нам необходим класс, чьи атрибуты отражают схему таблицы базы данных. Может быть, вы пишете книгу и хотите включить в нее фрагменты программ, которые вы также хотели бы скомпилировать и протестировать.</p>
     <p>Немного изобретательности – и дублирование вам не понадобится. Зачастую ответ сводится к написанию простого фильтра или генератора текста программы. Конструкции с использованием нескольких языков можно собрать из обычного представления метаданных, применяя простой генератор текста программ всякий раз при осуществлении сборки программы (пример этого показан на рисунке 3.4). Определения класса могут быть сгенерированы автоматически из интерактивной схемы базы данных или из метаданных, используемых для построения схемы изначально. Фрагменты программ в этой книге вставлялись препроцессором всякий раз при форматировании текста. Уловка состоит в том, чтобы сделать процесс активным: это не может быть однократным преобразованием, в противном случае мы опять окажемся в положении людей, тиражирующих данные.</p>
     <p><strong>Документация в тексте программы.</strong> Программистов учат комментировать создаваемый ими текст программы: удачный текст программы снабжен большим количеством комментариев. К сожалению, им никогда не объясняли, зачем тексту программы нужны комментарии: неудачному тексту требуется большое количество комментариев.</p>
     <p>Принцип DRY говорит о сохранении низкоуровневого знания в тексте программы, частью которого он является, и сохранении комментариев для других, высокоуровневых толкований. В противном случае мы тиражируем знание, и каждое изменение означает изменение и в тексте программы, и в комментариях. Комментарии неизбежно устаревают, а ненадежные комментарии хуже, чем их отсутствие вообще. (Более подробная информация о комментариях содержится в разделе "Все эти сочинения").</p>
     <p><strong>Документация и текст программы.</strong> Вы пишете документацию, затем создаете текст программы. Что-то меняется, и вы исправляете документацию и обновляете текст. И документация, и текст содержат представления одного и того же знания. И все мы знаем, что в суматохе, когда приближается контрольный срок, а важные заказчики высказывают требования, обновление документации стараются отложить.</p>
     <p>Однажды Дэйв Хант работал над переключателем телекса на разные языки. Вполне понятно, что заказчик требовал исчерпывающей тестовой спецификации, а также того, чтобы программы проходили полное тестирование при поставке каждой новой версии. Чтобы убедиться в том, что тесты находились в точном соответствии со спецификацией, команда сгенерировала их автоматически из самого документа. Когда заказчик вносил исправления в спецификацию, автоматически изменялся и тестовый набор программ. Команда убедила заказчика, что, после того как процедура прошла нормально, генерация приемочных тестов длилась лишь несколько секунд.</p>
     <p><strong>Языковые аспекты.</strong> Многие языки навязывают значительное дублирование в исходном тексте программы. Зачастую это происходит, когда язык отделяет интерфейс модуля от его реализации. Языки С и С++ используют файлы заголовка, которые тиражируют имена и печатают информацию о переменных экспорта, функциях и классах (для С++). Язык Object Pascal даже тиражирует эту информацию в том же самом файле. Если вы используете удаленные вызовы процедур или технологию CORBA[URL 29], то при этом происходит дублирование интерфейсной информации в спецификации интерфейса и тексте программы, его реализующей.</p>
     <p>Не существует простой методики, позволяющей преодолеть требования языка. В то время как некоторые среды разработки скрывают потребность в файлах заголовка, генерируя их автоматически, а язык Object Pascal позволяет вам сокращать повторяющиеся объявления функции, в общем случае вы используете то, что вам дано. По крайней мере, для большинства языковых аспектов, файл заголовка, который противоречит реализации, будет генерировать некоторое сообщение об ошибке компиляции или компоновки.</p>
     <p>Также стоит подумать о комментариях в файлах заголовка и реализации. В дублировании комментария функции или заголовка класса в этих двух файлах нет абсолютно никакого смысла. Файлы заголовка используются для документирования аспектов интерфейса, а файлы реализации – для документирования некоторых подробностей, которых пользователи вашей программы знать не должны.</p>
    </section>
    <section>
     <title>
      <p>Неумышленное дублирование</p>
     </title>
     <p>Иногда дублирование происходит в результате ошибок в проекте.</p>
     <p>Рассмотрим пример из области транспорта. Пусть аналитик установил, что, наряду с прочими атрибутами, грузовик имеет тип, номерной знак и водителя. Аналогично, маршрут доставки груза представляет собой сочетание маршрута, грузовика и водителя. Мы создаем программы для некоторых классов, основанных на этом представлении.</p>
     <p>Но что происходит, если водитель по имени Салли заболевает и приходится менять водителя? Классы Truck и DeliveryRoute содержат описание водителя. Какой из них мы должны изменить? Ясно, что это дублирование неудачно. Нормализуйте его в соответствии с базовой бизнес-моделью – необходим грузовику водитель как часть базового набора атрибутов? А маршрут? Возможно, необходим третий объект, который связывает воедино водителя, грузовик и маршрут. Каким бы ни было окончательное решение, стоит избегать этого типа ненормализованных данных.</p>
     <p>Есть не столь очевидный тип ненормализованных данных, который имеет место при наличии множественных взаимозависимых элементов данных. Рассмотрим класс, представляющий отрезок:</p>
     <p>class Line {</p>
     <p>public:</p>
     <p> Point start;</p>
     <p> Point end;</p>
     <p> double length:</p>
     <p>};</p>
     <p>На первый взгляд, этот класс может показаться разумным. Отрезок явно имеет начало и конец и всегда будет иметь длину (даже если она нулевая). Но происходит дублирование. Длина определяется начальной и конечной точками: при изменении одной из точек длина меняется. Лучше сделать длину вычисляемым полем:</p>
     <p>class Line {</p>
     <p>public:</p>
     <p> Point start;</p>
     <p> Point end;</p>
     <p> double length() {return start.distanceTo(end);}</p>
     <p>};</p>
     <p>Позже, в ходе разработки, вы можете нарушить принцип "Не повторяй самого себя" в силу требований к производительности. Зачастую это происходит, когда вам необходимо кэшировать данные во избежание повторения дорогостоящих операций. Эта уловка призвана ограничить воздействие. Нарушение принципа не подвержено воздействию внешнего мира: лишь методы в пределах класса должны поддерживаться в надлежащем состоянии.</p>
     <p>class Line {</p>
     <p>private: </p>
     <p> bool changed;</p>
     <p> double length;</p>
     <p> Point start;</p>
     <p> Point end;</p>
     <p>public:</p>
     <p>void setStart(Point p) {start = p; changed = true;}</p>
     <p>void setEnd(Point p) {end = p; changed = true;}</p>
     <p>Point getStart(void) {return start;} </p>
     <p>Point getEnd(void) {return end;}</p>
     <p>double getLength() {</p>
     <p>  if (changed) {</p>
     <p>    length = start.distanceTo(end);</p>
     <p>    changed = false;</p>
     <p>  }</p>
     <p>return length;</p>
     <p>}</p>
     <p>};</p>
     <p id="_ednref6">Этот пример также иллюстрирует важный аспект для объектно-ориентированных языков типа Java и С++. Там, где это возможно, всегда используются функции средства доступа – для чтения и записи атрибутов объектов <a l:href="#n_6">[6]</a>. Это облегчает добавление функциональных возможностей (типа кэширования) в будущем.</p>
    </section>
    <section>
     <title>
      <p>Нетерпеливое дублирование</p>
     </title>
     <p>Каждый проект испытывает давление времени – силы, которая может двигать лучшими из нас, заставляя идти напролом. Вам нужна подпрограмма, подобная уже написанной вами? Вас соблазнит возможность копирования и внесения лишь нескольких изменений? Вам нужно значение, чтобы представить максимальное число точек? Если я изменю файл заголовка, целый проект должен быть перестроен. Может, мне просто использовать константы в этом месте?… и в этом… и в том… Нужен класс, подобный тому, который есть в системе поддержки Java? У вас в распоряжении имеется исходный текст, так почему бы просто его не скопировать и не внести необходимые изменения (несмотря на лицензионное соглашение)?</p>
     <p>Если вы чувствуете, что поддаетесь искушению, вспомните банальный афоризм: "Тише едешь – дальше будешь". Экономя несколько секунд в данный момент, вы потенциально теряете целые часы. Подумайте об аспектах, относящихся к "проблеме 2000 года". Многие из них были вызваны ленью разработчиков, которые не сделали параметризацию размера полей даты (или не внедрили централизованные библиотеки служб доступа к дате).</p>
     <p>Нетерпеливое дублирование легко обнаруживается и устраняется, но это требует дисциплины и желания потратить время в настоящий момент, чтобы избежать головной боли впоследствии.</p>
    </section>
    <section>
     <title>
      <p>Коллективное дублирование</p>
     </title>
     <p>Самый трудный в обнаружении и обработке тип дублирования – коллективный – возникает между различными разработчиками проекта. Целые наборы функциональных возможностей могут тиражироваться по неосторожности, и это дублирование может оставаться незамеченным на протяжении многих лет, что приводит к возникновению проблем при сопровождении. Нам известно, как в одном из штатов США компьютерные системы, установленные в правительственных учреждениях, проверялись на наличие "проблемы 2000 года". Аудиторы обнаружили свыше 10000 программ, каждая из которых по-своему осуществляла проверку правильности номера карточки социального страхования.</p>
     <p>На высоком уровне с проблемой можно справиться при наличии ясного проектного решения, сильного технического руководителя проекта (см. 'Команды прагматиков") и разделения обязанностей в пределах проекта. Однако на уровне модуля проблема является более коварной. Обычно необходимые функциональные возможности или данные, не относящиеся к очевидной области ответственности, могут реализовываться много раз.</p>
     <p>Мы полагаем, что лучший способ справиться с этим – поощрять активное и частое взаимодействие между разработчиками. Устраивайте форумы для обсуждения общих проблем. (При работе над предыдущими проектами мы организовывали конференции в сети, чтобы позволить разработчикам обмениваться идеями и задавать вопросы. Этим обеспечивается ненавязчивый способ общения – даже на нескольких сайтах – при сохранении непрерывной хронологии всего высказанного). Назначьте одного из членов команды библиотекарем проекта, чьей обязанностью будет обеспечение обмена знаниями. Организуйте специальное место в каталоге с исходными текстами, в котором будут сохраняться сервисные подпрограммы и скрипты. Обратите особое внимание на чтение исходного текста и документации других членов команды, неформально или при анализе текста программы. При этом вы отнюдь не шпионите за ними – вы учитесь у них. И помните, что доступ к тексту программы осуществляется по взаимной договоренности – вас не должно коробить, если и другие члены команды сосредоточенно изучают (или вынюхивают?) ваш текст программы.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 12: Сделайте так, чтобы программу можно было легко использовать повторно</p>
     </cite>
     <empty-line/>
     <p>Все, что вы пытаетесь делать, способствует развитию среды, где проще находить и многократно использовать существующий материал, чем создавать его самому. Но если это непросто, люди не станут это делать. И если вы будете не в состоянии многократно использовать этот материал, вы рискуете заняться дублированием знания.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Ортогональность</p>
     <p>• Работа с текстом</p>
     <p>• Генераторы исходных текстов</p>
     <p>• Реорганизация</p>
     <p>• Команды прагматиков</p>
     <p>• Вездесущая автоматизация</p>
     <p>• Все эти сочинения</p>
    </section>
   </section>
   <section>
    <title>
     <p>8</p>
     <p>Ортогональность</p>
    </title>
    <section>
     <p>Ортогональность очень важна, если вы хотите создавать системы, которые легко поддаются проектированию, сборке, тестированию и расширению. Однако этому принципу редко обучают непосредственно. Часто он является лишь скрытым достоинством других разнообразных методик, которые вы изучаете. Это неправильно. Как только вы научитесь непосредственно применять принципы ортогональности, вы сразу заметите, как улучшилось качество создаваемых вами систем.</p>
    </section>
    <section>
     <title>
      <p>Что такое ортогональность?</p>
     </title>
     <p>Термин «ортогональность» заимствован из геометрии. Две линии являются ортогональными, если они пересекаются под прямым углом, например, оси координат на графике. В терминах векторной алгебры две такие линии являются независимыми. Если двигаться вдоль одной из линий, то проекция движущейся точки на другую линию не меняется.</p>
     <image l:href="#i_001.jpg"/>
     <p>Этот термин был введен в информатике для обозначения некой разновидности независимости или несвязанности. Два или более объекта ортогональны, если изменения, вносимые в один из них, не влияют на любой другой. В грамотно спроектированной системе программа базы данных будет ортогональной к интерфейсу пользователя: вы можете менять интерфейс пользователя без воздействия на базу данных и менять местами базы данных, не меняя интерфейса.</p>
     <p>Перед тем как рассмотреть преимущества ортогональных систем, познакомимся с неортогональной системой.</p>
     <subtitle>Неортогонольноя система</subtitle>
     <p id="_ednref7">Предположим, вы находитесь в экскурсионном вертолете, совершающем полет над Гранд-Каньоном, когда пилот, который совершил ошибку, наевшись рыбы за обедом, внезапно вскрикивает и теряет сознание. По счастливой случайности это происходит, когда вы парите на высоте 30 метров. Вы догадываетесь, что рычаг управления общим шагом несущего винта <a l:href="#n_7">[7]</a> обеспечивает подъем машины, так что, если его слегка опустить, вертолет начнет плавно снижаться. Однако когда вы пытаетесь сделать это, то осознаете, что жизнь – не такая уж простая штука. Вертолет клюет носом, и вас начинает вращать по спирали влево. Внезапно вы понимаете, что управляете системой, в которой каждое воздействие имеет побочные эффекты. При нажатии на левый рычаг вам придется сделать уравновешивающее движение назад правым рычагом и нажать на правую педаль. Но при этом каждое из этих действий вновь повлияет на все органы управления. Неожиданно вам приходится жонглировать невероятно сложной системой, в которой любое изменение влияет на все остальные управляющие воздействия. Вы испытываете феноменальную нагрузку: ваши руки и ноги находятся в постоянном движении, пытаясь уравновесить все взаимодействующие силы.</p>
     <p>Органы управления вертолетом определенно не являются ортогональными.</p>
    </section>
    <section>
     <title>
      <p>Преимущества ортогональности</p>
     </title>
     <p>Как показывает пример с вертолетом, неортогональные системы сложнее изменять и контролировать. Если составляющие системы отличаются высокой степенью взаимозависимости, то невозможно устранить какую-либо неисправность лишь на локальном уровне.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 13: Исключайте взаимодействие между объектами, не относящимися друг к другу</p>
     </cite>
     <empty-line/>
     <p>Мы хотим спроектировать компоненты, которые являются самодостаточными: независимыми, с единственным, четким назначением; в книге Йордона и Константина [YC86] это явление называется сцеплением (cohesion). Когда компоненты изолированы друг от друга, вы уверены, что можно изменить один из них. не заботясь об остальных. Пока внешние интерфейсы этого компонента остаются неизменными, вы можете быть спокойны, что не создадите проблем, которые распространятся по всей системе.</p>
     <p>С созданием ортогональных систем у вас появятся два больших преимущества: увеличение производительности и снижение риска.</p>
     <subtitle>Увеличение производительности</subtitle>
     <p>• Изменения в системе локализуются, поэтому периоды разработки и тестирования сократятся. Легче написать относительно небольшие, самодостаточные компоненты, чем один большой программный модуль. Простые компоненты могут быть спроектированы, запрограммированы, протестированы и затем забыты – не нужно непрерывно менять существующий текст по мере того, как к нему добавляются новые фрагменты.</p>
     <p>• Ортогональный подход также способствует многократному использованию компонентов. Если компоненты имеют определенную, четкую сферу ответственности, они могут комбинироваться с новыми компонентами способами, которые не предполагались при их первоначальной реализации. Чем меньше связанность в системах, тем легче их перенастроить и провести их обратное проектирование.</p>
     <p>• При комбинировании ортогональных компонентов происходит едва заметное увеличение производительности. Предположим, что один компонент способен осуществлять AJ, а второй – N различных операций. Если эти компоненты ортогональны и комбинируются, то в сумме они способны осуществить М х N различных операций. Но если два компонента не являются ортогональными, то они будут перекрываться и результат их действия будет меньшим по сравнению с ортогональными компонентами. Вы получаете большее количество функциональных возможностей в пересчете на единичное усилие, если комбинируете между собой ортогональные компоненты.</p>
     <subtitle>Снижение риска</subtitle>
     <p>Ортогональный подход приводит к снижению уровня риска, присущего любой разработке.</p>
     <p>• Ошибочные фрагменты текста программы изолируются. Если модуль содержит ошибку, то вероятность ее распространения на всю систему уменьшается. Кроме того, ошибочный фрагмент может быть извлечен и заменен новым (исправленным).</p>
     <p>• Конечный продукт (система) становится менее хрупким. Проблемы, появляющиеся при внесении небольших изменений и устранении недочетов на определенном участке, не проходят дальше этого участка.</p>
     <p>• Ортогональная система способствует повышению качества тестирования, поскольку облегчается проектирование и тестирование отдельных ее компонентов.</p>
     <p>• Вы не будете слишком сильно привязаны к определенному субподрядчику, программному продукту или платформе, поскольку интерфейсы между компонентами, производимыми фирмами-субподрядчиками, не будут играть главенствующей роли в проекте.</p>
     <p>Рассмотрим некоторые из способов, при помощи которых вы сможете внедрить принцип ортогональности в вашу работу.</p>
    </section>
    <section>
     <title>
      <p>Проектные группы</p>
     </title>
     <p>Приходилось ли вам замечать, насколько эффективно работают проектные команды, все члены которых знают, что делать, и полностью отдают себя делу, тогда как в других командах сотрудники постоянно препираются между собой и не собираются ни в чем уступать друг другу?</p>
     <p>Зачастую это не что иное, как проблема ортогональности. Если команды организованы с большим числом перекрытий, то сотрудники путают свои должностные обязанности. Для любого изменения необходимо собирать всю команду, поскольку оно, может быть, затронет каждого.</p>
     <p>Как разбить команду на группы с четкими обязанностями и минимальным перекрытием? На этот вопрос нет простого ответа. В некоторой степени это зависит от проекта и вашего анализа областей, которые в перспективе могут измениться. Это также зависит от людей, находящихся в вашем распоряжении. Мы предпочитаем отделять инфраструктуру от приложения. Каждому из основных инфраструктурных компонентов (база данных, интерфейс связи, промежуточное программное обеспечение и т. д.) приписывается только ему принадлежащая группа. Подобным образом производится и разделение функциональных возможностей приложения. После этого мы изучаем людей, которые имеются в нашем распоряжении на данный момент (или планируем их появление в будущем), и сообразно этому корректируем состав групп.</p>
     <p>Вы можете неформально определить уровень ортогональности структуры проектной команды. Для этого просто посмотрите, скольких людей необходимо привлечь к обсуждению каждого изменения, требуемого со стороны. Чем больше эта цифра, тем ниже уровень ортогональности группы. Отсюда ясно, что ортогональная команда работает более эффективно. (Высказав это, мы тем самым поощряем стремление сотрудников более мелких подразделений постоянно общаться друг с другом.)</p>
    </section>
    <section>
     <title>
      <p>Проектирование</p>
     </title>
     <p>Большинство разработчиков знакомо с потребностью в проектировании ортогональных систем, хотя они наверняка используют термины «модульный», "компонентно-ориентированный" и «многоуровневый» для описания конкретного процесса. Системы должны быть скомпонованы из набора взаимодействующих модулей, каждый из который реализует функциональные возможности независимо от других. Иногда эти компоненты объединены в уровни, каждый из которых обеспечивает некий уровень абстракции. Данный многоуровневый подход является мощным методом проектирования ортогональных систем. Поскольку на каждом уровне используются только абстракции, обеспеченные на низших уровнях, можно легко изменить основные реализации, не затрагивая самой программы. Иерархическое представление также уменьшает риск появления неконтролируемых зависимостей между модулями. Иерархическое представление часто показываются с помощью диаграмм, как на рисунке 2.1.</p>
     <p>Рис. 2.1. Типичная диаграмма иерархической структуры</p>
     <image l:href="#i_002.jpg"/>
     <p>Существует простой тест на ортогональность проектирования. Как только вы составили схему компонентов, спросите себя: "Сколько модулей подвергнутся воздействию, если я резко изменю требования по конкретной функции?" В ортогональной системе ответ должен быть «один» <a l:href="#n_8">[8]</a>. Перемещение кнопки на панели графического интерфейса пользователя не должно требовать внесения изменений в схему базы данных. Добавление контекстно-зависимой справки не должно изменить подсистему выставления счетов.</p>
     <p>Рассмотрим сложную систему контроля и управления отопительной установкой. Первоначально требовалось наличие графического интерфейса, но затем требования были изменены, с тем чтобы добавить систему речевого ответа и управления установкой при помощи телефона с тональным набором. В ортогонально спроектированной системе для этого вам пришлось бы изменить только модули, связанные с интерфейсом пользователя, а основная логика управления предприятием остается неизменной. На самом деле, если вы тщательно структурируете систему, то у вас должна быть возможность поддержки обоих интерфейсов при наличии одной и той же программной базы. В разделе "Всего лишь представление" говорится о написании программ, в которых отсутствует связанность, используя парадигму "модель-представление-контроллер" (Model-View-Controller), подходящую в данной ситуации.</p>
     <p>Стоит спросить себя, как защитить вашу конструкцию от изменений в окружающем мире. Например, вы пользуетесь номером телефона в качестве идентификатора заказчика. Что произойдет, если телефонная станция изменит коды междугородной связи? Не полагайтесь на свойства предметов, которыми не можете управлять.</p>
    </section>
    <section>
     <title>
      <p>Инструментарии и библиотеки</p>
     </title>
     <p>Будьте внимательным, чтобы сохранить ортогональность вашей системы при введении инструментариев и библиотек, произведенных фирмами-субподрядчиками. Проявите мудрость при выборе технологии.</p>
     <p>Однажды авторы работали над проектом, в котором требовалось, чтобы некий фрагмент программы на языке Java выполнялся автономно – на сервере и в удаленном режиме – на клиентской машине. В этом случае возможными вариантами распределения классов были технологии RMI и CORBA. Если удаленный доступ к классу обеспечивался при помощи RMI, то в этом случае каждое обращение к удаленному методу в этом классе могло бы привести к генерации исключения, означающей, что эта наивная реализация потребовала бы от нас обработки этого исключения всякий раз при использовании удаленных классов. В данном случае использование RMI явно не ортогонально: программа, обращающаяся к удаленным классам, не должна зависеть от их физического расположения. Альтернативный способ – технология CORBA – не налагает подобного ограничения: мы можем написать программу, для которой не имеет значения, где физически находятся классы.</p>
     <p>Когда вы используете инструментарий (или даже библиотеку, созданную другими разработчиками), вначале спросите себя, не заставит ли он внести в вашу программу изменения, которых там быть не должно. Если схема долговременного хранения объекта прозрачна, то она ортогональна. Если же при этом требуется создание объектов или обращение к ним каким-либо особым образом, то она неортогональна. Отделение этих подробностей от вашей программы дает дополнительное преимущество, связанное с возможностью смены субподрядчиков в будущем.</p>
     <p>Интересным примером ортогональности является система Enterprise Java Beans (EJB). В большинстве диалоговых систем обработки запросов прикладная программа должна обозначать начало и окончание каждой транзакции. В системе EJB эта информация выражена описательно в виде метаданных вне любых программ. Та же самая прикладная программа может работать в различных транзакционных средах EJB без каких-либо изменений. Вероятно, это станет прообразом многих операционных сред будущего.</p>
     <p>Другой интересной проверкой на ортогональность является технология Aspect-Oriented Programming (АОР) – исследовательский проект фирмы Xerox Pare ([KLM+97] и [URL 49]). Технология АОР позволяет выразить в одном-единственном месте линию поведения, которая в противном случае была бы распределена по всему исходному тексту программы. Например, журнальные сообщения обычно генерируются путем явных обращений к некоторой функции записи в журнал по всему исходному тексту. Используя технологию АОР, вы реализуете процедуру записи в журнал ортогонально к записываемым данным. Используя версию АОР для языка Java можно записать сообщение журнала при входе в любой метод класса Fred, запрограммировав аспект:</p>
     <p>aspect Trace {</p>
     <p> advise * Fred.*(…) {</p>
     <p>   static before {</p>
     <p>      Log.write("-» Entering " + thisJoinPoint.methodName);</p>
     <p>   }</p>
     <p>  }</p>
     <p>}</p>
     <p>При вплетении этого аспекта в текст вашей программы будут генерироваться трассировочные сообщения. Если этого не сделать, не будет и сообщений. В обоих случаях исходный текст остается неизменным.</p>
    </section>
    <section>
     <title>
      <p>Написание текста программы</p>
     </title>
     <p>Всякий раз, когда вы пишете программу, вы подвергаетесь риску снижения уровня ортогональности вашего приложения. Если вы постоянно не отслеживаете не только то, что вы делаете, но и весь контекст приложения, то существует опасность неумышленного дублирования функциональных возможностей в некотором другом модуле или выражения существующих знаний дважды.</p>
     <p>Есть ряд методик, которые можно использовать для поддержки ортогональности:</p>
     <p>• <strong>Сохраните вашу программу «несвязанной».</strong> Напишите «скромную» программу – модули, которые не раскрывают ничего лишнего для других модулей и не полагаются на их внедрение. Попробуйте применить закон Деметера [LH89], который обсуждается в разделе "Несвязанность и закон Деметера". При необходимости изменения состояния объекта это должен делать сам объект. В таком случае программа остается изолированной от реализации другой программы, а вероятность того, что система останется ортогональной, увеличивается.</p>
     <p>• <strong>Избегайте глобальных данных.</strong> Всякий раз, когда ваша программа ссылается на глобальные данные, она привязывается к другим компонентам, использующим эти данные. Даже глобальные переменные, которые вы собираетесь использовать только для чтения, могут вызвать проблемы (например, если вам необходимо срочно изменить программу, сделав ее многопоточной). Вообще программа станет проще в понимании и сопровождении, если вы явно перешлете любой требуемый контекст в ваши модули. В объектно-ориентированных приложениях контекст часто пересылается как параметр к конструкторам объектов. В другой программе вы можете создать конструкции, содержащие контекст, и обходить ссылки на них.</p>
     <p>Шаблон Singleton, упомянутый в книге "Design Patterns" [GHJV95], представляет собой способ подтвердить существование единственного представителя объекта определенного класса. Многие используют эти объекты типа Singleton как своего рода глобальную переменную (особенно при работе с языками типа Java, которые иначе не поддерживают технологию глобальных переменных). Будьте внимательны с шаблонами Singleton – они также могут приводить к ненужному связыванию.</p>
     <p>• <strong>Подобные функции.</strong> Зачастую вы сталкиваетесь с набором функций, похожих друг на друга; возможно, они используют общий фрагмент в начале и конце программы, но в ее середине каждая пользуется своим алгоритмом. Дублированная программа является признаком структурных проблем. Для того чтобы составить программу лучше, следует обратить внимание на шаблон Strategy в книге "Design Patterns".</p>
     <p>Пусть постоянное критическое отношение к вашей программе войдет у вас в привычку. Ищите любые возможности реорганизации для усовершенствования ее конструкции и повышения уровня ортогональности. Этот процесс называется реорганизацией, и он важен настолько, что в книге ему посвящен целый раздел (см. "Реорганизация").</p>
    </section>
    <section>
     <title>
      <p>Тестирование</p>
     </title>
     <p>Систему, спроектированную и реализованную ортогональным образом, намного проще тестировать. Поскольку взаимодействие между компонентами системы формализовано и ограничено, большая часть тестирования может осуществляться на уровне отдельных модулей. Это хорошо, поскольку подобное тестирование значительно легче поддается спецификации и выполнению, чем интеграционное тестирование. Мы предлагаем, чтобы каждый модуль был снабжен своим собственным встроенным тестом и эти тесты выполнялись автоматически как часть обычной процедуры сборки (см. "Программа, которую легко тестировать").</p>
     <p>Процедура сборки модульного теста сама по себе является интересным тестом на ортогональность. Что требуется, чтобы собрать и скомпоновать тест модуля? Должны ли вы задействовать большую часть системы только для того, чтобы скомпилировать или скомпоновать тест? В этом случае модуль очень хорошо связан с оставшейся частью системы.</p>
     <p>Момент устранения ошибки также подходит для оценки ортогональности системы в целом. Когда вы сталкиваетесь с проблемой, оцените, насколько локален процесс ее устранения. Нужно изменить лишь один модуль, или изменения должны происходить по всей системе? Когда вы меняете что-либо, устраняются ли при этом все ошибки или происходит загадочное появление новых? Это удачный момент для внедрения автоматизации. Если вы применяете систему управления исходным текстом (что вы будете делать, прочитав раздел "Средства управления исходным текстом"), комментируйте устранение ошибок, когда вы осуществляете возвращение измененного модуля в библиотеку после тестирования. Затем вы можете генерировать ежемесячные отчеты, где анализируются тенденции в ряде исходных файлов, в которых производилось устранение ошибок.</p>
    </section>
    <section>
     <title>
      <p>Документация</p>
     </title>
     <p>Что удивительно, ортогональность применима и к документации. Координатами являются содержание и представление. Если документация действительно ортогональна, вы можете существенно изменить внешний вид, не изменяя содержания. Современные текстовые процессоры содержат стили и макрокоманды, которые помогают в этом (см. "Все эти сочинения").</p>
    </section>
    <section>
     <title>
      <p>Жизнь в условиях ортогональности</p>
     </title>
     <p>Ортогональность тесно связана с принципом DRY ("Не повторяй самого себя"). Используя этот принцип, можно свести к минимуму дублирование в пределах системы, а при помощи ортогональности уменьшить взаимозависимость между компонентами системы. Звучит неуклюже, но если вы используете принцип ортогональности в тесной связи с принципом DRY, вы обнаружите, что разрабатываемые вами системы становятся более гибкими, более понятными и более простыми в отладке, тестировании и сопровождении.</p>
     <p>Когда вы присоединяетесь к проекту, в котором люди ведут отчаянную борьбу за внесение изменений, а каждое изменение приводит к появлению четырех новых проблем, вспомните кошмар с вертолетом. Вероятно, проект сконструирован и запрограммирован неортогонально. Пришло время реорганизации.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Пороки дублирования</p>
     <p>• Средства управления исходным текстом</p>
     <p>• Проектирование по контракту</p>
     <p>• Несвязанность и закон Деметера</p>
     <p>• Метапрограммирование</p>
     <p>• Всего лишь представление</p>
     <p>• Реорганизация</p>
     <p>• Программа, которую легко тестировать</p>
     <p>• Злые волшебники</p>
     <p>• Команды прагматиков</p>
     <p>• Все эти сочинения</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Рассмотрим различие между большими инструментальными средствами, ориентированными на графический интерфейс, которые обычно присутствуют в системах в среде Windows, и небольшими, но сочетаемыми между собой утилитами, работающими в режиме командной строки и присутствующими в командных оболочках. Какой набор является более ортогональным и почему? Какой из них легче использовать именно для той цели, для которой он предназначен? Какой из них легче скомбинировать с другими инструментальными средствами для решения вновь возникших проблемных вопросов?</p>
     <p>• Язык С++ поддерживает множественное наследование, а язык Java позволяет классу реализовывать множественные интерфейсы. Как влияет на ортогональность использование этих средств? Есть ли различие в воздействии, которое оказывается в ходе использования множественного наследования и множественных интерфейсов? Есть ли разница в применении делегирования и наследования?</p>
     <subtitle>Упражнения</subtitle>
     <p>1. Создается класс Split, который расщепляет вводимые строки на поля. Какая из двух указанных ниже сигнатур класса Java имеет более ортогональную конструкцию? (Ответ см. в Приложении В.)</p>
     <p>class Split 1 {</p>
     <p>public Splitl(InputStreamReader rdr) {…</p>
     <p>public void readNextLine() throws IOException {…</p>
     <p>public int numFields() {…</p>
     <p>public String getField(int fieldNo) {…</p>
     <p>}</p>
     <empty-line/>
     <p>class Split2 {</p>
     <p>public Split2(String line) {…</p>
     <p>public int numFields() {…</p>
     <p>public String getField(int fieldNo) {…</p>
     <p>}</p>
     <p>2. Какая конструкция обладает большей ортогональностью: немодальные или модальные диалоговые окна? (Ответ см. в Приложении В.)</p>
     <p>3. Сравним процедурные языки и объектно-ориентированные технологии. Что дает более ортогональную систему? (Ответ см. в Приложении В.)</p>
    </section>
   </section>
   <section>
    <title>
     <p>9</p>
     <p>Обратимость</p>
    </title>
    <epigraph>
     <p>Нет ничего опаснее идеи, если это единственное, что у вас есть.</p>
     <text-author>Эмиль-Огюст Шартье, Разговор о религии, 1938</text-author>
    </epigraph>
    <section>
     <p>Технические специалисты предпочитают простые и однозначные решения задач. Математические тесты, позволяющие с большой уверенностью сказать, что х = 2, намного лучше, чем нечеткие, но страстные очерки о миллионах причин Французской революции. К техническим специалистам присоединяются и менеджеры: однозначные и несложные ответы хорошо вписываются в электронные таблицы и проектные планы.</p>
     <p>Если бы это находило отклик в реальном мире! К сожалению, сегодня икс может быть равен двум, а завтра он должен быть равен пяти, а на следующей неделе – трем. Ничто не вечно, и если вы всерьез полагаетесь на некоторое явление, то этим вы практически гарантируете, что оно непременно изменится.</p>
     <p>Для реализации чего-либо всегда существуют не один-единственный способ и не одна фирма-субподрядчик. Если вы начинаете работать над проектом, недальновидно полагая, что для его осуществления имеется один-единственный способ, то вы можете быть неприятно удивлены. Многим проектным командам открывают глаза принудительно, по мере развития событий:</p>
     <cite>
      <p>"Но вы же сказали, чтобы мы использовали базу данных XYZI. Мы написали 85 % текста проекта – мы не можем изменить его в данный момент", – протестует программист. "Очень жаль, но наша фирма решила вместо нее взять за основу базу PDQ – для всех проектов. Это немое решение. Мы все должны переписывать тексты программ… Всем вам придется работать и по выходным – до особого распоряжения".</p>
     </cite>
     <p>Конечно, принимаемые меры не должны быть столь драконовскими, сколь и неотложными. Но поскольку время идет, а ваш проект продвигается, вы можете оказаться в шатком положении. С принятием каждого важного решения проектная команда ставит перед собой все более узкую цель – ограниченную версию действительности, в которой имеется меньшее число вариантов.</p>
     <p id="_ednref9">К тому времени, когда многие важные решения уже приняты, цель уменьшится настолько, что, если она двинется с места или ветер изменит направление, или же бабочка в Токио взмахнет своими крылышками, вы промахнетесь <a l:href="#n_9">[9]</a>. И здорово промахнетесь.</p>
     <p>Проблема состоит в том, что непросто дать задний ход важным решениям.</p>
     <p>Как только вы решите использовать базу данных этой фирмы или архитектурный шаблон, или определенную модель развертывания (например, «клиент-сервер» вместо автономной модели), то вы становитесь на путь, с которого невозможно свернуть – лишь ценой огромных затрат.</p>
     <subtitle>Обратимость</subtitle>
     <p>Многие из тем, затронутых в данной книге, нацелены на создание гибкого, легко адаптируемого программного обеспечения. Следуя их рекомендациям – в особенности принципу DRY, принципу несвязанности и использованию метаданных (см. ниже), нет нужды в принятии многих важных необратимых решений. Это и хорошо, поскольку вначале мы не всегда принимаем наилучшие решения. Мы придерживаемся некоторой технологии лишь для того, чтобы в один прекрасный день обнаружить, что не в состоянии нанять достаточное количество людей, обладающих необходимыми навыками. Стоит нам остановить свой выбор на некоторой фирме-субподрядчике, как ее сразу перекупают конкуренты. Требования, пользователи и аппаратные средства изменяются быстрее, чем мы разрабатываем программное обеспечение.</p>
     <p>Предположим, что в начале проекта вы решили использовать реляционную базу данных, производимую фирмой А. Позже, во время нагрузочного тестирования, вы обнаруживаете, что база данных слишком медленная, а объектная база данных фирмы В работает быстрее. В большинстве случаев, вам не везет. Большую часть времени обращения к программам фирм-субподрядчиков запутываются в тексте программ. Но если вы действительно вычленили идею базы, поместив ее снаружи – в точку, где она просто обеспечивает сохранение состояния объектов (как служба), тогда вы обладаете достаточной гибкостью, чтобы менять коней на переправе.</p>
     <p>Предположим, что проект начинается по модели «клиент-сервер», но затем, когда карты уже сданы, отдел маркетинга решает, что для некоторых заказчиков серверы слишком дороги и они хотят сделать автономную версию. Насколько сложным будет для вас этот переход? Поскольку речь идет о развертывании, для этого потребуется минимум несколько дней. Если бы времени требовалось больше, вы бы и не думали об обратимости. Обратная задача еще интереснее. Что будет, если возникнет необходимость в развертывании автономной версии разрабатываемого вами проекта по схеме «клиент-сервер» или по n-звенной модели? Это также не должно представлять затруднений.</p>
     <p>Ошибка состоит в предположении, что любое решение высечено на камне, и в неготовности к случайностям, которые могут возникнуть. Вместо того, чтобы высекать решения на камне, рассматривайте их так, как будто они начерчены на морском песке. В любой момент может накатиться большая волна и смыть их.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 14: Не существует окончательных решений</p>
     </cite>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>Гибкая архитектура</p>
     </title>
     <p>В то время как многие люди пытаются сохранить свои программы гибкими, вам также стоит подумать о том, чтобы обеспечить гибкость архитектуры, развертывания и интеграции продуктов фирм-субподрядчиков.</p>
     <p>Технологии, подобные CORBA, могут помочь в защите компонентов проекта от изменений, происходящих в языке, на котором ведется разработка, или в платформе. Вдруг производительность Java на этой платформе не соответствует ожиданиям? Еще раз напишите программу клиента на языке С++, и больше ничего менять не нужно. Подсистема правил в С++ не отличается достаточной гибкостью? Перейдите к версии на языке Smalltalk. При работе с архитектурой CORBA вы должны обращать внимание только на заменяемый компонент, другие компоненты трогать не нужно.</p>
     <p>Вы разрабатываете программы для Unix? Какой версии? Вы рассмотрели все из аспектов переносимости? Вы пишете для конкретной версии Windows? Какой – 3.1, 95, 98, NT, СЕ или же 2000? Насколько сложно будет обеспечить поддержку других версий? Если ваши решения характеризуются мягкостью и пластичностью, то это будет совсем несложно. Но это будет невозможно, если пакет неудачно сформирован, есть высокий уровень связанности, а в тексты программ встроена логика или параметры.</p>
     <p>Вы не знаете точно, как отдел маркетинга собирается развертывать систему? Подумайте об этом заранее, и вы сможете обеспечить поддержку автономной модели, модели "клиент – сервер" или n-звенной модели только за счет изменений в файле конфигурации. Мы создавали программы, которые действуют подобным образом.</p>
     <p>Обычно вы можете просто скрыть продукт фирмы-субподрядчика за четким, абстрактным интерфейсом. На самом деле мы могли это сделать с любым проектом, над которым мы работали. Но предположим, что вы не смогли изолировать его достаточно четко. Вам пришлось раскидать некоторые инструкции по всей программе? Поместите это требование в метаданные и воспользуйтесь автоматическим механизмом, наподобие Aspect (см. "Инструментарии и библиотеки") или Perl для вставки необходимых инструкций в саму программу. Какой бы механизм вы ни использовали, сделайте его обратимым. Если что-то добавляется автоматически, то оно может и удаляться автоматически.</p>
     <p>Никто не знает, что может произойти в будущем, в особенности мы! Дайте вашей программе работать в ритме рок-н-ролла: когда можно – качаться, а когда нужно – энергично крутиться.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Несвязанность и закон Деметера</p>
     <p>• Метапрограммирование</p>
     <p>• Всего лишь представление</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Немного квантовой механики – пример с кошкой Шрёдингера. Предположим, что в закрытом ящике сидит кошка, и в нем же находится радиоактивная частица. Вероятность распада частицы на две равна 50 %. Если распад произойдет, кошка умрет. Если не произойдет, кошка останется жива. Итак, умирает кошка или остается жива? Согласно Шрёдингеру, верно и то, и другое. Всякий раз, когда происходит ядерная реакция, у которой имеются два возможных результата, происходит клонирование мира. В одном из двух миров данное событие произошло, а в другом – нет. Кошка жива в одном из миров и мертва в другом. Лишь открыв ящик, вы осознаете, в каком из миров находитесь вы.</p>
     <p>Не удивительно, что программировать на перспективу так трудно.</p>
     <p>Но подумайте об эволюции программы по аналогии с ящиком, в котором находится множество кошек Шрёдингера: каждое решение приводит к появлению иной версии будущего. Сколько сценариев будущего поддерживает ваша программа? Какие из них наиболее вероятны? Насколько сложно будет поддерживать их в определенный момент в будущем?</p>
     <p>Хватит ли у вас смелости открыть ящик?</p>
    </section>
   </section>
   <section>
    <title>
     <p>10</p>
     <p>Стрельба трассирующими</p>
    </title>
    <epigraph>
     <p>На изготовку, по цели – пли!</p>
    </epigraph>
    <section>
     <p id="_ednref10">Существует два способа стрельбы из пулемета в темное время суток <a l:href="#n_10">[10]</a>. Вы можете выяснить точно, где находится ваша цель (расстояние, высота и азимут). Вы можете определить погодные условия (температура, влажность, давление, направление ветра и так далее). Вы можете точно определить характеристики используемых вами патронов и пуль и их взаимодействие с реальным пулеметом, из которого вы стреляете. Затем вы можете воспользоваться таблицами или компьютером для вычисления точного азимута и угла возвышения ствола пулемета. Если все работает в точном соответствии с характеристиками, таблицы корректны, а погодные условия не меняются, то пули должны лечь близко к цели. Можно также использовать трассирующие пули.</p>
     <p>Трассирующие пули помещаются на пулеметную ленту через равные промежутки наряду с обычными боеприпасами. При стрельбе фосфор, содержащийся в них, загорается и оставляет пиротехнический след, идущий от пулемета до любого места, в которое эти пули попадают. Если в цель попадают трассирующие пули, то, значит, в нее попадут и обычные.</p>
     <p>Не удивительно, что стрельбу трассирующими предпочитают математическим расчетам. Обратная связь возникает немедленно, и поскольку трассирующие пули работают в той же среде, что и обычные боеприпасы, то внешние воздействия сведены к минимуму.</p>
     <p>Возможно это слишком сильная аналогия, но она применима к новым проектам, особенно когда вы создаете то, чего раньше не было. Подобно стрелкам, вы пытаетесь поразить цель в темноте. Ваши пользователи никогда ранее не видели ничего подобного, поэтому их требования могут быть расплывчатыми. Вы же, в свою очередь, наверняка применяете алгоритмы, методики, языки или библиотеки, с которыми не знакомы, то есть сталкиваетесь с большим количеством неизвестных. И поскольку для выполнения проекта требуется время, вы можете с уверенностью гарантировать, что к моменту окончания работы среда, в которой вы работаете, изменится.</p>
     <p>Классический способ решения проблемы – предельно специфицировать систему. Написать горы бумажной документации, регламентирующих каждое требование, связывая каждое неизвестное и ограничивая рабочую среду. Стрелять при помощи жесткого расчета. Один большой предварительный расчет, затем стрельнуть и надеяться.</p>
     <p>Однако программисты-прагматики предпочитают стрелять трассирующими.</p>
    </section>
    <section>
     <title>
      <p>Программа, которую видно в темноте</p>
     </title>
     <p>Стрельба трассирующими пулями эффективна, поскольку эти пули работают в той же самой среде и подвержены тем же ограничениям, что и реальные пули. Они быстро оказываются у цели, так что стрелок получает немедленную обратную связь. И с практической точки зрения они представляют собой относительно экономичное решение.</p>
     <p>Чтобы добиться того же эффекта в программах, мы ищем нечто такое, что позволяет нам быстро, наглядно и многократно проходить путь от требования до некоторой характеристики окончательной версии системы.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 15: Пользуйтесь трассирующими пулями, для того чтобы найти цель</p>
     </cite>
     <empty-line/>
     <p>Однажды мы работали над сложным маркетинговым проектом с базой данных «клиент-сервер». Частью требований была способность определять и выполнять промежуточные запросы. Серверами являлся ряд реляционных и специализированных баз данных. Клиентский графический интерфейс пользователя, написанный на языке Object Pascal, использовал набор библиотек С для обеспечения интерфейса с серверами. Запрос пользователя хранился на сервере с использованием системы обозначений, подобной Lisp, до момента преобразования в оптимизированный SQL-запрос, предшествующего его выполнению. При этом возникло много неизвестных и много различных сред, и никто не знал наверняка, как же поведет себя графический интерфейс пользователя.</p>
     <p>Это был отличный повод для применения программы трассировки. Мы разработали «скелет» внешнего интерфейса, библиотеки для представления запросов и конструкцию для преобразования сохраненного запроса в запрос, определенный базой данных. Затем мы свели все воедино и проверили, работает ли это. Все, что мы могли сделать в первоначальном варианте, был запрос, который выдавал перечень всех строк в таблице, но он доказал, что интерфейс пользователя мог взаимодействовать с библиотеками, библиотеки могли преобразовать запрос в последовательную и параллельную форму, а из результата сервер мог сгенерировать SQL-запрос. На протяжении следующих месяцев мы постепенно разрабатывали основную конструкцию, добавляя новую функциональную возможность путем параллельного наращивания каждого компонента программы трассировки. Когда интерфейс пользователя добавлял новый тип запроса, библиотека увеличивалась, и генерация SQL-запроса становилась более утонченной.</p>
     <p>Программа трассировки не является одноразовой: вы пишете ее, чтобы сохранить. Она содержит всю проверку ошибок, структурирование, документацию и самоконтроль, которые имеются в любом фрагменте рабочей программы. Она просто не обладает всеми функциональными возможностями. Однако, как только вы добились сквозного соединения между компонентами вашей системы, вы можете проверить, насколько близко вы находитесь к цели, и в случае необходимости сделать поправку. Как только вы попали в цель, добавление функциональных возможностей облегчается.</p>
     <p>Разработка программ трассировки находится в согласии с той идеей, что проект никогда не кончается: всегда будет потребность в изменениях и добавлении функций. Это – инкрементальный подход.</p>
     <p>Обычная альтернатива является своего рода тяжеловесным техническим подходом: программа разделяется на модули, которые программируются в вакууме. Модули объединены в подсистемы, которые затем подлежат дальнейшему объединению, пока в один прекрасный день вы не получаете завершенное приложение. И только тогда приложение в целом может быть представлено пользователю и протестировано. Технология программы трассировки имеет много преимуществ:</p>
     <p>• <strong>Пользователи могут увидеть нечто, работающее еще до выпуска окончательной версии.</strong> Если вам удалось передать суть делаемого вами (см. "Большие надежды"), то ваши пользователи будут осознавать, что видят перед собой еще нечто незрелое. Они не будут разочарованы отсутствием функциональных возможностей; будут гореть желанием увидеть некий видимый прогрессе создании их системы. По мере того как проект будет продвигаться, они начнут делать вложения. Эти пользователи и станут теми людьми, которые скажут вам о том, насколько близко к цели находится та или иная итерация.</p>
     <p>• <strong>Разработчики выстраивают некую структуру, в которой они работают.</strong> Наибольший страх вызывает лист бумаги, на котором ничего не написано. Если вы разработали все механизмы взаимодействия между модулями вашего приложения и воплотили их в тексте программы, то вашей команде не придется многое высасывать из пальца. Это делает труд каждого члена команды более производительным и способствует последовательности в их работе.</p>
     <p>• <strong>У вас есть платформа для интеграции.</strong> Как только все компоненты системы связаны друг с другом, появляется некая среда, в которую можно добавлять новые фрагменты программ, прошедшие модульное тестирование. Вы будете заниматься интеграцией каждый день (иногда несколько раз вдень), не пытаясь интегрировать все сразу по методу "большого скачка". Воздействие каждого вновь вносимого изменения становится более очевидным, взаимодействия более ограниченными, поэтому отладка и тестирование будут более быстрыми и точными.</p>
     <p>• <strong>У вас есть что продемонстрировать.</strong> Спонсоры проекта и руководство стремятся увидеть демонстрационные версии в самое неподходящее время. При наличии программы трассировки у вас всегда будет то, что можно им продемонстрировать.</p>
     <p>• <strong>Вы лучше ощущаете прогресс.</strong> При разработке программы трассировки программисты работают над сценариями использования системы по очереди. Они заканчивают один сценарий и переходят к следующему. При этом гораздо проще определить производительность и продемонстрировать пользователю продвижение проекта. Поскольку каждая индивидуальная разработка меньше по объему, вы избежите создания монолитных программных блоков, о которых каждую неделю сообщается, что они готовы на 95 %.</p>
    </section>
    <section>
     <title>
      <p>При стрельбе трассирующими вы не всегда попадаете в цель</p>
     </title>
     <p>Трассирующие пули показывают, что вы куда-то попали. Это не обязательно должна быть ваша цель. Затем вы корректируете прицел, пока пули не попадают в цель. В этом-то все и дело.</p>
     <p>То же самое относится и к программе трассировки. Вы используете методику в ситуациях, когда не уверены на 100 %, куда же вам двигаться. Не стоит удивляться, если две первых попытки сорвались: пользователь говорит: "Это совсем не то, что я имел в виду", нужные данные становятся недоступными в самый неподходящий мо-мент, и явно возникают проблемы с производительностью. Выработайте подход для изменения того, что мешает приблизиться к цели, и будьте благодарны судьбе, что вы используете скудную методологию разработки. Небольшой фрагмент программы отличается малой инерцией – его легко и быстро изменить. Вы сможете собрать отклики на ваше приложение и сгенерировать новую, более точную версию быстрее и дешевле. И поскольку каждый основной компонент приложения представлен в программе трассировки, ваши пользователи могут быть уверены – то, что они видят, основано на реальности, а не на бумажных спецификациях.</p>
    </section>
    <section>
     <title>
      <p>Программа трассировки и создание прототипов</p>
     </title>
     <p>Вы могли бы подумать, что принцип программы трассировки – это то же самое, что и чем создание прототипов, только с более агрессивным названием. Отличие есть. Цель работы с прототипом – исследование определенных характеристик (аспектов) конечной версии системы. Создавая истинный прототип, вы отбросите все то, что критиковали при опробовании принципа, и перепишете его надлежащим образом, используя полученные уроки.</p>
     <p>Например, вы создаете приложение, которое помогает транспортным компаниям определять, как упаковывать ящики нестандартного размера в контейнеры. Помимо всего прочего, интерфейс пользователя должен быть интуитивно понятным, а алгоритмы, используемые для определения оптимальной упаковки, очень сложны.</p>
     <p>Вы могли бы создать интерфейс для конечных пользователей при помощи соответствующих инструментальных средств. Вашей программы достаточно для того, чтобы сделать интерфейс восприимчивым к действиям пользователя. Как только пользователи согласятся с компоновкой интерфейса, вы можете отбросить его и переписать на этот раз на основе бизнес-логики, используя целевой язык. Аналогично, вы можете захотеть создать прототип ряда алгоритмов, которые осуществляют реальную упаковку. Вы можете запрограммировать функциональные тесты на высокоуровневом, «всепрощающем» языке типа Perl и затем запрограммировать низкоуровневые тесты производительности на языке, который более близок к машинному. В любом случае, как только вы приняли решение, необходимо начать сначала и запрограммировать алгоритмы в окончательной версии среды, которая взаимодействует с внешним миром. Это и есть создание прототипов, и это очень полезно.</p>
     <p>Подход типа "стрельба трассирующими" обращается к иной проблеме. Вам необходимо знать, как работает приложение в целом. Вы хотите показать вашим пользователям, как на практике осуществляется взаимодействие, и дать им «скелет» архитектуры, на который наращивается тело программы. В этом случае вы можете сконструировать программу трассировки, состоящую из тривиальной реализации алгоритма упаковки контейнера (возможно, нечто вроде FIFO), и простой, но работающий интерфейс пользователя. Как только вы соедините все компоненты приложения, у вас уже есть каркас, который можно представить вашим пользователям и разработчикам. Спустя некоторое время вы добавляете к этому каркасу новую функциональную возможность, заменяя заглушки программами. Но сам остов остается нетронутым, и вы знаете, что система будет вести себя так же, как и в тот момент, когда завершалась первая программа трассировки.</p>
     <p>Различие достаточно важно, чтобы гарантировать повторяемость. Прототипы генерируют одноразовую программу. Программа трассировки является скудной, но завершенной; она образует часть «скелета» конечной версии системы. Рассматривайте создание прототипов как рекогносцировку и сбор данных разведки до начала стрельбы трассирующими.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Приемлемые программы</p>
     <p>• Прототипы и памятные записки</p>
     <p>• Западня спецификации</p>
     <p>• Большие надежды</p>
    </section>
   </section>
   <section>
    <title>
     <p>11</p>
     <p>Прототипы и памятные записки</p>
    </title>
    <section>
     <p>Для опробования определенных идей во многих отраслях промышленности используются прототипы; это дешевле, чем организовывать полномасштабное производство. Например, в автомобильной промышленности для новой модели автомобиля может быть построено несколько различных прототипов. Каждый из них конструируется для проверки определенных свойств автомобиля – аэродинамики, дизайна, свойств конструкции и т. д. Для испытания в аэродинамической трубе изготовляется модель из глины, для отдела дизайна создается модель из бальзовой древесины и клейкой ленты и т. д. Некоторые автомобильные фирмы идут дальше и осуществляют значительную часть работы по моделированию при помощи компьютеров, что приводит к еще большему сокращению расходов. В этом случае нет необходимости в реальном изготовлении рискованных элементов конструкции для их опробования.</p>
     <p>Мы создаем прототипы программ тем же образом и по тем же причинам – для анализа и выявления риска, предлагая возможности для коррекции при существенно меньших затратах. Подобно тому, как это делается в автомобильной промышленности, мы можем использовать прототип для опробования одного или нескольких характеристик проекта.</p>
     <p>Мы склонны полагать, что основой прототипов являются программы, но не это не всегда так. Подобно тому, как это делается в автомобильной промышленности, мы можем строить прототипы из различных материалов. Памятные записки великолепно подходят для создания прототипов таких динамических объектов, как логика документооборота и прикладная логика. Прототип интерфейса может моделироваться на лекционной доске, как модель без функциональных возможностей, изображенная с помощью графической программы или программы-построителя интерфейса.</p>
     <p>Прототипы разрабатываются для того, чтобы ответить лишь на несколько вопросов, поэтому их разработка намного дешевле и быстрее, чем приложения, которые идут в производство. Программа может игнорировать незначительные подробности – незначительные в данный момент, но позже могущие оказаться для пользователя очень важными. Если, к примеру, вы создаете прототип графического интерфейса пользователя, то можете смириться с неправильными результатами или данными. С другой стороны, если вы просто исследуете характеристики вычислений или производительности, можете обойтись скудным графическим интерфейсом пользователя или вообще без него.</p>
     <p>Но если вы работаете в среде, где нельзя отказаться от подробностей, тогда необходимо спросить себя, а нужно ли вообще создавать прототип. Возможно, в этом случае лучше всего подходит стиль разработки типа "стрельба трассирующими" (см. "Стрельба трассирующими").</p>
    </section>
    <section>
     <title>
      <p>Для чего создаются прототипы</p>
     </title>
     <p>Какие объекты можно изучать при помощи прототипов? Все, что характеризуются наличием риска. Все, что не подвергались тестированию ранее или являются абсолютно критичными для конечного варианта системы. Вес, что является недоказанным, экспериментальным или сомнительным. Вес то, с чем вы еще не освоились. Вы можете создавать прототипы:</p>
     <p>• Архитектуры</p>
     <p>• Новой функциональной возможности уже существующей системы</p>
     <p>• Структуры или содержания внешних данных</p>
     <p>• Инструментальных средств или компонентов, выпущенных фирмами-субподрядчиками</p>
     <p>• Рабочих характеристик</p>
     <p>• Дизайна интерфейса пользователя</p>
     <p>Создание прототипов способствует приобретению опыта. Значение этого опыта заключается не в созданной программе, а в полученных уроках. В этом и состоит смысл создания прототипов.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 16: Создавайте прототипы, чтобы учиться на них</p>
     </cite>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>Как использовать прототипы</p>
     </title>
     <p>Какими деталями можно пренебречь при построении прототипа?</p>
     <p>• <strong>Корректность.</strong> Там, где это приемлемо, вы сможете использовать фиктивные данные.</p>
     <p>• <strong>Завершенность.</strong> Прототип может функционировать лишь в ограниченном смысле, возможно, лишь с одним наперед заданным фрагментом входных данных и одним пунктом меню.</p>
     <p>• <strong>Надежность.</strong> Процедура проверки ошибок, вероятно, будет неполной или будет отсутствовать полностью. Если вы отклоняетесь от определенного пути, то прототип может выйти из строя и сгореть, как ракета. Это нормально.</p>
     <p>• <strong>Стиль.</strong> Неприятно признавать это, но прототип программы не имеет большого значения для комментариев или документации. При работе с прототипом можно написать горы документации, но сравнительно малая ее часть будет посвящена собственно прототипу системы.</p>
     <p id="_ednref11">Поскольку в прототипе детали отодвигаются на второй план, а в центре рассмотрения оказываются определенные аспекты системы, вам может показаться реальным создание прототипов с использованием языка очень высокого уровня – выше уровня языка остальной части проекта (язык типа Perl, Python или Tel). Язык сценариев высокого уровня позволяет опускать многие детали (включая указание типов данных) и при этом создавать функциональный (хотя и неполный и медленный) фрагмент программы <a l:href="#n_11">[11]</a>. Если вам необходимо создать прототип интерфейсов пользователей, изучите инструментальные средства типа Tcl/Tk, Visual Basic, Powerbuilder или Delphi.</p>
     <p>Языки сценариев хороши для использования в качестве «клея» при соединении низкоуровневых фрагментов в новые сочетания. При работе в системе Windows язык Visual Basic может «скреплять» средства управления СОМ. В более общем смысле вы можете использовать языки типа Perl и Python для связывания воедино низкоуровневых библиотек языка С – вручную или автоматически при помощи инструментов наподобие бесплатного SWIG [URL 28]. Используя этот подход, вы можете быстро собрать существующие компоненты в новые конфигурации, чтобы посмотреть, как они работают.</p>
    </section>
    <section>
     <title>
      <p>Создание прототипов архитектуры</p>
     </title>
     <p>Многие прототипы создаются, чтобы смоделировать рассматриваемую систему в целом. В отличие от подхода типа "стрельба трассирующими", ни один из отдельных модулей в прототипе системы не должен быть особенно функциональным. На самом деле вам даже не нужно писать программу для создания прототипов – вы можете создать прототип на лекционной доске, при помощи памятных записок или каталожных карточек. Вы пытаетесь понять то, как система выглядит в собранном виде, опуская детали. Вот некоторые из конкретных областей, которые вы можете обнаружить в архитектурном прототипе:</p>
     <p>• Четко ли определены обязанности основных компонентов, и являются ли они приемлемыми?</p>
     <p>• Четко ли определена совместная работа основных компонентов?</p>
     <p>• Сведено ли к минимуму связывание?</p>
     <p>• Можно ли идентифицировать потенциальные источники дублирования?</p>
     <p>• Можно ли применить определения интерфейсов и ограничения?</p>
     <p>• Обладает ли каждый из модулей путем доступа к данным, требуемым ему в ходе выполнения? Может ли он получить такой доступ в случае необходимости?</p>
     <p>Последний пункт приносит большинство сюрпризов и наиболее ценных результатов, основанных на опыте создания прототипов.</p>
    </section>
    <section>
     <title>
      <p>Как не надо использовать прототипы</p>
     </title>
     <p>Перед тем как вы займетесь созданием любого прототипа, основанного на программе, убедитесь, что все понимают – вы пишете одноразовую программу. Прототипы могут быть обманчиво привлекательными для людей, которые не знают, что это всего лишь прототипы. Вы должны очень четко уяснить – эта программа одноразовая, незавершенная и не может быть завершена.</p>
     <p>Легко впасть в заблуждение из-за очевидной завершенности демонстрационного прототипа, и спонсоры проекта или менеджмент могут настаивать на развертывании прототипа (или его потомства), если вы заранее не определите, что можно ожидать от прототипа. Напомните им, что вы, конечно, можете создать великолепный прототип новой модели автомобиля из бальзовой древесины и клейкой ленты, но вы же не поедете на нем в час пик!</p>
     <p>Если вы полагаете, что в вашей среде или культуре существует большая вероятность того, что назначение прототипа программы может быть истолковано неправильно, вам лучше воспользоваться подходом "стрельба трассирующими". Вы получите некий жесткий каркас, на котором можно основывать будущие разработки.</p>
     <p>При надлежащем использовании прототип может сэкономить вам огромное количество времени, денег, головной боли и мучений за счет идентификации и исправления потенциальных проблем в самом начале цикла разработки – затраты на устранение ошибок будут недорогими и не вызовут затруднений.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Мой исходный текст съел кот Мурзик</p>
     <p>• Общайтесь!</p>
     <p>• Стрельба трассирующими</p>
     <p>• Большие надежды</p>
     <subtitle>Упражнения</subtitle>
     <p>4. Специалисты по маркетингу хотели бы сесть и вместе с вами провести мозговой штурм по дизайну нескольких интернет-страниц. Они думают об активных картах ссылок – для перехода к другим страницам. Но они не могут определиться с моделью ссылки: это могут быть изображения автомобиля, телефона или дома. У вас имеется перечень целевых страниц и содержания; они хотели бы увидеть несколько прототипов. Да, кстати, в вашем распоряжении 15 мин. Какими инструментами вы могли бы воспользоваться? (Ответ см. в Приложении В.)</p>
    </section>
   </section>
   <section>
    <title>
     <p>12</p>
     <p>Языки, отражающие специфику предметной области</p>
    </title>
    <epigraph>
     <p>Границы моего языка есть границы моего мира.</p>
     <text-author>Людвиг фон Витгенштейн</text-author>
    </epigraph>
    <p>Языки программирования влияют на то, как вы думаете о проблеме, и на то, как вы думаете об общении. В каждом языке имеются свои особенности – ученые словечки типа "статический и динамический контроль типов", "раннее и позднее связывание", "модели наследования" (простое, множественное или отсутствие) – все они могут предложить определенные решения или затруднить их. Решение, создаваемое в стиле Lisp, отличается от решения, основанного на мышлении приверженца языка С, и наоборот. Верно и обратное (и по нашему мнению, более важное) – язык, отражающий специфику данной области, может, со своей стороны, предложить решение в области программирования.</p>
    <p>Мы всегда пытаемся написать программу, используя словарь, характерный для прикладной области (см. "Ловушка требований", где предлагается использовать проектный глоссарий). В ряде случаев можно перейти на следующий уровень и действительно программировать, пользуясь словарем, синтаксисом и семантикой предметной области.</p>
    <p>Пользователи предложенной системы должны быть в состоянии точно изложить, как она должна работать:</p>
    <cite>
     <p>Ожидать прихода сообщений, определенных нормативом 12.3 фирмы ABC, по каналам связи Х.25, преобразовать их в формат 43В фирмы XYZ, ретранслировать на спутниковый канал связи и сохранить для анализа в будущем.</p>
    </cite>
    <p>Если ваши пользователи располагают набором подобных четких инструкций, то вы можете изобрести мини-язык, скорректированный в соответствии с прикладной областью и выражающий именно то, что им нужно:</p>
    <p>From X25LINE1 (Format=ABC123) {</p>
    <p>  Put TELSTAR1 (Format=XYZ43B);</p>
    <p>  Store DB;</p>
    <p>}</p>
    <p>Этот язык не должен быть исполняемым. В своем исходном виде он мог бы просто фиксировать требования пользователя – спецификации. Однако вы наверняка посчитали возможным пойти дальше и фактически реализовать язык. Ваша спецификация превратилась в исполняемую программу.</p>
    <p>После того как вы написали приложение, пользователи предъявляют вам новое требование: сообщения с отрицательным балансом не должны сохраняться и должны отсылаться обратно по каналам связи Х.25 в первоначальном формате:</p>
    <p>From X25LINE1 (Format=ABC123) {</p>
    <p>  if (ABC123.balance «0) {</p>
    <p>    Put X25L1NE1 (Format=ABC123);</p>
    <p>  }</p>
    <p>  else {</p>
    <p>    Put TELSTAR1 (format=XYZ43B);</p>
    <p>    Store DB;</p>
    <p>  }</p>
    <p> }</p>
    <p>Несложно? При наличии надлежащей поддержки вы можете программировать значительно ближе к прикладной области. Мы не предлагаем, чтобы ваши конечные пользователи программировали на этих языках. Вместо этого вы даете самому себе инструмент, который позволяет вам работать ближе к их области.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 17: Программируйте ближе к предметной области вашей задачи</p>
    </cite>
    <empty-line/>
    <p>Мы полагаем, что вам следует рассмотреть способы перемещения вашего объекта ближе к предметной области проблемы – будь то простейший язык для конфигурирования и управления прикладной программой или же более сложный язык для обозначения правил или процедур. При составлении программы на более высоком уровне абстракции вам легко сосредоточиться на решении проблем предметной области и вы можете проигнорировать мелкие детали, связанные с реализацией.</p>
    <p>Помните, что с приложением работают многие пользователи. Существует конечный пользователь, который понимает правила предметной области и то, что должно быть на выходе программы. Есть также вторичные пользователи: обслуживающий персонал, менеджеры, занимающиеся конфигурированием и тестированием, программисты служб поддержки и сопровождения и будущие поколения разработчиков. У каждого из этих пользователей есть собственная предметная область, и для всех них вы можете генерировать мини-среды и языки.</p>
    <subtitle>Ошибки, отражающие специфику предметной области</subtitle>
    <p>Если вы работаете в определенной предметной области, то можете осуществить и проверку правильности данных, характерных для нее, сообщая о проблемах языком, понятным вашим пользователям. Рассмотрим программу коммутации каналов, приведенную выше. Предположим, что пользователь неправильно обозначил наименование формата:</p>
    <p>From X25LINE1 (Format=AB123)</p>
    <p>Если подобное происходит в универсальном языке программирования, то выдается стандартное сообщение об ошибке:</p>
    <p>Syntax error: undeclared identifier</p>
    <p>Используя мини-язык, вместо этого можно создать сообщение об ошибке, используя словарь предметной области:</p>
    <p>"АВ123" is not a format. Known formats are ABC123, XYZ43B, PDQB, and 42.</p>
    <subtitle>Реализация мини-языка</subtitle>
    <p>В самом простейшем варианте мини-язык может реализовываться в строчно-ориентированном, легко анализируемом формате. Практически мы используем эту форму больше, чем любую другую. Ее просто проанализировать при помощи инструкций switch или используя регулярные выражения в языках сценариев типа Perl. Ответ к упражнению 5 (Приложение В) показывает простую реализацию мини-языка на языке С.</p>
    <p id="_ednref12">Вы можете реализовать и более сложный язык с более формальным синтаксисом. Хитрость состоит в том, чтобы вначале определить синтаксис, используя систему обозначений, подобную нормальной форме Бэкуса-Наура <a l:href="#n_12">[12]</a>. Как только вы определили грамматику, ее обычно легко преобразовать во входной синтаксис для генератора. Программисты, работающие с языками С и С++, давно используют уасс (или его бесплатную версию bison [URL 27]). Подробное описание этих программ приводится в книге "Lex and Yacc" [LMB92]. Программисты, работающие с языком Java, могут поработать с программой javaCC, которая находится на сайте [URL 26]. В ответе к упражнению 7 (Приложение В) дана программа грамматического разбора, написанная с помощью bison. Пример показывает, что как только вы изучите синтаксис, написание мини-языков не представит сложности.</p>
    <p id="_ednref13">Существует другой способ реализации мини-языка: расширить существующий. Например, можно интегрировать функциональные возможности на уровне приложения при помощи Python [URL 9] и написать нечто вроде <a l:href="#n_13">[13]</a>:</p>
    <p>record = X25UNE1.get(format=ABC123)</p>
    <p>if (record.balanc&lt;0):</p>
    <p>  X25UNE1.put(record, format=ABC123)</p>
    <p>else:</p>
    <p>  TELSTR1.put(record, format=XYZ43B)</p>
    <p>  DB.store(record)</p>
    <subtitle>Языки управления данными и процедурные языки</subtitle>
    <p>Реализуемые вами языки могут использоваться двумя различными способами.</p>
    <p><emphasis>Языки управления данными</emphasis> создают некую форму структуры данных, используемой приложением. Эти языки часто используются для представления конфигурации.</p>
    <p>Например, программа sendmail применяется во всем мире для маршрутизации электронной почты в сети Интернет. Она обладает многими достоинствами и преимуществами, которые управляются огромным файлом конфигурации, написанном на собственном языке конфигурирования программы sendmail:</p>
    <cite>
     <p>Mlocal, P=/usr/bin/procmail,</p>
     <p>F=lsDFMAw5:/|@qSPfhn9,</p>
     <p>S=10/30, R=20/40,</p>
     <p>T=DNS/RFC822/X-Unix,</p>
     <p>A=procmail -Y -a $h -d $u </p>
    </cite>
    <p>Очевидно, удобочитаемость не является сильной стороной sendmail.</p>
    <p>Уже давно фирма Microsoft использует язык данных, который может описывать меню, реквизиты окон, диалоговые окна и другие ресурсы Windows. На рис. 2.2 показан фрагмент типичного файла ресурсов. Он читается намного легче, чем пример с программой sendmail, но используется точно так же – компилируется для генерации структуры данных.</p>
    <p>Рис. 2.2. Файл .rc для Windows </p>
    <cite>
     <p>MAIN_MENU MENU</p>
     <p>{</p>
     <p>  POPUP " &amp;File"</p>
     <p> {</p>
     <p>  MENUITEM "&amp;New", CM_FILENEW</p>
     <p>  MENUITEM "&amp;Open…", CM_FILEOPEN</p>
     <p>  MENUITEM "&amp;Save", CM_FILESAVE</p>
     <p> }</p>
     <p>}</p>
     <p>MY_DIALOG_BOX DIALOG 6,15,292,287</p>
     <p>STYLE DS_MODALFRAME | WS_POPUP | WS_VISIBLE | WS_CAPTION | WS_SYSMENU</p>
     <p>CAPTION "My Dialog Box"</p>
     <p>FONT 8, "MS Sans Serif"</p>
     <p>{</p>
     <p>DEFPUSHBUTTON «OK», ID_OK, 232,16, 50,14</p>
     <p>PUSHBUTTON «Help», ID.HELP, 232, 52, 50,14</p>
     <p>CONTROL "Edit Text Control", ID EDIT1, "EDIT", WS_BODER | WS_TABSTOP, 16,16, 80, 56</p>
     <p>CHECKBOX «Checkbox», ID CHECKBOX 1,153, 65,42,38, BS_AUTOCHECKBOX | WS_ABSTOP </p>
     <p>}</p>
    </cite>
    <empty-line/>
    <p><emphasis>Процедурные языки</emphasis> идут дальше. В этом случае язык является исполняемым и поэтому может содержать инструкции, конструкции управления и т. п. (подобные сценарию на с. 50).</p>
    <p id="_ednref14">Вы также можете использовать собственные процедурные языки, чтобы облегчить сопровождение программы. Например, вас просят интегрировать информацию из унаследованного приложения в новую разработку графического интерфейса. Обычно это осуществляется при помощи "экранного кармана"; ваше приложение связывается с основным (mainframe) приложением так, как если бы это обычный пользователь-человек, генерируя нажатия клавиш и «считывая» принимаемые отклики. Вы можете создать сценарий взаимодействия при помощи мини-языка <a l:href="#n_14">[14]</a>.</p>
    <p>locate prompt "SSN:"</p>
    <p>type "%s" social_security_number</p>
    <p>type enter</p>
    <p>waitfor keyboardunlock</p>
    <p>if text_at(10,14) is "INVALID SSN" return bad_ssn</p>
    <p>if text_at(10,14) is "DUPLICATE SSN" return dup_ssn</p>
    <p># etc…</p>
    <p>Когда приложение определяет, что пора вводить номер SSN, то по этому сценарию оно вызывает интерпретатор, который затем управляет транзакцией. Если интерпретатор встроен в приложение, то они даже могут совместно использовать данные (например, при помощи механизма обратного вызова).</p>
    <p>В этом случае вы программируете в предметной области программиста сопровождения. Когда изменяется основное приложение и поля смещаются, программист может просто обновить высокоуровневое описание, вместо того чтобы копаться в подробностях программы на языке С.</p>
    <subtitle>Автономные и встроенные языки</subtitle>
    <p>Чтобы приносить пользу, мини-язык не должен использоваться приложением напрямую. Можно многократно использовать язык спецификации для создания искусственных объектов (включая метаданные), которые компилируются, считываются или используются самой программой иным образом (см. "Метапрограммирование").</p>
    <p>Например, в разделе "Обработка текста" описывается система, в которой мы использовали Perl, чтобы генерировать большое количество выводов из первоначальной спецификации схемы. Мы изобрели общий язык, чтобы представить схему базы данных, и затем сгенерировали все его формы, которые нам необходимы, – SQL, С, интернет-страницы, XML и др. Приложение не использовало спецификацию напрямую, но оно полагалось на выходные данные, полученные из нее.</p>
    <p>Обычной практикой является встраивание процедурных языков высокого уровня непосредственно в ваше приложение, так, чтобы они исполнялись, когда исполняется ваша программа. Очевидно, что это мощное средство; можно изменять поведение приложения, варьируя сценарии, которые оно считывает, причем все это</p>
    <subtitle>Несложная разработка или несложное сопровождение?</subtitle>
    <p>Мы рассмотрели несколько различных грамматик – от простых строчно-ориентированных форматов до более сложных, которые выглядят как реальные языки. Если для реализации требуются дополнительные усилия, тогда зачем выбирать более сложную грамматику?</p>
    <p>Компромиссом являются расширяемость и сопровождение. В то время как программа грамматического разбора «реального» языка может быть более сложной в написании, для пользователя она будет намного понятнее, и ее будет легче расширить за счет добавления новых средств и функциональных возможностей. Слишком простые языки могут быть легкими для грамматического разбора, но они могут быть зашифрованными – подобно примеру с программой sendmail (см. "Языки управления данными и процедурные языки").</p>
    <p>Учитывая, что срок службы большинства прикладных программ превышает ожидаемый, вам лучше примириться с суровой действительностью и принять заранее более сложный и удобочитаемый язык. Усилия, затраченные вначале, многократно окупятся за счет снижения затрат на поддержку и сопровождение.</p>
    <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
    <p>• Метапрограммирование</p>
    <subtitle>Вопросы для обсуждения</subtitle>
    <p>• Можно ли выразить некоторые из требований проекта, над которым вы работаете в настоящее время, на языке, отражающем специфику предметной области? Возможно ли написать компилятор или транслятор, который мог бы сгенерировать большую часть требуемой программы?</p>
    <p>• Если вы решили принять мини-язык как способ программирования, близкий к предметной области, вы принимаете и то, что для их реализации потребуются некоторые усилия. Как выдумаете, есть ли способы, при которых «скелет», разработанный для одного проекта, может многократно использоваться в других?</p>
    <subtitle>Упражнения</subtitle>
    <p>5. Требуется реализовать мини-язык управления простым графическим пакетом (возможно, с графикой в относительных командах). Язык состоит из однобуквенных команд. После некоторых команд указывается число. Например, следующий фрагмент изображает на экране прямоугольник. (Ответ см. в Приложении В.)</p>
    <p>Р 2 # select pen 2</p>
    <p>D # pen down</p>
    <p>W 2 # draw west 2cm</p>
    <p>N 1 # then north 1</p>
    <p>E 2 # then east 2</p>
    <p>S 1 # then back south</p>
    <p>U # pen up</p>
    <p>Составьте программу, которая анализирует этот язык. Она должна быть разработана так, чтобы операция добавления новых команд была несложной.</p>
    <p>6. Спроектируйте грамматику BNF (нормальной формы Бэкуса-Наура), чтобы провести грамматический разбор спецификаций времени. Все указанные примеры должны быть успешно проанализированы. (Ответ см. в Приложении В.)</p>
    <p>4pm, 7:38pm, 23:42, 3:16, 3:16am</p>
    <p>7. Реализуйте программу грамматического разбора для грамматики нормальной формы Бэкуса-Наура в упражнении 6, используя программы уасс, bison или аналогичный генератор грамматического разбора. (Ответ см. в Приложении В.)</p>
    <p>8. Реализуйте программу грамматического разбора времени, используя Perl. (Подсказка: регулярные выражения позволяют написать хорошие программы грамматического разбора.) (Ответ см. в Приложении В.)</p>
   </section>
   <section>
    <title>
     <p>13</p>
     <p>Оценка</p>
    </title>
    <section>
     <p>Сколько времени потребуется для пересылки "Войны и мира" по модемной линии в 56 байт? Какое место займет на диске миллион имен и адресов? Сколько времени понадобится для прохождения 1000-байтового блока через маршрутизатор? Сколько месяцев потребуется, чтобы завершить ваш проект?</p>
     <p>С одной стороны, все эти вопросы бессмысленны – информация, содержащаяся в них, недостаточна для ответа. И тем не менее, на все из них можно ответить, если вы сможете провести оценку. В процессе работы над генерацией оценки, вы придете к большему пониманию мира, в котором обитают ваши программы.</p>
     <p>Научившись оценивать и развивая этот навык до уровня, на котором у вас появляется интуитивное ощущение величины того или иного предмета, вы сможете показать явно магическую способность к определению их выполнимости. Если кто-либо говорит: "Мы вышлем вам резервную копию по каналу ISDN в центральный офис", вы сможете интуитивно осознать, имеет ли это смысл. Когда вы составляете программу, вы сможете понять, какие подсистемы нуждаются в оптимизации, а какие нужно оставить в покое.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 18: Проводите оценки во избежание сюрпризов</p>
     </cite>
     <empty-line/>
     <p>В конце данного раздела мы приведем единственно правильный ответ (в виде бесплатного приложения), который необходимо давать во всех случаях, когда вас просят оценить что-либо.</p>
    </section>
    <section>
     <title>
      <p>Насколько точной является "приемлемая точность"?</p>
     </title>
     <p>До некоторой степени все ответы представляют собой оценки. Просто некоторые из них точнее остальных. Так что первым вопросом, который вам придется задать самому себе, когда кто-либо просит вас об оценке, является вопрос о контексте, в котором будет приниматься данный вами ответ. Нужна ли здесь высокая точность, или речь идет о примерной цифре?</p>
     <p>• Если ваша бабушка спрашивает, когда вы появитесь, она, вероятно, задается вопросом, готовить вам обед или ужин. С другой стороны, водолаз, оказавшийся в подводной ловушке и испытывающий недостаток воздуха, интересуется ответом с точностью до секунды.</p>
     <p id="_ednref15">• Каково значение числа «пи»? Если вас интересует, какое количество бордюрного камня понадобится для оформления цветочной клумбы, то цифра 3 вероятно будет приемлемой <a l:href="#n_15">[15]</a>. На школьном уровне хорошим приближением является 22/7. Ну а если вы работаете в NASA, то двенадцати цифр после запятой будет вполне достаточно.</p>
     <p>Одной из интересных особенностей оценки является тот факт, что интерпретация ее результата зависит от используемых вами единиц измерения. Если выговорите, что для некоего действия потребуется 130 рабочих дней, то люди будут ожидать наступления этого события в достаточно узком интервале. Но если вы скажете "около шести месяцев", они будут знать, что этого события следует ожидать через 5–7 месяцев. Обе цифры обозначают одну и ту же продолжительность, но "130 дней", вероятно, подразумевает большую точность, чем вы полагаете. Мы рекомендуем следующую градацию оценок времени:</p>
     <p>Продолжительность == Оценка (порядок)</p>
     <p>1-15 дней == дни</p>
     <p>3-8 недель == недели</p>
     <p>8-30 недель == месяцы</p>
     <p>30 и более недель == перед тем, как оценить, стоит хорошенько подумать</p>
     <p>Так, если после всей необходимой работы, вы придете к решению, что проект займет 125 рабочих дней (25 недель), он может быть оценен как "примерно за шесть месяцев".</p>
     <p>Те же принципы применимы к оценкам любых количеств: выберите единицы, в которых будет дан ответ, чтобы отразить точность, которую вы намерены передать.</p>
    </section>
    <section>
     <title>
      <p>Из чего исходят оценки?</p>
     </title>
     <p>Все оценки основаны на моделях проблемы. Но перед тем как углубиться в методики построения моделей, необходимо упомянуть о главной хитрости, которая всегда дает хорошие результаты: спросите того, кто уже делал это. Перед тем как вплотную заняться построением модели, оглянитесь вокруг в поисках тех, кто ранее находился в подобной ситуации. Посмотрите, как они решали свою задачу. Маловероятно, что вы обнаружите точное совпадение, но будете удивлены, сколь часто вы успешно обращались к опыту других.</p>
     <p><strong>Понимание сути заданного вопроса</strong></p>
     <p>Первой частью любого упражнения в составлении оценки является понимание сути заданного вопроса. Как и в случае с вопросами точности, обсуждаемыми выше, вам необходимо осознать масштаб предметной области. Зачастую он неявно выражен в самом вопросе, но осознание масштаба, перед тем как начать строить предположения, должно войти у вас в привычку. Зачастую выбранная вами предметная область частично формирует ответ, который вы даете: "Если предположить, что по дороге не будет аварий и машина заправлена, я буду там через 20 минут".</p>
     <p><strong>Построение модели системы</strong></p>
     <p>Эта часть процесса оценки – самая интересная. Исходя из вашего понимания заданного вопроса, постройте в уме скелет действующей модели. Если вы оцениваете время отклика, то в вашей модели может иметься узел обслуживания и некий входной поток. При работе над проектом моделью могут послужить стадии, которые ваша организация использует в разработке, наряду с весьма грубым представлением того, как система может быть реализована.</p>
     <p>Построение модели может быть творческим процессом, полезным в долгосрочной перспективе. Зачастую построение модели приводит к открытию схем и процессов, лежащих в основе чего-либо и не видимых невооруженным глазом. У вас даже может возникнуть желание повторно исследовать исходный вопрос: "Вы попросили дать оценку X. Однако, похоже, что У, являющийся вариантом X, может быть выполнен примерно в два раза быстрее, и при этом вы теряете лишь одну характеристику".</p>
     <p>Построение модели вносит погрешности в процесс оценки. Это и неизбежно, и полезно. Вы жертвуете простотой модели ради точности. Удвоение усилий, прилагаемых к модели, может увеличить точность лишь незначительно. Ваш опыт подскажет вам, когда закончить процесс совершенствования.</p>
     <p><strong>Декомпозиция модели</strong></p>
     <p>Как только у вас появляется модель, вы можете провести ее декомпозицию на отдельные компоненты. Вам понадобится отыскать математические правила, описывающие взаимодействие этих компонентов. Иногда вклад компонента в конечный результат выражается одной величиной. Некоторые компоненты могут объединять несколько факторов, тогда как другие могут быть более сложными (подобно тем, которые имитируют поток, приходящий к узлу).</p>
     <p>Вы обнаружите, что обычно каждый компонент будет обладать параметрами, которые определяют его влияние на модель в целом. На этой стадии достаточно просто обозначить каждый параметр.</p>
     <p><strong>Присвоение значения каждому параметру</strong></p>
     <p>Как только в вашем распоряжении появились параметры, вы можете пойти напролом и присвоить некое значение каждому из них. На этой стадии вы ожидаете внесения некоторой ошибки. Хитрость состоит в том, чтобы понять, какие параметры оказывают максимальное воздействие на результат, и сосредоточиться на их точном получении. Обычно параметры, чьи значения добавляются к результату, являются менее значительными, чем те, что осуществляют умножение или деление. Удвоение скорости канала связи может увеличить вдвое объем данных, получаемых в течение часа, тогда как добавление транзитной задержки, равной 5 мс, не даст заметного эффекта.</p>
     <p>У вас должен иметься обоснованный способ вычисления этих критических параметров. В примере с формированием очереди вы захотели измерить реальную интенсивность входного потока транзакций в существующей системе или найти для измерения подобную систему. Аналогично, вы могли определить время, необходимое для обслуживания запроса, или провести оценку, используя методики, описанные в этом разделе. На самом деле, вам часто придется основывать свою оценку на других вспомогательных оценках. Именно в этом месте и возникают самые большие ошибки.</p>
     <p><strong>Вычисление ответов</strong></p>
     <p>Только в самом простом случае ваша оценка будет иметь один-единственный ответ. Вы счастливый человек, если можете сказать: "Я могу пройти по городу пять кварталов за 15 минут". Но поскольку системы все усложняются, вам захочется подстраховать ваши ответы. Проведите многократные вычисления, изменяя значения критических параметров, пока не выясните, какие из них действительно управляют моделью. Серьезную помощь в этом может оказать электронная таблица. Затем сформулируйте ваш ответ с точки зрения этих параметров. "Время отклика составляет (грубо) три четверти секунды, если система имеет шину SCSI и объем памяти 64 Мбайт; и одну секунду при объеме памяти 48 Мбайт". (Заметьте, что "три четверти секунды" дает иное ощущение точности, нежели 750 мс.)</p>
     <p>Уже на стадии вычислений появляются ответы, которые могут показаться странными. Не спешите игнорировать их. Если ваша арифметика правильна, то, вероятно, ваше понимание проблемы или модель неверны. Это ценная информация.</p>
     <p><strong>Отслеживание уровня мастерства</strong></p>
     <p>Мы полагаем, что было бы здорово вести учет ваших оценок так, чтобы вы могли оценить, насколько точным был ваш прогноз. Если общая оценка включала в себя вспомогательные, учитывайте и их. Часто будет оказываться, что ваши оценки удачны – на самом деле, спустя некоторое время вы придете к этому.</p>
     <p>Если оценка оказывается неверной, не стоит пожимать плечами и уходить. Стоит выяснить, почему она отличалась от предполагаемой. Возможно, выбраны параметры, не соответствовавшие реальной проблеме. Возможно, сама модель была неверной. Какова бы ни была причина, необходимо не спеша прояснить, что же случилось. Если сделать это, то следующая оценка будет лучше.</p>
     <subtitle>Оценка графиков выполнения проекта</subtitle>
     <p>Обычные правила оценки могут нарушаться перед лицом сложностей и капризов разработки серьезной прикладной программы. Мы считаем, что зачастую единственным способом определения графика выполнения проекта является практический опыт, полученный при работе над этим проектом. Это не обязательно парадокс, если вы практикуете разработку с помощью приращений, повторяя следующие шаги.</p>
     <p>• Проверить требования</p>
     <p>• Проанализировать риск</p>
     <p>• Осуществить проектирование, реализацию, интеграцию</p>
     <p>• Проверить правильность при работе с пользователями</p>
     <p>Первоначально у вас может быть лишь приблизительная оценка того, сколько итераций понадобится или какова будет их продолжительность. Некоторые методы требуют, чтобы вы зафиксировали это как часть первоначального плана, но для всех методов, за исключением наиболее тривиальных, это будет ошибкой. Если вы не создаете приложение, аналогичное предыдущему, с той же командой и по той же технологии, вам придется делать предположения.</p>
     <p>Итак, вы завершаете составление текста программы и проверку исходной функциональной возможности и отмечаете это как конечную точку первого приращения. Основываясь на этом опыте, вы можете уточнить ваше начальное предположение о числе итераций и о том, что может быть включено в каждую из них. С каждым разом уточнение становится все совершеннее, и вместе с этим растет уверенность в правильности графика.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 19: Уточняйте график проекта на основе текста программы</p>
     </cite>
     <empty-line/>
     <p>Это может не понравиться руководству, которому обычно нужна единственная надежная цифра еще до начала проекта. Вам придется помочь им осознать, что команда, ее производительность и среда будут определять график выполнения. Формализуя эту процедуру и уточняя график (что является частью итерационного процесса), вы сможете дать руководству самые точные оценки графика выполнения, какие только сможете.</p>
    </section>
    <section>
     <title>
      <p>Что сказать, если вас просят оценить что-либо</p>
     </title>
     <p>Говорите "Я вернусь к вам с этим позже".</p>
     <p>Вы почти всегда можете добиться лучших результатов, если не будете торопиться и потратите некоторое время, чтобы пройтись по всем стадиям, описанным в данном разделе. К оценкам, сделанным на ходу (например, у офисной кофеварки) придется возвращаться вновь и вновь (как, впрочем, и к кофе), теряя при этом покой.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Скорость алгоритма</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Заведите журнал регистрации сделанных вами оценок. Для каждой оценки укажите, насколько точной она оказалась. Если отклонение превысило 50 %, постарайтесь выяснить, где была допущена ошибка.</p>
     <subtitle>Упражнения</subtitle>
     <p>9. Спрашивается: какой из двух каналов обладает более широкой полосой пропускания: линия связи со скоростью 1 Мбайт/сек или человек, двигающийся от компьютера к компьютеру со стриммерной кассетой объемом 4 Гбайт в кармане? Какие ограничения накладываются на ответ, чтобы гарантировать его корректность в определенной области? (Например, можно указать, что временем доступа к ленте можно пренебречь.) (Ответ см. в Приложении В.)</p>
     <p>10. Так какой же из двух каналов обладает более широкой полосой пропускания? (Ответ см. в Приложении В.)</p>
    </section>
   </section>
  </section>
  <section>
   <title>
    <p>Глава 3</p>
    <p>Походный набор инструментов</p>
   </title>
   <section>
    <p>Каждый ремесленник отправляется на поиски заработка, имея при себе походный набор инструментов. Столяру могут пригодиться линейки, шаблоны, пара ножовок, несколько рубанков, тонкие стамески, сверла и зажимы, киянки и струбцины. Эти инструменты будет он будет тщательно выбирать и настраивать, каждому из них будет уготована определенная работа, и, что наверное самое важное, каждый из них, оказавшись в умелых руках столяра, найдет свое место под солнцем.</p>
    <p>После этого придет черед обучению и притирке. Каждому инструменту будут присущи свои особенности (и хитрости), и каждый из них потребует, чтобы с ним обращались по-своему. При работе столяр держит каждый инструмент особым образом и затачивает его под особым углом. Пройдет время, и от работы инструмент износится до того, что рукоятка превратится в слепок руки столяра, а режущая поверхность сравнится с углом, под которым столяр держит инструмент относительно рабочей плоскости. В этот момент инструменты станут проводниками идей от головы столяра к конечному продукту – они станут продолжением рук мастера. Со временем в арсенале столяра прибавятся новые орудия – резальные машины, лазерные станки для резки под углом, направляющие шаблоны "ласточкин хвост" – все это чудеса технологического прогресса. Но можно поспорить, что по-настоящему столяр счастлив только тогда, когда держит в руках инструмент из старого походного набора и слышит, как рубанок поет свою песню, выстругивая деревянную заготовку.</p>
    <p>Инструменты – средство усиления вашего таланта. Чем они лучше и чем лучше вы ими владеете, тем больше вы сможете сделать. Начните с походного универсального набора инструментов. По мере того как вы приобретаете опыт и сталкиваетесь с специальными требованиями, ваш набор пополняется. Стоит уподобиться ремесленнику и пополнять набор регулярно. Старайтесь не прекращать поисков лучшего способа сделать что-либо. Оказавшись в ситуации, когда вы обнаруживаете, что ваших инструментов недостаточно, поищите иное, возможно, более мощное средство для осуществления задуманного. Ваши приобретения должны исходить из существующей необходимости.</p>
    <p>Многие начинающие программисты делают ошибку, принимая на вооружение одно-единственное мощное инструментальное средство, в частности, конкретную интегрированную среду разработчика (ИСР), и никогда не выходят за пределы удобного для них интерфейса. Это ошибка. Необходимо осваиваться и вне пределов, установленных ИСР. Но это можно сделать лишь при условии, что инструменты из походного набора должным образом заточены и готовы к работе.</p>
    <p>Данная глава посвящена тому, что вкладывается в походный набор инструментов. Как и в любой хорошей дискуссии об инструментах, начнем (в разделе "Преимущества простого текста") с рассмотрения сырья – материала, которому будет придана форма. Затем мы перейдем к верстаку – в нашем случае его роль играет компьютер. Как использовать компьютер для извлечения максимальной пользы из инструментальных средств, находящихся под рукой? Этот аспект обсуждается в разделе "Игры с оболочками". Теперь, когда у нас есть материал и верстак, на котором можно работать, обратимся к инструменту, который, вы наверняка будете использовать чаще всего, – вашему текстовому редактору. В разделе "Мощь редактирования" предлагаются различные способы, как сделать работу с ним более эффективной.</p>
    <p>Даже для таких простых вещей, как личная адресная книжка, необходимо использовать "Систему управления исходным текстом" как гарантию того, что даже самая малая часть вашей драгоценной работы не канет в небытие! И поскольку открыватель законов Мерфи все же был оптимистом, вы не можете считать себя великим программистом, пока не приобретете серьезных навыков в отладке (см. раздел "Отладка").</p>
    <p>Чтобы как-то объединить большую часть элементов магии, необходимо некое связующее вещество (наподобие столярного клея). Некоторые средства, подобные awk, Perl и Python, рассмотрены в разделе "Обработка текста".</p>
    <p>Подобно тому, как при изготовлении сложных конструкций столяры иногда пользуются шаблонами, программисты могут написать программу, которая, в свою очередь, сама генерирует текст программы. Этот вопрос обсуждается в разделе "Генераторы исходного текста".</p>
    <p>Уделив некоторое время изучению этих инструментальных средств, в один прекрасный день вы удивитесь, как ваши пальцы бегают по клавиатуре, обрабатывая текст без дополнительной нагрузки на мозг. Инструменты стали продолжением ваших рук.</p>
   </section>
   <section>
    <title>
     <p>14</p>
     <p>Преимущества простого текста</p>
    </title>
    <section>
     <p>Основной материал, с которым работают программисты-прагматики, – не дерево и не металл, а человеческое знание. Оно является форматом при сборе требований, а затем выражается в конструкциях, реализациях, тестах и документации.</p>
     <p>И мы уверены, что лучшим форматом для постоянного хранения знания является простой текст, позволяющий обрабатывать знание как вручную, так и с помощью программных средств, используя практически все инструменты, имеющиеся у нас под рукой.</p>
    </section>
    <section>
     <title>
      <p>Что такое простой текст?</p>
     </title>
     <p>Простой текст состоит из печатных символов и представлен в некой форме, которая непосредственно может быть воспринята и понята людьми. Например, данный фрагмент не несет в себе смысла, хотя и состоит из печатных символов.</p>
     <cite>
      <p>Field19=467abe</p>
     </cite>
     <p>Читатель и понятия не имеет, каков смысл значения 467аЬе. Лучше сделать его понятным:</p>
     <cite>
      <p>DrawingType=UMLActivityDrawing</p>
     </cite>
     <p>Простой текст вовсе не означает, что в нем отсутствует структура; яркими примерами простого текста с четко определенной структурой являются форматы XML, SGML и HTML. С простым текстом можно проделывать все те же операции, что и с двоичным форматом, включая управление версиями.</p>
     <p>Простой текст имеет тенденцию находиться на более высоком уровне, чем простая двоичная кодировка, обычно возникающая непосредственно из реализации. Предположим, вам нужно хранить свойство под названием usesjnenus, которое может принимать значение TRUE или FALSE. Используя простой текст, вы можете записать это следующим образом:</p>
     <cite>
      <p>myprop.uses_menus=FALSE</p>
     </cite>
     <p>А теперь сравните это с 0010010101110101.</p>
     <p>Проблема большинства двоичных форматов состоит в том, что контекст, необходимый для понимания данных, отделен от самих данных. Вы искусственно отделяете данные от их смыслового значения. Вдобавок, данные могут быть зашифрованы; они абсолютно бессмысленны при отсутствии прикладной логики для их анализа. А с помощью простого текста вы можете создать самодокументированный поток данных, не зависящий от прикладной программы, которая его породила.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 20: Сохраняйте знания в формате простого текста</p>
     </cite>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>Недостатки</p>
     </title>
     <p>Простой текст обладает двумя основными недостатками: (1) при хранении он может занимать больше места, чем сжатый двоичный формат, и (2) с точки зрения вычислений интерпретация и обработка файла с простым текстом может проводиться медленнее.</p>
     <p>В зависимости от приложения неприемлемыми могут оказаться одна или обе вышеописанные ситуации – например, при хранении данных спутниковой телеметрии или в случае внутреннего формата реляционной базы данных.</p>
     <p>Но и в этих ситуациях допустимо сохранять метаданные, описывающие исходные данные, в формате простого текста (см. раздел "Метапрограммирование").</p>
     <p id="_ednref16">Некоторые разработчики боятся помещать метаданные в формате простого тек ста, потому что таким образом они раскрывают его содержимое пользователям системы. Эти опасения не имеют достаточных оснований. Двоичные данные могут быть более расплывчатыми, чем простой текст, но от этого не становятся более защищенными. Если вы не хотите, чтобы пользователи видели пароли, зашифруйте их. Если вы не хотите, чтобы они изменяли параметры конфигурации, примените технологию защищенного хеширования <a l:href="#n_16">[16]</a> ко всем значениям параметров, и используйте результат в контрольной сумме файла.</p>
    </section>
    <section>
     <title>
      <p>Преимущества простого текста</p>
     </title>
     <p>Поскольку «больше» и «медленнее» – не самые популярные требования, предъявляемые пользователями, то зачем вообще нужен простой текст? Каковы его преимущества?</p>
     <p>• Гарантия того, что данные не устареют</p>
     <p>• Более короткий путь к цели</p>
     <p>• Более простое тестирование</p>
     <subtitle>Гарантия того, что данные не устареют</subtitle>
     <p>Форматы данных, которые может воспринять человек, и самодокументированные данные переживут все другие форматы данных и приложения, их породившие. И точка.</p>
     <p>На протяжении всего срока жизни данных вы сможете пользоваться ими и в перспективе – еще долго после того, как прикладная программа, их породившая, прекратит свое существование.</p>
     <p>Вы сможете провести синтаксический анализ такого файла, даже не зная полностью его формата; в большинстве же случаев с двоичными файлами успешный анализ возможен лишь при знании всех особенностей формата.</p>
     <p id="_ednref17">Рассмотрим файл данных из некой унаследованной <a l:href="#n_17">[17]</a> системы. Вы обладаете скудной информацией о прикладной программе, которая создала этот файл; эта информация сводится к тому, что она поддерживала список номеров SSN (Social Security Number – номер социального страхования) клиентов, которые вам необходимо найти и извлечь из архива. Среди данных вы видите: </p>
     <cite>
      <p>«FIELD»123-45-6789«/FIELD10»</p>
      <p>:</p>
      <p>«FIELD»567-89-0123«/FIELD10»</p>
      <p>:</p>
      <p>«FIELD10»901-23-4567«/FIELD10» </p>
     </cite>
     <p>Опознав формат номера SSN, можно быстро написать небольшую программу для извлечения этих данных – даже при отсутствии у вас иной информации об этом файле.</p>
     <p>Но представим, что вместо этого файл отформатирован следующим образом:</p>
     <cite>
      <p>АС27123456789В11Р</p>
      <p>: </p>
      <p>XY43567890123QTYL</p>
      <p> :</p>
      <p>6Т2190123456788АМ</p>
     </cite>
     <p>Не так-то легко распознать значение чисел, представленное в таком виде. В этом и состоит разница между воспринимаемым человеком и понятным человеку. Но и от обозначения FIELD10 толку будет немного. А нечто вроде: </p>
     <cite>
      <p>«SSNO»123-45-6789«/SSNO» </p>
     </cite>
     <p>делает сие упражнение задачкой для детского сада и гарантирует, что данные переживут любой проект, их породивший.</p>
     <subtitle>Более короткий путь к цели</subtitle>
     <p>Практически любой инструмент в компьютерной вселенной – от систем управления исходными текстами до компиляторных сред, редакторов и отдельно стоящих фильтров – может работать с простым текстом.</p>
     <subtitle>Философия ОС Unix</subtitle>
     <p>Операционная система Unix известна тем, что она проектировалась на основе философии небольших, отточенных инструментальных средств, каждое из которых предназначено для качественного выполнения только одной операции. Эта философия реализуется с помощью обычного фундаментального формата – строчно-ориентированного файла с простым текстом. Базы данных, используемые в системном администрировании (учетные записи и пароли, конфигурация сети и т. д.), хранятся в виде файлов с простым текстом. (Некоторые системы, подобные Solaris, также поддерживают двоичную форму конкретных баз данных для оптимизации производительности. Версия с простым текстом сохраняется в качестве интерфейса к двоичной версии.)</p>
     <p>Если в системе происходит аварийный отказ, то при ее восстановлении может оказаться, что вам придется работать в среде с минимальным интерфейсом (например, вы не будете иметь доступа к графическим драйверам). Подобные ситуации дают возможность оценить простоту выбранного представления текста.</p>
     <empty-line/>
     <p>Предположим, что вы развертываете крупномасштабное приложение со сложным конфигурационным файлом, характерным для конкретного местоположения (на ум сразу приходит sendmail). Если этот файл представляет собой простой текст, то его можно подчинить системе управления исходными текстами (см. "Управление исходным текстом"), и вы автоматически сохраняете хронологию всех изменений. Инструментальные средства сравнения файлов, такие как diff и fc, позволяют сразу увидеть, какие изменения были внесены, тогда как sum позволяет генерировать контрольную сумму для отслеживания файла на предмет случайных (или злонамеренных) модификаций.</p>
     <subtitle>Более простое тестирование</subtitle>
     <p>Если вы используете простой текст при создании синтетических данных для запуска системных тестов, то добавление, обновление или модификация тестовых данных (без привлечения каких-либо специальных инструментальных средств) не представляет особого труда. Аналогично, результат регрессионного тестирования в виде простого текста может быть проанализирован тривиальным образом (например, с помощью программы diff) или более тщательно с помощью языков Perl, Python и при помощи некоторых других средств написания сценариев (скриптов).</p>
    </section>
    <section>
     <title>
      <p>Подводим итог</p>
     </title>
     <p>Вездесущий текстовый файл никуда не денется и в будущем, когда интеллектуальные XML-базированные агенты, путешествующие по диким и опасным дебрям Интернета в автономном режиме, будут согласовывать обмен данными между собой. Действительно, в гетерогенных операционных средах преимущества простого текста могут перевесить все его недостатки. Необходимы гарантии того, что все стороны могут обмениваться информацией по общему стандарту. Таким стандартом и является простой текст.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Управление исходным текстом</p>
     <p>• Генераторы исходного текста</p>
     <p>• Метапрограммирование</p>
     <p>• Доски объявлений</p>
     <p>• Вездесущая автоматизация</p>
     <p>• Все эти сочинения</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Требуется спроектировать базу данных – небольшую адресную книгу (фамилия, номер телефона и т. д.), используя простое двоичное представление на языке по вашему выбору. Перед тем как продолжить чтение данного проблемного вопроса, проделайте следующее:</p>
     <p>1. Преобразуйте этот формат в формат простого текста, используя XML.</p>
     <p>2. Для каждой из версий добавьте новое поле переменной длины под названием directions, в котором вы могли бы вводить указания, как подъехать к дому каждого адресата.</p>
     <p>Какие вопросы, связанные с управлением версиями и расширяемостью, могут возникнуть? Какую форму легче модифицировать? Как обстоит дело с преобразованием уже существующих данных?</p>
    </section>
   </section>
   <section>
    <title>
     <p>15</p>
     <p>Игры с оболочками</p>
    </title>
    <section>
     <p>Каждому столяру нужен хороший, солидный, надежный верстак – место, расположенное на удобной для столяра высоте, на котором он в ходе своей работы мог бы разместить предметы труда. Верстак становится центром мастерской, столяр возвращается к нему снова и снова, придавая форму материалу.</p>
     <p>Для программиста, обрабатывающего файлы или текст, подобным верстаком является командная оболочка. Находясь в командной строке, вы можете задействовать весь свой арсенал инструментов, комбинируя их такими способами, о которых их разработчики и не мечтали. Из оболочки вы можете запускать приложения, отладчики, браузеры, редакторы и утилиты. Вы можете осуществлять поиск файлов, опрашивать состояние системы и производить фильтрацию выходных данных. Для часто используемых процедур вы можете создавать сложные макрокоманды, используя встроенный язык.</p>
     <p>Для программистов, выросших на графических интерфейсах и ИСР, это может показаться экстремизмом. В конце концов, разве нельзя проделать все операции с равным успехом, указывая на объект и щелкая кнопкой мыши?</p>
     <p>Ответ прост: «Нет». Графические интерфейсы сами по себе прекрасны, и с их помощью многие простые операции выполняются быстрее и с большим удобством. Перемещение файлов, чтение сообщений электронной почты с кодировкой MIME и набор текстов писем – это все то, что вы хотели бы осуществлять в графической среде. Но если выделаете всю работу, используя графический интерфейс, то используете далеко не все возможности, предоставляемые операционной системой. И вам не удастся автоматизировать обычные задачи или использовать доступные инструментальные средства в полную силу. И вы не сможете комбинировать свои средства для создания специализированных макроинструментов. Преимуществом графического интерфейса пользователя является принцип WYSIWYG – что видишь, то и получаешь. Недостатком графического интерфейса можно назвать принцип WYSIAYG – получаешь только то, что видишь.</p>
     <p>Графические среды обычно ограничены возможностями, заложенными в них разработчиками. Если вам необходимо выйти за пределы модели, созданной разработчиком, то обычно фортуна отворачивается от вас, однако чаще всего вам все-таки приходится выходить за пределы модели. Прагматики не просто либо «рубят» текст, либо разрабатывают объектные модели, либо пишут документацию или автоматизируют процесс сборки – они делают все вышеперечисленное. Сфера применения любого конкретного инструмента обычно ограничена задачами, решения которых от него ожидают. Предположим, возникла необходимость в интеграции препроцессора исходного текста с ИСР (при реализации концепции "проектирования по контракту", многопроцессных директив, и т. п.). Если разработчик ИСР явно не предусмотрел наличия в ней специальных средств, то вы не справитесь с решением задачи интеграции.</p>
     <p>Если вы уже освоились с работой в режиме командной строки, то можете спокойно пропустить данный раздел. В противном случае вам необходимо заручиться дружеским расположением со стороны командной оболочки.</p>
     <p>Исповедуя прагматизм, вы постоянно будете испытывать потребность в осуществлении операций ad hoc (лат. для конкретного случая. – Прим. пер.) – это и есть те самые случаи, когда графический интерфейс может оказаться неприменимым. Командная строка может стать лучшим решением, если необходимо быстро скомбинировать несколько команд при выполнении запроса или иного задания. Ниже приводится несколько примеров.</p>
     <p><strong>Найти все файлы типа *.с, модифицированные позже, чем ваш Makefile.</strong></p>
     <p><emphasis>Командная строка:</emphasis></p>
     <p>find. -name *.с' – newer Makefile – print</p>
     <p><emphasis>Графический интерфейс:</emphasis></p>
     <p>Откройте Проводник Windows, перейдите в нужный каталог, щелкните по Makefile и отметьте для себя время модификации данного файла. Затем войдите в меню Tools, выберите пункт Find, и введите *.с в строку, указывающую параметры имени файла. Затем перейдите в поле даты, и введите дату, которую вы вначале отметили для Makefile. Затем нажмите ОК.</p>
     <empty-line/>
     <p><strong>Создать архив типа zip/tar моего исходного текста.</strong></p>
     <p><emphasis>Командная строка:</emphasis></p>
     <p>zip archive.zip *.h *.с     или</p>
     <p>tar cvf archive.tar \h *.c</p>
     <p><emphasis>Графический интерфейс:</emphasis></p>
     <p>Запустите утилиту архивирования (например, условно-бесилатную программу WinZip [URL 41], выберите пункт Create New Archive, введите его имя, выберите исходный каталог в диалоге Add, задайте фильтр "*.с", щелкните по пункту «Add», задайте фильтр "*.h", щелкните по пункту «Add», затем закройте архив.</p>
     <empty-line/>
     <p><strong>Какие файлы Java не были изменены за последнюю неделю?</strong></p>
     <p><emphasis>Командная строка:</emphasis></p>
     <p>find . Name *.java' – mtime + 7 – print</p>
     <p><emphasis>Графический интерфейс:</emphasis></p>
     <p>Щелкните и переместитесь к пункту "Find files", щелкните по полю «Named» и введите в него "*.java", выберите пункт "Date Modified". Затем выберите пункт «Between». Затем щелкните по начальной дате и введите начальную дату начала проекта. Щелкните по конечной дате и введите дату, которая была неделю назад (убедитесь, что календарь находится под рукой). Затем щелкните по пункту "Find Now".</p>
     <empty-line/>
     <p><strong>Какие из данных файлов используют библиотеки awt?</strong></p>
     <p><emphasis>Командная строка:</emphasis></p>
     <p>find . -name *.java' – mtime +7 – print | xargs grep 'java.awt'</p>
     <p><emphasis>Графический интерфейс:</emphasis></p>
     <p>Загрузите каждый файл в списке из предыдущего примера в редактор и проведите поиск строки java.awt. Напишите имя каждого файла, содержащего совпадение.</p>
     <empty-line/>
     <p>Ясно, что этот список может быть продолжен. Строчные команды могут быть непонятными и компактными, но они обладают мощностью и краткостью. И поскольку они могут сводиться в файлы сценариев (или командные файлы в системе Windows), то вы можете создавать последовательности команд для автоматизации часто выполняемых процедур.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 21: Используйте сильные стороны командных оболочек</p>
     </cite>
     <empty-line/>
     <p>Освойте работу с оболочкой, и вы обнаружите, как выросла ваша производительность. Нужно создать перечень всех уникальных имен пакетов, которые явно импортируются вашей программой на языке Java? Приведенная ниже программа сохраняет этот перечень в файле под названием "list".</p>
     <p>grep "import' *.java |</p>
     <p>  sed -e's/.'import //' – e's/;.$//' |</p>
     <p>  sort -u &gt;list</p>
     <p>Если вам еще не приходилось часами изучать возможности командной оболочки систем, с которыми вы работаете, то это занятие может показаться устрашающим. Тем не менее, приложите некоторое усилие для ознакомления с оболочкой, и вскоре все встанет на свое место. Поиграйте с вашей командной оболочкой, и вы удивитесь, насколько продуктивнее станет ваша работа.</p>
    </section>
    <section>
     <title>
      <p>Утилиты оболочек и системы Windows</p>
     </title>
     <p>Хотя командные оболочки, поставляемые с системами Windows постепенно улучшаются, утилиты командной строки Windows все еще уступают их двойникам в Unix. Однако все не так плохо.</p>
     <p id="_ednref18">Фирма Cygnus Solutions разработала пакет под названием Cygwin [URL 31]. Помимо обеспечения слоя совместимости Unix для Windows, Cygwin поставляется вместе с коллекцией более чем 120 утилит Unix, включая такие бестселлеры, как Is, grep и find. Утилиты и библиотеки могут загружаться и использоваться бесплатно, но обязательно прочтите их лицензию <a l:href="#n_18">[18]</a>. Программа Cygwin распространяется вместе с оболочкой Bash.</p>
     <subtitle>Использование инструментальных средств Unix при работе в среде Windows</subtitle>
     <p>Нам нравится, что высококачественные инструментальные средства Unix работают в среде Windows, и мы пользуемся ими ежедневно. Однако надо иметь в виду, что существуют проблемы интеграции. Эти утилиты (в отличие от их двойников, работающих в MS-DOS) чувствительны к регистру в именах файлов, так что команда ls a*.bat не сможет найти файл AUTOEXEC.BAT. Вы можете также столкнуться с проблемами, вызванными файлами, чьи имена содержат пробелы, и с различиями в разделителях пути. Наконец, есть проблемы, связанные с запуском из-под оболочек Unix программ MS-DOS, в которых ожидается наличие аргументов в стиле MS-DOS. Например, утилиты Java, написанные фирмой JavaSoft, используют двоеточие (как и в их разделителе CLASSPATH при работе в среде Unix), а при работе в MS-DOS используют точку с запятой. В результате сценарий Bash или ksh, запускаемый в окне Unix, будет работать также и в Windows, но командная строка, передаваемая ею Java, будет интерпретироваться некорректно.</p>
     <empty-line/>
     <p>В качестве альтернативы Дэвид Корн (автор известной оболочки Korn) создал пакет под названием UWIN. Он предназначен для тех же целей, что и продукт Cygwin – это среда разработчика Unix, работающая в Windows. Пакет UWIN распространяется с оболочкой Korn. Коммерческие версии поставляются фирмой Global Technologies, Ltd. [URL 30]. Кроме того, фирма AT&amp;T допускает бесплатную загрузку пакета для оценки его работы и использования в академических учреждениях. Перед его использованием также необходимо прочесть лицензию.</p>
     <p>И наконец, Том Кристиансен (во время написания книги) компонует Perl Power Tools, пытаясь в сжатом виде реализовать все известные утилиты Unix на языке Perl [URL 32].</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Вездесущая автоматизация</p>
     <subtitle>Вопросы для обсуждения:</subtitle>
     <p>• Существуют ли операции, которые в данное время вам приходится выполнять вручную, работая в графической среде? Приходилось ли вам когда-либо сочинять для коллег по работе инструкции, состоящие из отдельных пунктов типа: "щелкните по этой кнопке", "выберите этот пункт"? Можно ли автоматизировать данный процесс?</p>
     <p>• При переходе к новой операционной среде обратите особое внимание на то, ка – кие оболочки находятся в вашем распоряжении. Посмотрите, можете ли вы перенести в новую среду оболочку, с которой работаете в данный момент.</p>
     <p>• Изучите возможные альтернативы оболочке, используемой вами в настоящее время. Если вы сталкиваетесь с проблемой, которую невозможно решить средствами имеющейся у вас оболочки, может быть, альтернативная оболочка проявит себя лучше?</p>
    </section>
   </section>
   <section>
    <title>
     <p>16</p>
     <p>Мощь редактирования</p>
    </title>
    <section>
     <p>Выше уже говорилось об инструментах, которые являются продолжением вашей руки. Это положение применимо к текстовым редакторам в большей степени, нежели к любому другому инструменту. Необходимо, чтобы вы затрачивали минимальные усилия на обработку текста, поскольку последний является основным «сырьем» при программировании. Рассмотрим некоторые общие характеристики и функции, которые помогают использовать ваш текстовый редактор с максимальным КПД.</p>
    </section>
    <section>
     <title>
      <p>Один-единственный редактор</p>
     </title>
     <p id="_ednref19">Мы полагаем, что лучше овладеть одним-единственным редактором, но в совершенстве, и использовать его для решения всех задач, связанных с редактированием: работа с текстом программ, документацией, записками, системное администрирование и т. д. Не имея под рукой хотя бы одного редактора, можно оказаться в ситуации, аналогичной вавилонскому смешению языков, но уже на современный манер. При написании текстов программ может понадобиться встроенный редактор ИСР (для каждого языка), для создания документации – универсальный офисный редактор, а может быть, и еще один встроенный редактор для отправки сообщений по электронной почте. Различаться могут даже клавиатурные команды, используемые вами для редактирования командных строк в оболочке <a l:href="#n_19">[19]</a>. Трудно быть экспертом в любой из этих программных сред, если в каждой из них имеется свой набор команд и соглашений при редактировании.</p>
     <p>Но экспертом быть необходимо. Мало набирать символы построчно и использовать мышь для вырезания и вставки фрагментов. Работая подобным образом, вы не достигнете того уровня производительности, который возможен при наличии мощного текстового редактора. Десятикратное нажатие клавиши &lt;- или BACKSPACE для перемещения курсора влево к началу строки не столь эффективно, как простая клавиатурная команда, например Ctrl+A, Home или 0.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 22: Используйте один текстовый редактор, но по максимуму</p>
     </cite>
     <empty-line/>
     <p>Выберите какой-либо редактор, тщательно изучите его и используйте во всех задачах, связанных с редактированием текста. Если вы пользуетесь одним редактором (или набором функциональных клавиш) для всех работ, связанных с редактированием текста, вам не придется останавливаться и обдумывать, как осуществить ту или иную обработку текста: нажатие нужных клавиш становится рефлексом, редактор – продолжением вашей руки: клавиши поют свою песню, перемещаясь по тексту сквозь череду мыслей. Это и есть цель!</p>
     <p>Убедитесь, что выбранный вами редактор поддерживается всеми платформами, с которыми вы работаете. Редакторы Emacs, vi, CRISP, Brief и ряд других поддерживаются несколькими платформами, часто в двух версиях – в графической и неграфической (текстовый режим).</p>
    </section>
    <section>
     <title>
      <p>Средства редактирования</p>
     </title>
     <p>Помимо тех средств, которые вы считаете особенно полезными и удобными, имеется ряд основных возможностей, которыми, по нашему мнению, должен обладать любой приличный редактор. Если в вашем редакторе отсутствует любая из этих возможностей, то, вероятно, настало время поразмыслить о переходе к более продвинутому редактору.</p>
     <p>• <strong>Настраиваемость.</strong> Все свойства редактора должны настраиваться по вашему пожеланию, включая шрифты, цвета, размеры окон и клавиатурные привязки (команды, исполняемые при нажатии той или иной клавиши). Применение только клавиатурных сочетаний в ходе обычных операций редактирования является более эффективным по сравнению с мышью или командами в меню, поскольку руки не отрываются от клавиатуры.</p>
     <p>• <strong>Расширяемость.</strong> Редактор не должен устаревать только потому, что появляется новый язык программирования. Он должен обладать способностью интегрироваться в любую компиляторную среду, используемую вами в данный момент. Вы должны «обучить» его нюансам любого нового языка программирования или текстового формата (XML, HTML версии 9, и т. д.).</p>
     <p>• <strong>Программируемость.</strong> Вы должны располагать возможностью программирования редактора для осуществления сложных многоступенчатых операций. Это может осуществляться при помощи макросов или встроенного языка программирования сценариев (к примеру, редактор Emacs использует вариант языка Lisp).</p>
     <p>В дополнение к этому многие редакторы поддерживают средства, которые свойственны конкретному языку программирования:</p>
     <p>• Выделение синтаксических конструкций</p>
     <p>• Автоматическое завершение</p>
     <p>• Автоматический отступ</p>
     <p>• Библиотека исходных стандартных текстов или документов</p>
     <p>• Принудительная справка, выдаваемая системой</p>
     <p>• Средства, подобные ИСР (компиляция, отладка и т. д.).</p>
     <empty-line/>
     <p>Рис. 3.1. Упорядочение строк в редакторе</p>
     <image l:href="#i_003.jpg"/>
     <p>Такое средство, как выделение синтаксических конструкций, может показаться необязательной фривольностью, но в реальности оно весьма полезно и улучшит вашу производительность. Вы быстро привыкнете к тому, что ключевые слова отображаются разным цветом или шрифтом, а неправильно набранное ключевое слово, которое отображается по-другому, бежит на вас как зверь на ловца задолго до того, как вы запустите компилятор.</p>
     <p>Возможность компиляции и обнаружения ошибок непосредственно в среде редактирования – это значительное удобство при работе над большим проектами. Приверженцем подобного стиля взаимодействия является, в частности, редактор Emacs.</p>
    </section>
    <section>
     <title>
      <p>Производительность</p>
     </title>
     <p>Удивительно, но многие люди, с которыми нам довелось встречаться, используют для редактирования исходных текстов программ утилиту notepad, входящую в систему Windows. Это сильно напоминает использование чайной ложечки вместо совковой лопаты – примитивный набор текста и использование основных команд ("вырезать-вставить"), активизируемых с помощью мыши, явно недостаточны</p>
     <p>Какие же процедуры могут потребовать от вас большего, чем примитивные действия, описанные выше?</p>
     <p>Начнем с перемещения курсора. Некоторые клавиатурные команды, перемещающие вас по словам, строкам, блокам или функциям, являются более эффективными по сравнению с повторным нажатием одной и той же клавиши, перемещающей курсор от символа к символу или от строки к строке.</p>
     <p>Предположим, что вы пишете программу на языке Java. Вам нравится поддерживать ваши операторы import в алфавитном порядке, но кто-то чужой зарегистрировал несколько файлов, не отвечающих этому стандарту Вы хотели бы пробежать по нескольким файлам и упорядочить некоторую их часть. Это легко сделать при работе с редакторами типа vi и Emacs (см. рис. 3.1). А попробуйте сделать то же самое в редакторе notepad!</p>
     <p>Некоторые редакторы могут помочь в усовершенствовании обычных операций. Например, когда вы создаете новый файл на определенном языке программирования, редактор может подобрать для вас нужный шаблон. Он может включать в себя:</p>
     <p>• Наименование создаваемого класса или модуля (определенного из имени файла)</p>
     <p>• Ваше имя и/или знак авторского права</p>
     <p>• «Скелеты» конструкций на данном языке (например, описания конструктора или деструктора)</p>
     <p id="_ednref20">Другим полезным средством является автоматический отступ. В нужный момент редактор автоматически делает отступы (например, при вводе открывающей скобки), и не нужно проделывать ту же операцию вручную (используя пробел или табуляцию). Преимуществом этого средства является то, что вы можете использовать редактор для обеспечения постоянства стиля отступа в вашем проекте <a l:href="#n_20">[20]</a>.</p>
    </section>
    <section>
     <title>
      <p>Куда же направиться?</p>
     </title>
     <p>Советы подобного рода особенно трудно формулировать, поскольку практически все читатели находятся на различных уровнях владения редактором (или редакторами), которым они пользуются в данный момент, и имеют различный опыт работы с ними. Поэтому, чтобы подвести итог и сформулировать некоторые указания относительно того, куда же двигаться дальше, отыщите то, что соответствует вам в левом столбце таблицы, а затем, чтобы узнать наше мнение обо всем этом, взгляните на правый столбец.</p>
     <empty-line/>
     <p><emphasis>Если это похоже на вас:</emphasis></p>
     <p>Тогда задумайтесь о следующем:</p>
     <empty-line/>
     <p><emphasis>Я пользуюсь только основными средствами многих разнообразных редакторов.</emphasis></p>
     <p>Выберите мощный редактор и изучите его хорошенько.</p>
     <empty-line/>
     <p><emphasis>У меня есть любимый редактор, но я не использую все его средства</emphasis></p>
     <p>Изучите эти средства. Сократите число используемых клавиатурных команд.</p>
     <empty-line/>
     <p><emphasis>У меня есть любимый редактор и я использую его везде, где только возможно</emphasis></p>
     <p>Постарайтесь расширить свои познания и используйте его для большего числа задач, по сравнению тем, что вы используете сегодня.</p>
     <empty-line/>
     <p><emphasis>Я думаю, что вы говорите ерунду. Notepad является самым лучшим редактором из когда-либо созданных</emphasis></p>
     <p>Пока вы счастливы и продуктивны, используйте notepad! Но если вы окажетесь подвержены чувству "редакторской зависти", возможно, что вы и пересмотрите свою позицию</p>
    </section>
    <section>
     <title>
      <p>Какой же редактор выбрать?</p>
     </title>
     <p>Советуем освоить приличный редактор, но какой же именно? Уклонимся от ответа на этот вопрос: выбор редактора является личным делом каждого (некоторые даже скажут, что выбор редактора связан с вероисповеданием!). В приложении А приведен список популярных редакторов и мест, откуда их можно загрузить.</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Некоторые редакторы используют полномасштабные языки для настройки и создания сценариев. Например, в редакторе Emacs используется язык программирования Lisp. В качестве одного из новых языков, который вы наметили изучить в этом году, изучите язык, используемый вашим редактором. Разработайте набор макросов (или эквивалентных им средств) для всех операций, которые вам приходится осуществлять повторно.</p>
     <p>• А знаете ли вы все, на что способен ваш редактор? Попытайтесь подзадорить ваших коллег, которые работают с тем же редактором. Попробуйте выполнить любое задание, связанное с редактированием, используя как можно меньшее число клавиатурных команд.</p>
    </section>
   </section>
   <section>
    <title>
     <p>17</p>
     <p>Управление исходным текстом программ</p>
    </title>
    <epigraph>
     <p>Прогресс не проявляется лишь в изменениях и зависит от цепкости памяти. Те, кто не учится на своих ошибках, обречены повторять их.</p>
     <text-author>Джордж Сантаяна, Жизнь разума</text-author>
    </epigraph>
    <section>
     <p>Одним из наиболее важных свойств, которые интересуют нас в интерфейсе пользователя, является кнопка UNDO – единственная кнопка, которая прощает нам наши ошибки. Еще лучше, если графическая среда поддерживает многоуровневый откат и повтор так, что можно вернуться назади восстановить статус-кво, существовавший за несколько минут до этого. Но как быть, если ошибка произошла на прошлой неделе и за прошедшее время компьютер включался и выключался раз десять? Это и является одним из многих преимуществ системы управления исходным текстом программ: она является своего рода гигантской клавишей UNDO – машиной времени, работающей в масштабах проекта, которая способна вернуть вас к безмятежным дням на прошлой неделе, когда программа реально компилировалась и запускалась.</p>
     <p>Системы управления исходным текстом (или в более широком смысле системы управления конфигурацией) отслеживают любые изменения, которые вносятся в исходный текст и документацию. Лучшие системы также могут отслеживать версии компилятора и операционной системы. С помощью системы управления исходным текстом, сконфигурированной надлежащим образом, всегда можно вернуться к предыдущей версии программы.</p>
     <p id="_ednref21">Но система управления исходным текстом (английская аббревиатура SCCS) <a l:href="#n_21">[21]</a>дает много больше, чем просто отмену ошибочных действий. Хорошая система позволяет отслеживать изменения и дает ответы на характерные вопросы: "Кто внес изменения в данную строку текста? В чем состоит разница между версией, существующей на данный момент, и версией, существовавшей на прошлой неделе? Сколько строк текста программы были изменены в данной версии? Какие файлы изменяются чаще всего?" Подобная информация бесценна при отслеживании ошибок, аудите, оценке производительности и качества.</p>
     <p>Система управления также позволяет проводить идентификацию версий программы. После идентификации вы всегда сможете вернуться к нужной версии и восстановить ее, независимо от более поздних изменений.</p>
     <p>Системы управления часто используются для работы с ответвлениями в древовидной схеме разработки. Например, после выпуска некоторой программы обычно возникает желание продолжить ее разработку и выпустить новую версию. Но при этом приходится работать над ошибками в текущей версии и передавать заказчикам исправления. Фрагменты с устраненными ошибками должны перейти (если это приемлемо) в последующую версию, но к заказчикам незаконченная программа не должна попасть. Всякий раз, когда вы генерируете версию в целом, при помощи системы управления можно сгенерировать и ответвления в древовидной схеме разработки. Ошибки, имеющиеся в ответвлении, устраняются с одновременным продолжением работ по усовершенствованию ствола. Так как устраняемые ошибки могут иметь отношение и к стволу, то некоторые системы управления позволяют автоматически распространить определенные изменения, сделанные в ответвлении, обратно на ствол древовидной схемы.</p>
     <p>Системы управления могут сохранять поддерживаемые ими файлы в централизованной БД проекта – лучшем кандидате на архивирование.</p>
     <p>И наконец, некоторые программные продукты позволяют двум и более пользователям работать одновременно с одним и тем же набором файлов и даже вносить изменения в один и тот же файл одновременно. Затем система управляет слиянием изменений при возвращении этих файлов в централизованную БД проекта. При всей кажущейся рискованности на практике подобные системы полезны в работе с проектами различного масштаба.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 23: Всегда используйте управление исходным текстом программы</p>
     </cite>
     <empty-line/>
     <p>Всегда. Даже если ваша команда состоит из одного человека и продолжительность проекта составляет одну неделю. Даже если это прототип на выброс. Даже если материал, с которым вы работаете, не является исходным текстом программы. Убедитесь, что все находится под контролем – документация, номера телефонов, записки поставщикам, сборочные файлы, процедуры сборки и выпуска, крохотный сценарий (в оболочке), прожигающий эталонный компакт-диск, словом – все. Обычно мы используем управление исходным текстом в отношении всего того, что мы набираем (включая текст данной книги). И даже если мы не работаем над проектом, каждодневная работа надежно сохраняется в централизованной БД.</p>
     <subtitle>Сборки и управление исходным текстом</subtitle>
     <p>Если весь проект находится под защитой системы управления исходным текстом, то он обладает огромным скрытым преимуществом: вы можете создавать сборки программы, которые являются автоматическими и воспроизводимыми.</p>
     <p>Механизм сборки проекта может автоматически извлекать последнюю версию исходного текста из централизованной БД. Этот механизм может запускаться среди ночи, после того как все сотрудники (будем надеяться на это) уйдут домой. Вы можете автоматически прогонять регрессионные тесты для гарантии того, что исходные тексты, созданные в течение рабочего дня, ничего не нарушили. Автоматизация сборки обеспечивает согласованность – отсутствуют ручные процедуры, и вам не нужно, чтобы разработчики помнили о копировании созданного ими текста в специальную сборочную область.</p>
     <p>Сборка является воспроизводимой, так как вы всегда можете заново собрать исходный текст в том виде, в каком он существовал на указанную календарную дату.</p>
    </section>
    <section>
     <title>
      <p>Команда, в которой я работаю, не использует систему управления исходным текстом</p>
     </title>
     <p>Как же им не стыдно! Звучит как перспектива провести очередную Реформацию! Однако, пока вы дождетесь, когда они увидят свет во тьме, стоит попробовать внедрить свою, частную систему управления. Воспользуйтесь одним из бесплатных инструментальных средств, указанных в приложении А, и обратите особое внимание на то, чтобы результаты вашей личной работы были надежно сохранены в централизованной БД. Хоть это и может показаться двойной работой, мы с уверенностью можем сказать, что эта процедура сбережет ваши нервы (и сэкономит деньги, отпущенные на проект) в тот момент, когда вам впервые придется ответить на вопросы типа "Что ты натворил с модулем xyz?" и "Кто разрушил сборку?" Подобный подход поможет вам убедить руководство в том, что система управления исходным текстом действительно работает.</p>
     <p>Не забывайте, что система управления в равной степени применима и к тому, с чем вы имеете дело помимо основной работы.</p>
    </section>
    <section>
     <title>
      <p>Программы управления исходным текстом</p>
     </title>
     <p>В приложении А приведены интернет-ссылки (URL) на типичные системы управления исходным текстом – некоторые из них являются коммерческими продуктами, другие же распространяются бесплатно. Имеются и другие программные продукты – обратите внимание на ссылки на часто задаваемые вопросы (FAQ) по управлению конфигурацией.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Ортогональность</p>
     <p>• Преимущество простого текста</p>
     <p>• Все эти сочинения</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Даже если у вас нет возможности использовать систему управления исходным текстом на работе, установите RCS или CVS на личный компьютер. Воспользуйтесь ей для управления вашими домашними проектами, документами, которые вы составляете, и (возможно) изменениями в конфигурации самой компьютерной системы.</p>
     <p>• Обратите внимание на некоторые из проектов с открытыми исходными текстами, архивы которых доступны в сети Интернет (например, Mozilla [URL 51], KDE[URL 54] и Gimp [URL 55]). Каким образом вы получаете обновления исходного текста? Как вы вносите изменения – сам проект регулирует доступ, или же разрешает внесение изменений?</p>
    </section>
   </section>
   <section>
    <title>
     <p>18</p>
     <p>Отладка</p>
    </title>
    <epigraph>
     <p>Смотреть в себя, зреть муки свои, Зная, что сам ты виновник мук, – Вот истинное страданье.</p>
     <text-author>Софокл, Аякс</text-author>
    </epigraph>
    <section>
     <p>Английское слово bug (ошибка) используется для описания "объекта, вызывающего ужас" уже начиная с XIV в. Контр-адмирал д-р Грэйс Хоппер (создатель языка COBOL) оказался первым, кто наблюдал компьютерного «жучка», буквально – моли, попавшей в одно из электромеханических реле, из которых состояли первые вычислительные системы. Когда техника попросили объяснить, почему машина ведет себя не так, как надо, он сообщил, что в системе "завелся жучок", и в соответствии со своими должностными обязанностями приклеил его клейкой лентой вместе с крылышками и всем остальным в рабочий журнал.</p>
     <p>К сожалению, мы до сих пор встречаемся с «жучками» в системе, хотя и не из рода перепончатокрылых. Но значение этого слова, принятое в XIV в. – привидение – возможно более применимо сейчас, нежели тогда. Изъяны в программном обеспечении проявляют себя по-разному – от превратно истолкованных требований до ошибок в написании исходных текстов. К сожалению, возможности современных компьютерных систем все еще ограничены исполнением только того, что мы им прикажем, а не обязательно того, что мы хотим, чтобы они сделали.</p>
     <p>Никто не создает совершенное программное обеспечение, так что примите как данность тот факт, что отладка будет занимать большую часть вашего рабочего дня. Рассмотрим некоторые аспекты, вовлеченные в процесс отладки, и некоторые универсальные стратегии поиска неуловимых ошибок.</p>
    </section>
    <section>
     <title>
      <p>Психология процесса отладки</p>
     </title>
     <p>Сама по себе отладка является щепетильным и нервирующим моментом для многих разработчиков. Вместо того, чтобы наброситься на нее, как на головоломку, которая должна быть решена, вы можете встретиться с отрицанием, неубедительными отговорками и просто апатией.</p>
     <p>Воспользуйтесь тем фактом, что отладка представляет собой не что иное, как решение задачи, и атакуйте ее именно с этой позиции.</p>
     <p>Обнаружив чью-то ошибку, вы можете тратить время и силы на обвинения мерзкого преступника, ее допустившего. В некоторых сферах деятельности это является частью культуры и обладает свойством катарсиса. Однако в технической сфере вы хотите сконцентрироваться на устранении проблемы, а не на выяснении, кто виноват.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 24: Занимайтесь устранением проблемы, а не обвинениями</p>
     </cite>
     <empty-line/>
     <p>На самом деле, не важно, кто виноват в ошибке – вы или кто-то другой. Это все равно остается вашей проблемой.</p>
    </section>
    <section>
     <title>
      <p>Умонастроение отладки</p>
     </title>
     <epigraph>
      <p>Обманывать самого себя легче всего.</p>
      <text-author>Эдвард Булвер-Литтон, Отвергнутый</text-author>
     </epigraph>
     <p>Перед тем как начать отладку, важно настроиться. Необходимо отключить многие средства безопасности, которые вы ежедневно используете для защиты собственного «я», сбросить проектный прессинг, под которым вы можете находиться, и успокоиться. Прежде всего помните первое правило отладки:</p>
     <empty-line/>
     <cite>
      <p>Подсказка 25: Не паникуйте</p>
     </cite>
     <empty-line/>
     <p>Легко впасть в панику, особенно если вы связаны контрольными сроками или работаете с нервным руководителем или заказчиком, стоящим у вас над душой в то время, когда вы пытаетесь найти причину ошибки. Но очень важно сделать шаг назад и подумать над тем, что же на самом деле является первопричиной симптомов, которые, по вашему убеждению, являются ошибкой.</p>
     <p>Если ваша первая реакция после обнаружения ошибки или просмотра отчета об ошибках сводится к восклицанию "Это невозможно!", то вы явно ошиблись. Не стоит тратить ни одного нейрона на цепочку умозаключений, начинающуюся с фразы "Но этого не может быть!", потому что совершенно ясно, что может, и это произошло.</p>
     <p>Остерегайтесь близорукости во время отладки. Воспротивьтесь желанию устранить лишь те признаки, которые видны невооруженным глазом: скорее всего, действительная причина может находиться в нескольких шагах от того, что вы наблюдаете, и может включать ряд сопутствующих проблем. Всегда пытайтесь обнаружить глубинную причину проблемы, а не ее частное проявление.</p>
    </section>
    <section>
     <title>
      <p>С чего начать?</p>
     </title>
     <p>Перед тем как взглянуть на ошибку, убедитесь, что вы работаете над программой, которая прошла стадию компиляции чисто – без предупреждений. Обычно мы устанавливаем уровни предупреждения компиляторов максимально высокими. Нет смысла тратить время в попытках найти проблему, которую не смог найти и компилятор! Необходимо сосредоточиться на более сложных насущных проблемах.</p>
     <p>Пытаясь решить любую проблему, нужно собрать все относящиеся к делу данные. К сожалению, отчеты об ошибках не являются точной наукой. Легко впасть в заблуждение из-за совпадений, а вы не можете позволить себе тратить время на исследование причин совпадений. Необходимо быть точным в ваших наблюдениях изначально.</p>
     <p>Точность отчетов об ошибках снижается еще больше, когда их просматривает третья сторона, в реальности может оказаться, что вам придется наблюдать за действиями пользователя, который сообщил об ошибке, чтобы добиться достаточного уровня детализации.</p>
     <p>Однажды один из авторов книги (Энди Хант) работал над большим графическим приложением. Дело уже шло к выпуску готовой версии, когда тестировщики сообщили о том, что приложение «падало» всякий раз, когда они проводили черту при помощи конкретной кисти. Программист начал оспаривать это утверждение, говоря о том, что все в порядке: он сам пытался выполнять аналогичную прорисовку, и все работало превосходно. Обмен любезностями продолжался в течение нескольких дней, когда напряженность вдруг резко возросла.</p>
     <p>В конце концов все собрались в одной комнате. Тестировщик выбрал нужный инструмент (кисть) и провел черту, из ВЕРХНЕГО ПРАВОГО угла к НИЖНЕМУ ЛЕВОМУ. Приложение «упало»! Программист тихонько охнул, а затем виновато проблеял, что при тестировании он проводил черту только из НИЖНЕГО ЛЕВОГО угла к ВЕРХНЕМУ ПРАВОМУ, и при этом ошибка никак не выявлялась.</p>
     <p>В этой истории есть два момента, заслуживающих внимания:</p>
     <p>• Может возникнуть необходимость в опросе пользователя, который сообщил о присутствии ошибки, для того чтобы собрать больше данных, чем было дано изначально.</p>
     <p>• Искусственные тесты (такие, как одна-единственная черта, проведенная «кистью» снизу вверх) недостаточны для испытания приложения. Необходимо осуществлять тестирование обоих граничных условий и реалистических шаблонов действия конечного пользователя. Это нужно делать систематически (см. "Безжалостное тестирование").</p>
    </section>
    <section>
     <title>
      <p>Стратегии отладки</p>
     </title>
     <p>Если вы уверены, что знаете, в чем дело, пора выяснить, как сама программа относится к происходящему.</p>
     <subtitle>Воспроизведение ошибок</subtitle>
     <p>Нет, наши ошибки на самом деле не размножаются (хотя некоторые из них возможно достаточно стары, чтобы делать это уже на законных основаниях). Мы говорим о другом способе размножения.</p>
     <p>Начать устранение ошибки лучше всего с придания ей свойства воспроизводимости. В конце концов, если вы не можете воспроизвести ее, то как узнать, что она вообще устранена?</p>
     <p>Но нам нужно нечто большее, чем ошибка, которая воспроизводится с помощью некоторой последовательности операций; нам нужна ошибка, которую можно воспроизвести при помощи одной-единственной команды. Процедура устранения ошибки многократно усложняется, когда вам приходится выполнять 15 операций, чтобы добраться до места, где эта ошибка выявляется. В ряде случаев вы можете интуитивно понять, как можно устранить ошибку, заставив себя абстрагироваться от тех обстоятельств ее проявления.</p>
     <p>Другие идеи, касающиеся вышеприведенного, представлены в разделе "Вездесущая автоматизация".</p>
     <subtitle>Сделайте ваши данные наглядными</subtitle>
     <p>Пристальный взгляд на данные, с которыми работает программа, во многих случаях является лучшим способом увидеть то, что же она делает (или собирается делать). Простейшим примером этого является прямолинейный подход типа "переменная = значение", который может быть реализован в виде печатного текста или в виде полей диалогового окна (списка) графического интерфейса.</p>
     <p>Но вы можете проникнуть в суть данных намного глубже, используя отладчик, который позволяет визуализировать данные и все существующие отношения между ними. Существуют отладчики, которые могут представить ваши данные с высоты полета над трехмерным ландшафтом виртуальной реальности или в виде трехмерного временного графика сигналов, или же просто в виде обычных блок-схем, как показано на рисунке 3.2. По мере того как вы перемещаетесь шаг за шагом по вашей программе, рисунки, подобные этим, могут оказаться ценнее, чем тысячи слов, если ошибка, за которой вы охотились, неожиданно выпрыгивает на вас, как зверь на ловца.</p>
     <p>Даже если отладчик имеет ограниченную поддержку визуализации данных, вы все равно можете проводить визуализацию сами – либо вручную, с карандашом и бумагой, либо с помощью внешних программ построения графиков.</p>
     <p>В отладчике DDD имеются некоторые средства визуализации, которые распространяются бесплатно (см. [URL 19]). Интересно заметить, что отладчик DDD работает со многими языками, включая Ada, С, С++, Fortran, Java, Modula, Pascal, Perl и Python (явно ортогональная конструкция).</p>
     <empty-line/>
     <p>Рис. 3.2. Пример отладочной схемы циркулярного связанного списка. Стрелки указывают на узлы.</p>
     <image l:href="#i_004.jpg"/>
     <empty-line/>
     <subtitle>Трассировка</subtitle>
     <p>Отладчики обычно сосредоточены на состоянии программ в данный момент. В ряде случаев вам необходимо нечто большее – отследить состояние программы или структуры данных через какое-то время. Если посмотреть на трассировку стека, то можно лишь сделать вывод, как попасть в эту точку напрямую. Это не дает информации о том, что вы делали до этой последовательности обращений, что особенно важно для систем, основанных на событиях.</p>
     <p>Операторы трассировки представляют собой небольшие диагностические сообщения, которые выводятся на экран или в файл и говорят о том, что "это здесь" и "х = 2". Это примитивная методика, сравнимая с отладчиками в стиле ИСР, но она особенно эффективна при диагностировании некоторых классов ошибок, с которыми отладчики справиться не могут. Трассировка имеет большое значение в любой системе, где время само по себе является фактором: в одновременных процессах, системах реального времени и приложениях, основанных на событиях.</p>
     <p>Вы можете использовать операторы трассировки для того, чтобы "вбуравиться" в текст. То есть вы можете добавлять элементы трассировки по мере продвижения вниз по дереву обращений.</p>
     <p>Трассировочные сообщения должны быть представлены в регулярном, согласованном формате; возможно, вам захочется провести их синтаксический анализ в автоматическом режиме. Например, если вам необходимо отследить утечку ресурсов (несбалансированные операции открытия и закрытия файлов), вы можете трассировать каждый из операторов open и close в файле журнала. Обрабатывая файл журнала с помощью программы на языке Perl, вы легко обнаружите, где встречался оператор-нарушитель open.</p>
     <subtitle>Искаженные переменные! Проверьте их окружение</subtitle>
     <p>Иногда вы исследуете переменную, ожидая увидеть небольшое целое значение, а вместо этого получаете нечто вроде 0x6e696614d. Перед тем как засучив рукава всерьез приняться за отладку, стоит посмотреть на память вокруг искаженного значения. Часто это дает вам ключ к пониманию. В данном случае, изучение окружающей памяти в символьном виде дает следующую картину:</p>
     <image l:href="#i_005.jpg"/>
     <p>Похоже, что кто-то указал адрес поверх счетчика цикла. Теперь, мы знаем где искать.</p>
     <subtitle>Рассказ о резиновом утенке</subtitle>
     <p id="_ednref22">Очень простая, но весьма полезная методика поиска причины проблемы, состоит в том, чтобы разъяснить ее кому-либо. Ваш собеседник должен заглядывать через ваше плечо на экран монитора и время от времени утвердительно кивать головой (подобно резиновому утенку, ныряющему и выныривающему в ванне). Ему не нужно говорить ни слова; простое, последовательное объяснение того, что же должна делать ваша программа, часто приводит к тому, что проблема выпрыгивает из монитора и объявляет во всеуслышанье: "А вот и я!" <a l:href="#n_22">[22]</a>.</p>
     <p>Звучит просто, но разъясняя проблему вашему собеседнику, вы должны явно заявить о тех вещах, которые считаете само собой разумеющимися при просмотре текста вашей программы. Поскольку вам приходится озвучивать некоторые из этих положений, вы можете по-новому взглянуть на суть данной проблемы – неожиданно для самого себя.</p>
     <subtitle>Процесс исключения</subtitle>
     <p>В большинстве проектов отлаживаемая вами программа может представлять собой смесь прикладных программ, написанных лично вами и другими сотрудниками вашей проектной команды, а также программные продукты, созданные независимыми производителями (база данных, обеспечение связи, графические библиотеки, специализированные протоколы связи или алгоритмы, и т. д.) и платформенное окружение (операционная система, системные библиотеки и компиляторы).</p>
     <p>Вероятно, ошибка кроется в операционной системе, компиляторе или продукте независимого производителя – но это не должно быть первой мыслью, приходящей вам на ум. Скорее всего, ошибка существует в тексте разрабатываемого приложения. Обычно выгоднее полагать, что прикладная программа некорректно обращается к библиотеке, нежели то, что нарушена сама библиотека. Даже если проблема заключается в продукте независимого производителя, то перед тем, как представлять отчет об ошибках, вам в любом случае надлежит исключить ошибки в вашей собственной программе.</p>
     <p>Однажды мы работали над проектом, и старший инженер был уверен, что в системе Solaris имелось нарушение системного вызова select. Никакие убеждения или логические построения не могли изменить сложившегося у него мнения (тот факт, что все другие сетевые приложения работали прекрасно, не принимался во внимание). Неделями он составлял программы обхода этого вызова, которые, по какой-то странной причине, не способствовали решению проблемы. И когда в конце концов он был вынужден сесть за стол и прочесть документацию по вызову select, он обнаружил, в чем заключалась проблема, и исправил ее за несколько минут. Теперь мы используем выражение "вызов select нарушен" как деликатное напоминание, в тех случаях, когда один из нас начинает обвинять систему в наличии ошибки, которая, скорее всего, является его собственной.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 26: Ищите ошибки вне пределов операционной системы</p>
     </cite>
     <empty-line/>
     <p>Помните: увидев следы копыт, думайте о лошадях, а не о зебрах. Скорее всего, операционная система не нарушена. Да и база данных находится в прекрасном состоянии.</p>
     <p>Если вы "внесли всего одно изменение", и система перестала работать, то, скорее всего, именно оно, прямо или косвенно, несет ответственность за случившееся, каким бы притянутым за уши ни казалось это утверждение. Иногда то, что изменяется, находится вне вашего управления: новые версии операционной системы, компилятора, базы данных или программы независимых производителей могут вызывать проблемы и с изначально корректной программой. В ней могут обнаружиться новые ошибки. Ошибки, которые были устранены с помощью программы обхода, преодолевают действие этой программы. Если изменяются API, то изменяются и функциональные возможности; короче говоря, это уже новая история, и вам надлежит провести повторное тестирование системы в новых сложившихся условиях. Так что не спускайте глаз с графика выполнения проекта, если собираетесь провести модернизацию; может быть, придется подождать до выпуска новой версии.</p>
     <p>Однако если вы не знаете, с чего начать, то всегда можете положиться на старый добрый двоичный поиск. Обратите внимание, не проявляются ли симптомы в одной из двух точек в тексте программы, находящихся далеко друг от друга. Затем посмотрите на точку, расположенную между ними. При наличии проблемы, ошибка «сидит» между начальной и срединной точкой; в противном случае она «сидит» между срединной и конечной точками. Продолжая действовать в этом ключе, вы сужаете область поиска, пока не выявите ошибку.</p>
    </section>
    <section>
     <title>
      <p>Элемент удивления</p>
     </title>
     <p>Если ошибка вызвала у вас удивление (до того, что вы еле слышно бормочете "Этого не может быть"), стоит провести переоценку истин, дорогих вашему сердцу. А все ли граничные условия вы протестировали в подпрограмме связанного списка – той, которую вы считали непробиваемой и которая, по всей вероятности, не могла стать причиной этой ошибки? А другой фрагмент текста программы, который вы использовали в течение нескольких лет, – не мог ли он все еще таить в себе ошибку?</p>
     <p>Конечно, мог. То удивление, которое вы испытываете, когда что-то идет не так как надо, прямо пропорционально уровню доверия и веры в правильность прогоняемой программы. Поэтому, столкнувшись с «удивительным» отказом в работе программы, вы должны осознать, что одно или более ваших предположений неверны. Не приукрашивайте подпрограмму или фрагмент текста программы, вызвавший ошибку, только потому, что «знаете», что он работает нормально. Вначале докажите это. Докажите это в реальном контексте, с реальными данными, с реальными граничными условиями.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 27: Не предполагайте – доказывайте</p>
     </cite>
     <empty-line/>
     <p>Столкнувшись с удивительной ошибкой, помимо простого ее устранения, необходимо определить, а почему этот сбой не был выявлен раньше. Подумайте, не стоит ли внести поправки в модульные или иные тесты с тем, чтобы они могли выявить эту ошибку.</p>
     <p>Кроме того, если ошибка является результатом неправильных данных, которые распространились по нескольким уровням, перед тем как вызвать взрыв, посмотрите, может быть, более усовершенствованная процедура проверки параметров в этих подпрограммах смогла бы помешать ее распространению (см. обсуждение процедур досрочного сбоя и утверждений разделе "Мертвые программы на лгут").</p>
     <p>Пока вы собираетесь заняться этим, выясните, есть ли в программе другие фрагменты, подверженные воздействию той же ошибки? Пришло время отыскать их и устранить. Убедитесь: что бы ни произошло, вы будете знать, произойдет ли это снова.</p>
     <p>Если устранение этой ошибки заняло много времени, спросите себя, а почему? Можете ли вы сделать что-нибудь, чтобы облегчить устранение этой ошибки в следующий раз, например, встроить усовершенствованные обработчики прерываний (для тестирования) или написать программу-анализатор файла журнала?</p>
     <p>И наконец, если ошибка является результатом чьего-то неправильного предположения, обсудите проблему со всей командой: если имеется недопонимание со стороны одного сотрудника, то возможно, он не одинок здесь.</p>
     <p>Проделайте все это, и наверняка в следующий раз вы будете избавлены от подобных сюрпризов.</p>
    </section>
    <section>
     <title>
      <p>Контрольные вопросы при отладке</p>
     </title>
     <p>• Является ли проблема прямым результатом фундаментальной ошибки или просто ее признаком?</p>
     <p>• Ошибка действительно «сидит» в компиляторе? В операционной системе? Или в вашей собственной программе?</p>
     <p>• Если бы вам пришлось подробно объяснить вашему коллеге, в чем состоит проблема, что бы вы ему сказали?</p>
     <p>• Если подозрительная программа проходит модульное тестирование, то является ли оно достаточно полным? Что произойдет, если вы прогоняете модульный тест с реальными данными?</p>
     <p>• Существуют ли условия, вызвавшие данную ошибку, где-либо еще в системе?</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Программирование на основе утверждений</p>
     <p>• Программирование в расчете на совпадение</p>
     <p>• Вездесущая автоматизация</p>
     <p>• Безжалостное тестирование</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Отладка сама по себе является вопросом.</p>
    </section>
   </section>
   <section>
    <title>
     <p>19</p>
     <p>Обработка текста</p>
    </title>
    <p>Прагматики обрабатывают тексты программ так, как столяры придают форму деревянным заготовкам. В предыдущих разделах обсуждались некоторые специфические инструментальные средства – оболочки, редакторы, отладчики – те, что мы используем в работе. Они подобны столярным долотам, ножовкам и рубанкам – инструментам, которые предназначены для выполнения одной или двух конкретных работ. Однако время от времени нам приходится выполнять некоторые преобразования, которые не могут быть осуществлены с помощью походного инструментария. В таких случаях нам необходим универсальный инструмент для обработки текста.</p>
    <p id="_ednref23">Языки, предназначенные для обработки текста, играют в программировании ту же роль, что станки <a l:href="#n_23">[23]</a> в столярном деле. Они издают шум, неуклюжи и представляют собой грубую силу. Если при работе с ними вы совершаете ошибку, то разрушенными могут оказаться целые фрагменты. Некоторые клятвенно уверяют, что этим средствам нет места в инструментарии. Но в хороших руках и станки, и языки обработки текста могут быть невероятно мощными и гибкими. Вы можете быстро придать форму материалу, делать стыки и вырезать по дереву. При надлежащем использовании эти инструменты обладают удивительной тонкостью и ловкостью. Но для овладения ими требуется время.</p>
    <p>Число хороших языков обработки текста постоянно увеличивается. Разработчики программ для Unix часто любят использовать мощь их командных оболочек, усиленных инструментальными средствами типа awk и sed. Тем, кто предпочитает более структурированные средства, больше по душе объектно-ориентированный характер языка Python [URL 9]. Выбор некоторых падает на Tel [URL 23]. Случается, и мы предпочитаем язык Perl [URL 8] для написания коротких сценариев.</p>
    <p>Эти языки являются важными узаконивающими технологиями. Используя их, вы можете быстро решить все проблемы с утилитами и создать прототипы идей – при работе с обычными языками на это потребовалось бы раз в пять-десять больше времени. И этот умножающий коэффициент кардинально важен для экспериментов, которые мы проводим. Потратить 30 минут на воплощение сумасшедшей идеи намного лучше, чем потратить на то же пять часов. Потратить один день на автоматизацию важных составляющих проекта – нормально, потратить неделю – может быть, и нет. В книге "The Practice of Programming" [KP99], Керниган и Пайк реализовали одну и ту же программу на пяти различных языках. Самой короткой оказалась версия на языке Perl (17 строк по сравнению со 150 строками на языке С). Работая с языком Perl, вы можете обрабатывать текст, взаимодействовать с другими программами, передавать данные по сетям, управлять web-страницами, производить арифметические действия с произвольной точностью и писать программы, которые выглядят наподобие клятвы Снупи.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 28: Изучите язык обработки текстов</p>
    </cite>
    <empty-line/>
    <p>Чтобы продемонстрировать широту области применения языков обработки текста, в качестве примера мы приводим некоторые приложения, разработанные нами на протяжении последних нескольких лет:</p>
    <p>• <strong>Сопровождение схемы базы данных.</strong> Набор сценариев на языке Perl обрабатывал файл с простым текстом, содержащий определение схемы базы данных и генерировал из него:</p>
    <p>– Инструкции SQL для создания БД</p>
    <p>– Плоские файлы данных для заполнения словаря данных</p>
    <p>– Библиотеки программ на языке С для доступа к БД</p>
    <p>– Сценарии для проверки целостности БД</p>
    <p>– Web-страницы, содержащие описания и блок-схемы БД</p>
    <p>– XML версию схемы</p>
    <p>• <strong>Доступ к свойству Java.</strong> Хорошим тоном в объектно-ориентированном программировании является ограничение доступа к свойствам объекта, что вынуждает внешние классы получать и устанавливать их через методы. Однако в общем случае, когда свойство представлено внутри класса при помощи простого поля, создание метода get и set для каждой переменной представляет собой утомительную механическую процедуру. У нас имеется сценарий Perl, который изменяет исходные файлы и вставляет правильные определения метода для всех переменных, помеченных соответствующим образом.</p>
    <p>• <strong>Генерирование тестовых данных.</strong> У нас имелись десятки тысяч записей, содержащих тестовые данные, рассеянных по нескольким различным файлам разного формата, которые нуждались в соединении и преобразовании в некую форму, пригодную для загрузки в реляционную БД. Программа на Perl справилась с этим за пару часов (и в процессе обнаружила пару ошибок из-за несовместимости в исходных данных).</p>
    <p>• <strong>Написание книг.</strong> Мы придаем важность тому факту, что любая программа, представленная в книге, вначале должна быть протестирована. Большинство программ, приведенных в этой книге, были протестированы. Однако, используя принцип DRY (см. "Пороки дублирования"), мы не хотели копировать и вставлять строки текста из протестированных программ в книгу. Это означало бы, что текст дублируется, поэтому велика вероятность, что мы забудем обновить пример, когда соответствующая программа изменится. В некоторых примерах нам также не хотелось утомлять вас наличием «скелета» программы, необходимым для компиляции и прогона нашего примера. Мы обратились к языку Perl. При форматировании книги вызывался относительно простой сценарий – он извлекал именованный сегмент исходного файла, выделял синтаксические конструкции и преобразовывал результат в язык, который мы используем для подготовки типографского макета книг.</p>
    <p>• <strong>Интерфейс между языками С и Object Pascal.</strong> У заказчика имеется команда разработчиков, пишущих программы на языке Object Pascal, реализованном на персональных компьютерах. Требуется осуществить сопряжение их программы с телом программы, написанной на языке С. Был разработан короткий сценарий на языке Perl, который проводил синтаксический анализ файлов заголовков С, выделяя определения всех экспортированных функций и используемых ими структур данных. Затем сгенерированы модули Object Pascal с записями Pascal для всех структур С и произведен импорт определений процедур для всех функций С. Этот процесс генерирования стал частью сборки, так что при любых изменениях заголовка С происходит автоматическое конструирование нового модуля Object Pascal.</p>
    <p>• <strong>Генерирование интернет-документации.</strong> Многие команды разработчиков публикуют свою документацию на внутренних интернет-сайтах. Авторами написано много программ на языке Perl, которые анализируют схемы баз данных, исходные файлы на С и С++, сборочные файлы и другие исходные тексты проекта для производства требуемой HTML-документации. Авторы также использовали язык Perl для верстки документов со стандартными верхними и нижними колонтитулами и передачи их на интернет-сайт.</p>
    <p>Языки обработки текстов используются почти ежедневно. Многие из идей, описанных в данной книге, могут реализовываться на этих языках проще, чем на любом другом известном языке. Эти языки облегчают написание генераторов текстов программ, которые будут рассмотрены далее.</p>
    <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
    <p>• Пороки дублирования</p>
    <subtitle>Упражнения</subtitle>
    <p>11. В вашей программе на языке С для представления одного из 100 состояний используется перечислимый тип данных. В целях отладки вам хотелось бы иметь возможность вывода состояния на печать в виде строки (в отличие от числа). Напишите сценарий, который осуществляет считывание со стандартного устройства файла следующего содержания (Ответ см. в Приложении В.):</p>
    <p>name</p>
    <p>   state_a</p>
    <p>   state_b</p>
    <p>    :  :</p>
    <p>Создайте файл name.h, содержащий следующие строки: </p>
    <p>extern const char * NAME_names[]</p>
    <empty-line/>
    <p>extern const char * NAME_names[]</p>
    <p>  typedef enum {</p>
    <p>state_a,</p>
    <p>state_b,</p>
    <p>:  :</p>
    <p>} NAME;</p>
    <empty-line/>
    <p>а также файл name.с, содержащий следующие строки:</p>
    <p>const char * NAME_names[] = {</p>
    <p><emphasis>"statea",</emphasis></p>
    <p><emphasis>"state_b"</emphasis></p>
    <p>  :  :</p>
    <p>};</p>
    <empty-line/>
    <p>12. Дописав эту книгу до середины, авторы обнаружили, что не поместили директиву use strict во многие примеры на языке Perl. Напишите сценарий, который просматривает все файлы типа *.pl в некотором каталоге и добавляет директиву use strict в конец начального блока комментариев ко всем файлам, где это не было сделано ранее. Не забудьте сохранить резервную копию всех файлов, в которые внесены изменения. (Ответ см. в Приложении В.)</p>
   </section>
   <section>
    <title>
     <p>20</p>
     <p>Генераторы текстов программ</p>
    </title>
    <section>
     <p>Если столярам приходится снова и снова изготавливать одну и ту же деталь, они идут на хитрость. Они делают для себя шаблон. Если они сделают шаблон один раз, то время от времени они могут воссоздавать некоторый фрагмент работы. Шаблон избавляет столяров от излишней сложности и снижает вероятность ошибки, позволяя мастеру сосредоточиться на качестве работы.</p>
     <p>Программисты часто оказываются в аналогичном положении. От них требуется достижения той же функциональности, но в различных контекстах. Информация должна быть воспроизведена в различных местах. А иногда, экономя на повторном наборе текста, мы просто защищаем самих себя от болей в запястье.</p>
     <p>Подобно столяру, вкладывающему свое время в шаблон, программист может построить генератор текста. Его можно использовать всю оставшуюся жизнь проекта практически бесплатно.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 29: Пишите текст программы, которая пишет текст программы</p>
     </cite>
     <empty-line/>
     <p>Существует два основных типа генераторов текста:</p>
     <p>1. Пассивные генераторы текста запускаются один раз для достижения результата. Начиная с этого момента результат становится независимым – он отделяется от генератора текста. Мастера, обсуждаемые в разделе "Злые волшебники", вместе с некоторыми средствами CASE являются примерами пассивных генераторов текста.</p>
     <p>2. Активные генераторы текста используются всякий раз, когда возникает необходимость в результатах их работы. Этот результат создается по принципу "выбросить и забыть" – он всегда может быть воспроизведен с помощью генератора текста. Зачастую активные генераторы считывают некоторую форму сценария или управляющего файла для получения конечного результата.</p>
    </section>
    <section>
     <title>
      <p>Пассивные генераторы</p>
     </title>
     <p>Пассивные генераторы текста экономят время, необходимое на набор текста. Как только результат получен, он становится полностью приспособленным для использования в качестве исходного файла в данном проекте; он должен быть отредактирован, скомпилирован и передан системе управления исходным текстом, как и любой другой файл. О его происхождении никто и не вспомнит. Пассивные генераторы текста применяются во многих случаях:</p>
     <p>• <emphasis>Создание новых исходных файлов.</emphasis> Пассивный генератор текста может создавать шаблоны, директивы управления исходным текстом, сведения об авторских правах и стандартные блоки комментариев для каждого нового файла в некотором проекте. Мы настроили наши редакторы на выполнение этого действия всякий раз при создании нового файла: при редактировании новой программы на языке Java в новом буфере редактора автоматически окажутся уже заполненные блок комментариев, директива пакета и описание структурного класса.</p>
     <p>• <emphasis>Осуществление двоичных преобразований в языках программирования.</emphasis> Мы начали писать эту книгу, используя систему troff, но после пятнадцатого раздела перешли на LaTeX. Мы написали генератор текста, который считывал исходный текст из troff и преобразовывали его в формат LATЈX. Точность составила 90 %; остальное мы делали вручную. Это является интересной особенностью пассивных генераторов текста: они не должны отличаться абсолютной точностью. Вы выбираете, какое усилие необходимо вложить в генератор, в сравнении с энергией, которую вы тратите на устранение ошибок в выходной информации.</p>
     <p>• <emphasis>Создание таблиц поиска и других ресурсов, вычисление которых является дорогой операцией.</emphasis> Вместо того, чтобы вычислять тригонометрические функции, во многих старых графических системах использовались таблицы синусов и косинусов. Обычно эти таблицы создавались пассивным генератором текста и затем копировались в исходный текст программы.</p>
    </section>
    <section>
     <title>
      <p>Активные генераторы текста</p>
     </title>
     <p>Пассивные генераторы текста являются не более чем удобством, но их активные родственники являются необходимостью, если вы хотите следовать принципу DRY. С помощью активного генератора текста вы можете использовать представление некоторого фрагмента знания и преобразовать его во все формы, необходимые вашему приложению. Это не является дублированием, поскольку эти формы являются расходным материалом и создаются генератором текста по мере необходимости (отсюда термин "активный").</p>
     <p>Когда бы вам ни приходилось организовывать совместную работу двух совершенно разных сред, стоит подумать об использовании активных генераторов текста.</p>
     <p>Допустим, вы разрабатываете приложение БД. В этом случае вы имеете дело с двумя средами – базой данных и языком программирования, который используется для доступа к БД. У вас есть схема, и вам необходимо определить низкоуровневые конструкции, отражающие компоновку определенных таблиц БД. Вы могли бы просто запрограммировать их напрямую, но при этом нарушается принцип DRY: знание схемы было бы выражено дважды. Если схема меняется, вам необходимо помнить и о соответствующем изменении текста программы. Если из таблицы удаляется столбец, а база текста программы не меняется, то может статься, что ошибка не проявится даже при компиляции. Первый раз вы узнаете об этом во время тестирования, когда начнутся сбои (или же от пользователя).</p>
     <empty-line/>
     <p>Рис. 3.3. Активный генератор создает текст программы из схемы базы данных</p>
     <image l:href="#i_006.jpg"/>
     <p>Альтернативой этому является использование активного генератора текста – берется схема и используется для генерации исходного текста конструкций, как показано на рисунке 3.3. Теперь при любом изменении схемы будет происходить и автоматическое изменение программы, используемой для доступа к ней. При удалении столбца исчезает и соответствующее поле в конструкции, и любая высокоуровневая программа, использующая этот столбец, не пройдет компиляцию. Ошибку удалось заметить во время компиляции, а не в процессе сборки. Конечно, эта схема работает только в том случае, если вы сделаете генерацию текста частью самого процесса сборки <a l:href="#n_24">[24]</a>.</p>
     <p>Другим примером слияния сред с помощью генераторов текста является случай, когда в одном и том же приложении использованы различные языки программирования. Для того чтобы общаться, каждой программной базе необходима некоторая общая информация – например, структуры данных, форматы сообщений и имена полей. Вместо того, чтобы дублировать эту информацию, используйте генератор текста. В ряде случаев можно проводить синтаксический анализ информации из исходных файлов на одном языке и использовать ее для генерации текста на другом. Хотя зачастую легче выразить ее более простым, независимым от языка представлением и сгенерировать программу для обоих языков, как показано на рисунке 3.4. Также можно посмотреть ответ к упражнению 13 (см. Приложение В) в качестве примера того, как отделить синтаксический анализ представления плоского файла от генерации текста.</p>
    </section>
    <section>
     <title>
      <p>Генераторы текста не должны быть слишком сложными</p>
     </title>
     <p>Весь этот разговор об активном «этом» и пассивном «том», может создать у вас впечатление, что генераторы текста – сложные звери. Им не надо быть сложными. Обычно самой сложной частью является синтаксический анализатор, который обрабатывает входной файл. Не усложняйте входной формат, и генератор текста станет простым. Обратите внимание на ответ к упражнению 13 (см. Приложение В): в реальности генерация текста представляет собой в основном операторы print.</p>
     <empty-line/>
     <p>Рис. 3.4. Генерирование теиста из представления, независимого от языка. Строки во входном файле, начинающиеся с буквы М, означают начало определения сообщения, буква F означает строки с определениями полей, а буква Е – конец сообщения.</p>
     <image l:href="#i_007.jpg"/>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>Генераторы текста не всегда генерируют тексты программ</p>
     </title>
     <p>Хотя многие и примеров, приведенных в данном разделе, демонстрируют тексты программ, которые производят исходные тексты программ, на практике это не всегда так. Вы можете применять генераторы текстов для создания выходного файла в любом формате (HTML, XML, простой текст) – любого текста, который является входной информацией в какой-либо части вашего проекта.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Пороки дублирования</p>
     <p>• Преимущество простого текста</p>
     <p>• Злые волшебники</p>
     <p>• Вездесущая автоматизация</p>
     <subtitle>Упражнения</subtitle>
     <p>13. Напишите генератор текста, который обрабатывает входной файл, изображенный на рисунке 3.4, и генерирует выходной файл на двух языках по вашему выбору. Попытайтесь упростить добавление новых языков. (Ответ см. в Приложении В.)</p>
    </section>
   </section>
  </section>
  <section>
   <title>
    <p>Глава 4</p>
    <p>Прагматическая паранойя</p>
   </title>
   <section>
    <empty-line/>
    <cite>
     <p>Подсказка 30: Невозможно написать совершенную программу</p>
    </cite>
    <empty-line/>
    <p>Ваши чувства задеты? Не стоит принимать эту подсказку близко к сердцу. Примите ее как жизненную аксиому. Заключите ее в объятья. Восславьте ее. Поскольку совершенных программ в природе не существует. За всю краткую историю информатики никому не удалось написать ни одного совершенного фрагмента программы. Маловероятно, что вы станете первым. И когда вы примете это как существующий факт, то перестанете тратить время и энергию впустую в погоне за призрачной мечтой.</p>
    <p>Каким же образом, учитывая эту гнетущую реальность, может прагматик обратить ее себе на пользу? Это и является темой данной главы.</p>
    <p>Каждый знает, что лично он – лучший водитель на планете Земля. Остальному человечеству далеко до него, проезжающего под запрещающие знаки, мотающегося из ряда в ряд, не подающего сигналы поворота, разговаривающего по телефону, читающего за рулем газету и просто не живущего по общепринятым нормам. Так что мы ездим осторожно. Мы обнаруживаем неприятность до того, как она происходит, ожидаем непредвиденное и никогда не оказываемся в положении, из которого не сможем выпутаться сами.</p>
    <p>Аналогия с написанием программ весьма очевидна. Мы постоянно взаимодействуем с программами, написанными другими людьми, программами, которые не отвечают нашим высоким требованиям, и имеем дело с входными параметрами, которые являются или не являются допустимыми. Нас учат программировать с осторожностью. При наличии любого рода сомнений мы проверяем правильность всей поступающей к нам информации. Мы используем утверждения для обнаружения неверных данных. Мы проверяем непротиворечивость, устанавливаем ограничения на столбцы базы данных и вообще высоко ценим самих себя.</p>
    <p>Но прагматики идут дальше. Они не доверяют даже самим себе. Зная, что никто не пишет совершенных программ, включая их самих, прагматики пишут программы, защищаясь от собственных ошибок. Первый рубеж обороны описан в разделе "Проектирование по контракту": клиенты и поставщики должны договориться о правах и обязанностях.</p>
    <p>В разделе "Мертвые программы не лгут" говорится о гарантиях того, что процедура устранения ошибок не нанесет вреда. Поэтому мы попытаемся чаще проверять нашу программу и завершать ее аварийно, если она работает не так, как надо.</p>
    <p>В разделе "Программирование с применением утверждений" описан простой метод проверки "на ходу" – программа, которая активно проверяет ваши предположения.</p>
    <p>Исключения, как и любая другая методика, может причинить больше вреда, чем пользы, если ее применять неправильно. Мы обсудим эти аспекты в разделе "Случаи, когда необходимо использовать исключения".</p>
    <p>По мере того как ваши программы приобретают большую динамику, вы начинаете жонглировать системными ресурсами – памятью, файлами, устройствами и т. п. В разделе "Балансировка ресурсов" предлагаются способы того, как не ронять те предметы, которыми вы жонглируете.</p>
    <p>Поэтому будем осторожными в этом мире несовершенных систем, устаревших временных масштабов, смешных инструментальных средств и невыполнимых требований.</p>
    <cite>
     <p>Если все общество отклоняется от нормы, чтобы понять вас, скорее всего это паранойя.</p>
     <text-author>Вуди Аллен</text-author>
    </cite>
    <empty-line/>
   </section>
   <section>
    <title>
     <p>21</p>
     <p>Проектирование по контракту</p>
    </title>
    <epigraph>
     <p>Ничто не ошеломляет людей так сильно, как здравый смысл и честная сделка.</p>
     <text-author>Ральф Уолдо Эмерсон, Эссе</text-author>
    </epigraph>
    <section>
     <p>Работать с компьютерными системами всегда непросто. Работать с людьми еще сложнее. И поскольку мы (как биологический вид) развиваемся достаточно долго, то у нас явно было больше времени на выяснение природы человеческих взаимоотношений. Некоторые из тех решений, к которым мы пришли в течение нескольких последних тысячелетий, могут быть применены и к созданию программного обеспечения. Одним из лучших способов, с помощью которого можно удостовериться в честности заключаемой сделки, является контракт.</p>
     <p>В контракте определены ваши права и обязанности, а также права и обязанности другой стороны. В дополнение к этому существует соглашение, касающееся юридических последствий, возникающих в том случае, если какая-либо из сторон окажется не в состоянии соблюдать условий контракта.</p>
     <p>Допустим, у вас есть контракт на работу, где определены количество отрабатываемых часов и правила поведения, которым вы обязаны следовать. В ответ фирма платит вам заработную плату и предоставляет другие льготы. Каждая из сторон выполняет свои обязательства, а в результате выигрывают все.</p>
     <p>Эта идея используется во всем мире – и формальным, и неформальным образом – для того, чтобы помочь людям во взаимодействии. Можем ли мы применить этот же принцип, чтобы способствовать взаимодействию программных модулей? Ответ на этот вопрос положительный.</p>
     <subtitle>Проектирование по контракту</subtitle>
     <p id="_ednref25">Бертран Мейер [Меу97b] разработал концепцию проектирования по контракту для языка Eiffel <a l:href="#n_25">[25]</a>. Это простая, но мощная методика, сосредоточенная на документировании (и согласовании) прав и обязанностей программных модулей в целях обеспечения корректности программы. Так что же означает "корректная программа"? Это та программа, которая делает не более и не менее того, на что она претендует. Документирование и подтверждение указанных претензий лежит в основе принципа проектирования по контракту (в дальнейшем, для краткости, будем называть его ППК).</p>
     <p>Каждая функция и метод в программной системе осуществляет некоторое действие. До того как подпрограмма начнет выполнять это действие, она может иметь некие виды на состояние окружающего мира, а также может констатировать состояние окружающего мира на момент завершения работы. Б. Мейер описывает эти виды и претензии следующим образом:</p>
     <p>• <strong>Предусловия.</strong> Требования подпрограммы – то, что обязано быть истинным для того, чтобы подпрограмма могла вызываться. Если предусловия нарушены, программа не должна вызываться ни в коем случае. Ответственность за передачу качественных данных лежит на вызывающей программе (см. врезку ниже "Кто несет ответственность?").</p>
     <p>• <strong>Постусловия.</strong> Состояние окружающего мира на момент завершения работы подпрограммы – то, что гарантируется подпрограммой. Сам факт того, что в ней имеется постусловие, подразумевает, что подпрограмма завершит свою работу: бесконечные циклы не допускаются.</p>
     <p>• <strong>Инварианты класса.</strong> Класс гарантирует, что данное условие всегда истинно с точки зрения вызывающей программы. Во время внутренней обработки подпрограммы инвариант может и не выполняться, но к моменту выхода из подпрограммы и передачи управления обратно к вызывающей программе инвариант обязан быть истинным. (Следует заметить, что класс не может давать неограниченное право доступа для записи к любому элементу данных, участвующему в инварианте.)</p>
     <p>Рассмотрим контракт на создание программы, которая осуществляет вставку значения данных в упорядоченный список уникальных данных. При работе с iContract (препроцессором для языка Java, который можно загрузить с [URL 17]) этот контракт может быть реализован следующим образом:</p>
     <p>/**г</p>
     <p>* ©invariant forall Node n in elements() |</p>
     <p>*   n.prev() != null</p>
     <p>*     implies</p>
     <p>*       n.value().compareTo(n.prev().value()) &gt; 0</p>
     <p> */</p>
     <p>public class DBC_list {</p>
     <p>/**</p>
     <p>* @pre contains(aNode) == false</p>
     <p>* @post contains(aNode) == true</p>
     <p>*/</p>
     <p>public void insertNode(final Node aNode) {</p>
     <p>//…</p>
     <p>Здесь стоит сказать, что элементы в списке всегда должны располагаться в порядке возрастания. При вставке нового элемента этот порядок уже может быть нарушен, и мы гарантируем, что элемент будет обнаружен после того, как он был вставлен в список.</p>
     <p>Вы формулируете эти предусловия, постусловия и инварианты на целевом языке программирования, возможно, с некоторыми расширениями. Например, iContract предоставляет операторы логики предикатов – forall, exists и implies, дополняя обычные конструкции языка Java. Ваши утверждения могут сделать запрос о состоянии любого объекта, к которому имеется доступ со стороны метода, но удостоверьтесь, что запрос не окажет никакого побочного воздействия (см. ниже врезку "Утверждения и побочные условия").</p>
     <subtitle>ППК и параметры-константы</subtitle>
     <p>Во многих случаях постусловие будет использовать параметры, переданные в метод, для проверки правильности поведения. Но если подпрограмме разрешено изменять переданный параметр, то у вас есть возможность обойти условия контракта. В отличие от языка Java, язык Eiffel не позволяет подобных действий. В данном случае для указания наших намерений, сводящихся к неизменяемости параметра в пределах метода, используется ключевое слово final (из языка Java). Это не является "защитой от дурака" – подклассы не имеют ограничений при повторном определении параметра как не являющегося окончательным. В качестве альтернативы можно использовать синтаксис variable@pre (принятый в iContract), чтобы получить исходное значение переменной, существовавшее на момент входа в метод.</p>
     <p>Следовательно, в контракте между подпрограммой и любой потенциально вызывающей ее программой может быть записано следующее:</p>
     <cite>
      <p>"Если вызывающая программа выполняет все предусловия подпрограммы, то подпрограмма гарантирует, что по завершении ее работы все постусловия и инварианты будут истинными".</p>
     </cite>
     <p>Если одна из сторон нарушает условия контракта, то применяется предварительно согласованная мера, например, возбуждается исключение или происходит завершение работы программы. Что бы ни происходило, вы не ошибетесь, утверждая, что нарушение условий контракта есть ошибка. Это происходит далеко не всегда, и поэтому предусловия не должны использоваться для осуществления таких процедур, как проверка правильности данных, вводимых пользователем.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 31: Проектируйте в соответствии с контрактами</p>
     </cite>
     <empty-line/>
     <p>В разделе «Ортогональность» рекомендуется создавать «скромные» программы. В данном случае упор делается на «ленивую» программу: проявите строгость в том, что вы принимаете до начала работы, и обещайте как можно меньше взамен. Следует помнить, что если в контракте указано, что вы принимаете все условия, а взамен обещаете весь мир, то вам придется написать… ну очень большую программу!</p>
     <p>Наследование и полиморфизм являются краеугольными камнями объектно-ориентированных языков программирования и представляют собой область, в которой принцип программирования по контракту может проявиться особенно ярко. Предположим, что вы используете наследование при создании связи типа «это-схоже-с-тем», где один класс «схож-с-тем» (другим) классом. Вероятно, вы действуете в соответствии с принципом замещения, изложенным в книге "Liskov Substitution Principle" [Lis88]:</p>
     <cite>
      <p>"Использование подклассов должно осуществляться через интерфейс базового класса, но при этом пользователь не обязан знать, в чем состоит различие между ними".</p>
     </cite>
     <p>Другими словами, вы хотите убедиться в том, что вновь созданный подтип действительно "схож-с тем" (базовым) типом – что он поддерживает те же самые методы и эти методы имеют тот же смысл. Этого можно добиться при помощи контрактов. Контракт необходимо определить единожды (в базовом классе) с тем, чтобы он применялся к вновь создаваемым подклассам автоматически. Подкласс может (необязательно) использовать более широкий диапазон входных значений или же предоставлять более жесткие гарантии. Но, по крайней мере, подкласс должен использовать тот же интервал и предоставлять те же гарантии, что и родительский класс.</p>
     <p>Рассмотрим базовый класс Java, именуемый java.awt.Component. Вы можете обрабатывать любой визуальный элемент в AWT или Swing как тип Component и не знать, чем является подкласс в действительности – кнопкой, подложкой, меню или чем-то другим. Каждый отдельный элемент может предоставлять дополнительные, специфические функциональные возможности, но, по крайней мере, он должен предоставлять базовые средства, определенные типом Component. Однако ничто не может помешать вам создать для типа Component подтип, который предоставляет методы с правильными названиями, приводящие к неправильным результатам. Вы легко можете создать метод paint, который ничего не закрашивает, или же метод setFont, который не устанавливает шрифт. AWT не обладает контрактами, которые способны обнаружить факт нарушения вами соглашения.</p>
     <p>При отсутствии контракта все, на что способен компилятор, – это дать гарантию того, что подкласс соответствует определенной сигнатуре метода. Но если мы составим контракт для базового класса, то можем гарантировать, что любой будущий подкласс не сможет изменять значения наших методов. Например, вы составляете контракт для метода setFont (подобный приведенному ниже), гарантирующий, что вы получите именно тот шрифт, который установили:</p>
     <empty-line/>
     <p>/**</p>
     <p>* @pre f != null</p>
     <p>* @post getFont() == f</p>
     <p> */</p>
     <p>public void setFont(final Font f) {</p>
     <p>//…</p>
    </section>
    <section>
     <title>
      <p>Реализация принципа ППК</p>
     </title>
     <p>Самая большая польза от использования принципа ПИК состоит в том, что он ставит вопросы требований и гарантий во главу угла. В период работы над проектом простое перечисление факторов – каков диапазон входных значений, каковы граничные условия, что можно ожидать от работы подпрограммы (или, что важнее, чего от нее ожидать нельзя), – является громадным шагом вперед в написании лучших программ. Не обозначив эти позиции, вы скатываетесь к программированию в расчете на совпадение (см. раздел "Программирование в расчете на стечение обстоятельств"), на чем многие проекты начинаются, заканчиваются и терпят крах.</p>
     <p>В языках программирования, которые не поддерживают в программах принцип ППК, на этом можно было бы и остановиться – и это неплохо. В конце концов, принцип ППК относится к методикам проектирования. Даже без автоматической проверки вы можете помещать контракт в текст программы (как комментарий) и все равно получать от этого реальную выгоду. По меньшей мере, закомментированные контракты дают вам отправную точку для поиска в случае возникновения неприятностей.</p>
     <subtitle>Утверждения</subtitle>
     <p>Документирование этих предположений уже само по себе неплохо, но вы можете извлечь из этого еще большую пользу, если заставите компилятор проверять имеющийся контракт. Отчасти вы можете эмулировать эту проверку на некоторых языках программирования, применяя так называемые утверждения (см. "Программирование утверждений"). Но почему лишь отчасти? Разве вы не можете использовать утверждения для всего того, на что способен принцип ППК?</p>
     <p>К сожалению, ответ на этот вопрос отрицательный. Для начала, не существует средств, поддерживающих распространение действия утверждений вниз по иерархии наследования. Это означает, что если вы отменяете метод базового класса, у которого имеется свой контракт, то утверждения, реализующие этот контракт, не будут вызываться корректно (если только вы не продублируете их вручную во вновь написанной программе). Не забывайте, что прежде чем выйти из любого метода необходимо вручную вызвать инвариант класса (и все инварианты базового класса). Основная проблема состоит в том, что контракт не соблюдается автоматически.</p>
     <p>Кроме того, отсутствует встроенный механизм «старых» значений; т. е. значений, которые существовали на момент входа в метод. При использовании утверждений, обеспечивающих соблюдение условий контрактов, к предусловию необходимо добавить программу, позволяющую сохранить любую информацию, которую вы намерены использовать в постусловии. Сравним это с iContract, где постусловие может просто ссылаться на "variabie@pre", или с языком Eiffel, который поддерживает принцип "old expression".</p>
     <p>И наконец, исполняющая система и библиотеки не предназначены для поддержки контрактов, так что эти вызовы не проверяются. Это является серьезным недостатком, поскольку большинство проблем обнаруживается именно на стыке между вашей программой и библиотеками, которые она использует (более детально этот вопрос обсуждается в разделе "Мертвые программы не лгут").</p>
     <subtitle>Поддержка ППК в языках программирования</subtitle>
     <p>Языки программирования, в которых имеется встроенная поддержка ППК (например, Eiffel и Sather[URL 12]) осуществляют автоматическую проверку предусловий и постусловий в компиляторе и исполняющей системе. В этом случае вы оказываетесь в самом выгодном положении, поскольку все базовые элементы программы (включая библиотеки)должны выполнять условия соответствующих контрактов.</p>
     <p>Но как быть, если вы работаете с более популярными языками типа С, С++, и Java? Для этих языков существуют препроцессоры, которые обрабатывают контракты, инкапсулированные в первоначальный исходный текст как особые комментарии. Препроцессор разворачивает эти комментарии, преобразуя их в программу, которая контролирует утверждения.</p>
     <p>Если вы работаете с языками С и С++, то попробуйте изучить Nana [URL 18]. Nana не осуществляет обработку наследования, но использует отладчик во время выполнения программы для отслеживания утверждений новаторским методом.</p>
     <p>Для языка Java существует средство iContract [URL 17]. Оно обрабатывает комментарии (в формате JavaDoc) и генерирует новый исходный файл, содержащий логику утверждений.</p>
     <p>Препроцессоры уступают встроенным средствам. Они довольно муторно интегрируются в проект, а другие используемые вами библиотеки останутся без контрактов. И тем не менее, они могут принести большую пользу; когда проблема обнаруживается подобным способом – в особенности та, которую по-другому найти просто невозможно, – это уже сродни работе волшебника.</p>
    </section>
    <section>
     <title>
      <p>ППК и аварийное завершение работы программы</p>
     </title>
     <p>ППК прекрасно сочетается с принципом аварийного завершения работы программы (см. "Мертвые программы не лгут"). Предположим, что есть метод, вычисляющий квадратные корни (подобный классу DOUBLE в языке Eiffel). Этот метод требует наличия предусловия, которое ограничивает область действия положительными числами. Предусловие в языке Eiffel объявляется с помощью ключевого слова require, а постусловие – с помощью ключевого слова ensure, так можно записать:</p>
     <p>Sqrt: DOUBLE is</p>
     <p>-- Подпрограмма вычисления квадратного корня</p>
     <p>require</p>
     <p>  sqrt_arg_must_be_positive: Current &gt;= 0;</p>
     <p>--- ...</p>
     <p> --- здесь происходит вычисление квадратного корня</p>
     <p> --- ...</p>
     <p>ensure</p>
     <p>((Result*Result) – Current).abs &lt;= epsilon*Current.abs;</p>
     <p>-- Результат должен находиться в пределах погрешности</p>
     <p>end;</p>
     <subtitle>Кто несет ответственность!</subtitle>
     <p>Кто несет ответственность за проверку предусловия, вызывающей программы или вызываемой подпрограммы? Если эта проверка реализована как часть самого языка программирования, то никто: предусловие тестируется "за кулисами" после того, как вызывающая программа обращается к подпрограмме, но до входа в саму подпрограмму. Следовательно, если необходимо явным образом проверить параметры, это должно быть выполнено вызывающей программой, потому что подпрограмма сама некогда не сможет увидеть параметры, которые нарушают ее предусловие. (В языках без встроенной поддержки вам пришлось бы окружить вызываемую подпрограмму преамбулой и/или заключением, которые проверяют эти утверждения.)</p>
     <p>Рассмотрим программу, которая считывает с устройства ввода номер, извлекает из него квадратный корень (вызывая функцию sqrt) и выводит результат на печать. Функция sqrt имеет предусловие – ее аргумент не должен быть отрицательным числом. Если пользователь вводит отрицательное число, то именно вызывающая программа должна гарантировать, что это число не будет передано функции sqrt. Вызывающая программа может воспользоваться многими вариантами: она может завершить работу, выдать предупреждение и начать считывать другое число, она также может преобразовать число в положительное и добавить к результату, выданному функцией Sqrt, мнимую единицу. Какой бы вариант ни использовался, эта проблема определенно не связана с функцией sqrt.</p>
     <p>Выражая область значений функции извлечения квадратного корня в предусловии подпрограммы sqrt, вы перекладываете ответственность за правильность на вызывающую программу, которой она принадлежит. Затем вы можете спокойно продолжать разработку подпрограммы sqrt, зная, что ее входные параметры не выйдут за пределы соответствующей области.</p>
     <empty-line/>
     <p>Если ваш алгоритм извлечения квадратного корня не работает (или выходит за пределы погрешности), вы получите сообщение об ошибке и трассировку стека, указывающую на цепочку вызовов.</p>
     <p>Если вы передаете sqrt отрицательный параметр, рабочая среда Eiffel выводит на печать ошибку "sqrt_argjnust_be_positive" (аргумент функции sqrt должен быть положительным) наряду с трассировкой стека. Этот вариант реализован лучше, чем его аналогия в языках типа Java, С, и С++, где при передаче отрицательного числа в sqrt выдается специальное значение NaN (Not a Number – не число). Далее по ходу программы, когда вы попытаетесь произвести со значением NaN некие математические действия, результаты этого будут поистине удивительными.</p>
     <p>Проблему намного проще найти и диагностировать "не сходя с места", при аварийном завершении работы программы.</p>
    </section>
    <section>
     <title>
      <p>Другие случаи применения инвариантов</p>
     </title>
     <p>До этого момента мы обсуждали предусловия и постусловия, применимые к отдельным методам и инварианты, которые, в свою очередь, применимы ко всем методам в пределах класса, но есть и другие полезные способы применения инвариантов.</p>
     <subtitle>Инварианты цикла</subtitle>
     <p>Понимание граничных условий для нетривиального цикла может оказаться проблематичным. Циклы испытывают воздействие "проблемы банана" (я знаю, как записать по буквам слово «банан», но не знаю, в какой момент нужно остановиться), ошибки "постов охраны" (путаница в том, что подсчитывать: сами посты или интервалы между ними) и вездесущей ошибки завышения (занижения) [URL 52].</p>
     <p>В подобных ситуациях инварианты могут быть полезными: инвариант цикла представляет собой оператор возможной цели цикла, но он обобщен таким образом, что также истинен перед тем, как цикл выполняется, и при каждой итерации, осуществляемой с помощью цикла. Его можно считать контрактом в миниатюре. Классическим примером является подпрограмма поиска максимального элемента в массиве.</p>
     <p>int m = arr[0]; // пример предполагает, что длина массива &gt; 0</p>
     <p>int i = 1;</p>
     <p>// Инвариант цикла: m = max(arr[0:i-1])</p>
     <p>while (i &lt; arr.length) {</p>
     <p>    m = Math.max(m, arr[i]);</p>
     <p>    i = i + 1;</p>
     <p>}</p>
     <p>(arr [m:n] – принятое обозначение фрагмента массива, элементы которого имеют индексы от m до n). Инвариант должен быть истинным до начала выполнения цикла, а тело цикла должно гарантировать, что инвариант будет оставаться истинным во время выполнения цикла. Таким образом, нам известно, что инвариант истинен после выполнения цикла, и следовательно наш результат является достоверным. Инварианты цикла могут быть запрограммированы в явном виде (как утверждения); они также полезны при проектировании и документировании.</p>
     <subtitle>Семантические инварианты</subtitle>
     <p>Вы можете использовать семантические инварианты для выражения неизменных требований при составлении своего рода "философского контракта".</p>
     <p>Однажды авторы книги написали программу обработки транзакций для дебетовых банковских карт. Главное требование заключалось в том, что пользователь дебетовой карты не должен проводить на своем счете одну и ту же транзакцию. Другими словами, ошибка скорее повлечет за собой отмену обработки транзакции, чем инициирует обработку дублированной транзакции – независимо от характера сбоя в системе.</p>
     <p>Это простое правило, исходящее непосредственно из требований, доказало свою полезность при отсеивании сложных сценариев исправления ошибок и является руководством при детальном проектировании и реализации во многих областях.</p>
     <p>Но убедитесь в том, что вы не смешиваете требования, представляющие собой жесткие, неизменные законы с теми, что являются не более чем политикой, которая может измениться вместе с правящим режимом. Именно поэтому мы используем термин "семантические инварианты" – он должен занимать главенствующее место при определении сути предмета и не подчиняться прихотям политики (для которой предназначаются более динамичные правила ведения бизнеса).</p>
     <p>Если вы обнаруживаете подходящее требование, убедитесь, что оно становится неотъемлемой частью любой создаваемой вами документации – будь то маркированный список в требованиях, которые подписываются в трех экземплярах, или большое объявление на обычной лекционной доске, которое не заметит разве что слепой. Постарайтесь сформулировать его четко и однозначно. Например, в случае с дебетовой картой можно было бы записать:</p>
     <p>ERR IN FAVOR OF THE CONSUMER (ОШИБКА В ПОЛЬЗУ КЛИЕНТА)</p>
     <p>Это и есть четкая, сжатая, однозначная формулировка, которая применима к различным областям системы. Это наш контракт со всеми пользователями системы, наша гарантия ее поведения.</p>
    </section>
    <section>
     <title>
      <p>Динамические контракты и агенты</p>
     </title>
     <p>До сих пор мы говорили о контрактах как о неких фиксированных, раз и навсегда установленных спецификациях. Но в случае с автономными агентами этого быть не должно. Из определения автономных агентов следует, что они могут отвергать запросы, которые не хотят выполнять. Они могут обговаривать условия контракта – "я не могу предоставить то-то и то-то, но если вы дадите мне вот это, тогда я смогу предоставить что-то другое".</p>
     <p>Конечно, любая система, которая полагается на технологию агентов, обладает критической зависимостью от положений контракта, даже если они генерируются динамически.</p>
     <p>Только представьте себе: при достаточном количестве элементов и агентов, которые для достижения конечной цели могут обговаривать свои собственные контракты между собой, можно было бы просто выйти из кризисной ситуации, связанной с производительностью, позволив программам решать проблемы за нас.</p>
     <p>Но если мы не можем использовать контракты «вручную», то мы не сможем использовать их и автоматически. Поэтому в следующий раз, когда вы будете проектировать фрагмент программы, проектируйте и его контракт.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Ортогональность</p>
     <p>• Мертвые программы не лгут</p>
     <p>• Программирование утверждений</p>
     <p>• Балансировка ресурсов</p>
     <p>• Несвязанность и закон Деметера</p>
     <p>• Временное связывание</p>
     <p>• Программирование в расчете на совпадение</p>
     <p>• Программа, которую легко тестировать</p>
     <p>• Команды прагматиков</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Информация к размышлению: Если принцип ППК является столь мощным, почему бы не применять его более широко? Насколько сложно выйти на контракт? Заставляет ли он вас думать о вещах, которые вы бы в данный момент проигнорировали? Заставляет ли он вас ДУМАТЬ? Это явно небезопасный принцип!</p>
     <subtitle>Упражнения</subtitle>
     <p>14. Из чего получается удачный контракт? Можно добавлять любые предусловия и постусловия, но есть ли от них толк? Не могут ли они принести больше вреда, чем пользы? Определите, какими являются контракты в примере ниже и упражнениях 15 и 16: удачными, неудачными, уродливыми, и объясните, почему.</p>
     <p>Рассмотрим вначале пример, написанный на языке Eiffel. Имеется программа для добавления STRING к двунаправленному циклическому списку (следует помнить, что предусловия обозначены require, а постусловия – ensure).</p>
     <p>-- Добавляем элемент в двунаправленный список,</p>
     <p>-- и возвращаем вновь созданный узел (NODE).</p>
     <p>add_tem (item: STRING): NODE is</p>
     <p>require</p>
     <p>item /= Void -- /= означает 'не равно'.</p>
     <p>deferred -- Абстрактный базовый класс</p>
     <p>ensure</p>
     <p>result.next.previous = result -- Проверка связей вновь</p>
     <p>result.previous.next = result -- вновь добавленного узла.</p>
     <p>find_item(item) = result  -- Должен найти его.</p>
     <p>end</p>
     <p>15. Теперь рассмотрим пример на языке Java – нечто подобное примеру, из упражнения 14. Оператор InsertNumber вставляет целое число в упорядоченный список. Предусловия и постусловия обозначены в соответствии с сайтом iContract (см. [URL 17]). (Ответ см. в Приложении В.)</p>
     <p>private int data[]; </p>
     <p>/**</p>
     <p>* @post data[index-1] &lt; data[index] &amp;&amp;</p>
     <p>* data[index] == aValue</p>
     <p>*/</p>
     <p>public Node insertNumber (final int aValue) </p>
     <p>{</p>
     <p>int index = findPlaceTolnsert(aValue);</p>
     <p>...</p>
     <p>16. Фрагмент стекового класса на языке Java. Можно ли назвать этот контракт удачным? (Ответ см. в Приложении В.)</p>
     <empty-line/>
     <p>/**</p>
     <p>* @рге anltem != null // Требует реальных данных</p>
     <p>* @post рор() == anltem // Проверяет их наличие</p>
     <p>* // в стеке</p>
     <p>*/</p>
     <p>public void рush(final String anltem)</p>
     <empty-line/>
     <p>17. В классических примерах использования принципа ППК (см. упражнения 14–16) реализуется абстрактный тип данных – обычно это стек, или очередь. Но немногие действительно создают подобные разновидности низкоуровневых классов.</p>
     <p>В данном упражнении требуется спроектировать интерфейс блендера для коктейлей. Он должен основываться на web-технологии, включаться по сети Интернет и использовать технологию CORBA, но в данный момент необходим лишь интерфейс управления. Блендер имеет десять скоростей (0 означает отключение); он не должен работать вхолостую а его скорость может единовременно изменяться на одну ступень (т. е. с 0 до 1, или с 1 до 2, но не сразу с 0 до 2).</p>
     <p>Методы указаны ниже. Добавьте соответствующие предусловия и постусловия, а также инвариант. (Ответ см. в Приложении В.)</p>
     <p>int getSpeed()</p>
     <p>void setSpeed(int x)</p>
     <p>booolean isFull()</p>
     <p>void fill()</p>
     <p>void empty()</p>
     <empty-line/>
     <p>18. Сколько чисел содержится в ряду 0, 5, 10, 15…, 100? (Ответ см. в Приложении В.)</p>
    </section>
   </section>
   <section>
    <title>
     <p>22</p>
     <p>Мертвые программы не лгут</p>
    </title>
    <section>
     <p>Приходилось ли вам замечать, что иногда, еще до того как вы осознаете проблему, ее признаки обнаруживают посторонние люди? То же самое применимо и к программам других разработчиков. Если в одной из наших программ что-то начинает идти не так, как надо, в ряде случаев первой это «заметит» библиотечная подпрограмма. Возможно, паразитный указатель заставил нас записать в дескриптор файла какие-то бессмысленные символы. При следующем обращении к read это будет обнаружено. Возможно, что переполнение буфера привело к уничтожению счетчика, который мы собирались использовать для определения объема назначаемой памяти. Возможно, причиной сбоя окажется malloc. Логическая ошибка в одном из нескольких миллионов операторов, находящихся в тексте перед оператором выбора, означает, что его селектор больше не примет значение 1, 2 или 3. Мы берем случай default (который является одной из причин того, почему любой оператор выбора должен иметь значение по умолчанию), мы хотим знать, в какой момент произошло невозможное).</p>
     <p>Легко поддаться умонастроению "этого не может быть, потому что не может быть никогда". Большинство из нас создавало программы, которые не проверяют, успешно ли завершилась операция закрытия файла и правильно ли записан оператор трассировки. И все сводилось к одному (к тому, что мы и так знали) – рассматриваемая программа не откажет, если будет работать в нормальных условиях. Но мы пишем программы с осторожностью. Мы ищем инородные указатели в других частях нашей программы, очищая стек. Мы выясняем, какие версии библиотек совместного пользования загружались в действительности.</p>
     <p>Все ошибки дают вам информацию. Вы могли внушить себе, что ошибка произойти не может, и проигнорировать эту информацию. В отличие от вас, прагматики говорят себе, что если ошибка имеет место, то произошло что-то очень скверное.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 32: Пусть аварийное завершение работы программы произойдет как можно раньше</p>
     </cite>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>Аварийное завершение не означает "отправить в корзину для мусора"</p>
     </title>
     <p>Одним из преимуществ скорейшего обнаружения проблем является то, что аварийное завершение происходит как можно раньше. И во многих случаях такое завершение программы – это лучший выход из положения. Альтернативой может быть продолжение работы, запись поврежденных данных в жизненно важную базу данных или команда стиральной машине на проведение двадцатого по счету цикла отжима.</p>
     <p>Эта философия воплощена в языке и библиотеках Java. Когда в системе выполнения случается что-то непредвиденное, происходит возбуждение исключения RuntimeException. Если это исключение не перехвачено, оно будет двигаться на верхний уровень программы и заставит ее прекратить работу, отобразив трассировку стека.</p>
     <p>То же самое можно реализовать и на других языках программирования. Если механизм исключения отсутствует или библиотеки не возбуждают исключения, то убедитесь в том, что можете обрабатывать ошибки самостоятельно. В языке С для этого весьма полезны макрокоманды:</p>
     <p>#define CHECK(LINE, EXPECTED) \</p>
     <p> {int rc = LINE; \</p>
     <p>  if (rc!= EXPECTED) \</p>
     <p>   ut_abort(_FILE_, _LINE_, #LINE, rc, EXPECTED); }</p>
     <p>void ut_abort(char *file, int In, char *line, int rc, int exp) {</p>
     <p>    fprintf(stderr, "%s line %d\n'%s': expected %d, got %d\n", file, In, line, exp, rc);</p>
     <p>exit(1);</p>
     <p>}</p>
     <empty-line/>
     <p>Тогда вы можете инкапсулировать вызовы, которые никогда подведут, с помощью строки:</p>
     <p>CHECK(stat("/tmp", &amp;stat_buff), 0);</p>
     <empty-line/>
     <p>Если бы это не удалось, то вы бы получили сообщение, записанное в stderr:</p>
     <p>source.c line 19</p>
     <p>"stat("/tmp", &amp;stat_buff)' : expected 0, got -1</p>
     <p>Ясно, что в ряде случаев выход из выполняющейся программы просто не уместен. Возможно, вы претендуете на ресурсы, которые не освобождены, или же вам необходимо записать сообщения в журнал, завершить открытые транзакции или взаимодействовать с другими процессами. Здесь будут полезны методики, обсуждаемые в разделе "Случаи, когда необходимо использовать исключения". Однако основной принцип остается тем же – если ваша программа обнаруживает, что произошло событие, которое считалось невозможным, программа теряет жизнеспособность. Начиная с этого момента, все действия, совершаемые программой, попадают под подозрение, так что выполнение программы необходимо прервать как можно быстрее. В большинстве случаев мертвая программа приносит намного меньше вреда, чем испорченная.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Проектирование по контракту</p>
     <p>• Когда использовать исключения</p>
    </section>
   </section>
   <section>
    <title>
     <p>23</p>
     <p>Программирование утверждений</p>
    </title>
    <epigraph>
     <p>В самобичевании есть своего рода сладострастие. И когда мы сами себя виним, мы чувствуем, что никто другой не вправе более винить нас.</p>
     <text-author>Оскар Уайльд, Портрет Дориана Грея</text-author>
    </epigraph>
    <section>
     <p>В самом начале своей профессиональной карьеры каждый программист обязан выучить некую мантру. Она представляет собой фундаментальную основу компьютерных вычислений, основное вероучение, которое мы учимся применять к требованиям, конструкциям, самим программам, комментариям – словом, всему, что мы делаем. Она звучит так:</p>
     <p>"Этого никогда не случится…"</p>
     <p>И далее: "Через 30 лет эта программа использоваться не будет, так что для обозначения года хватит и двух разрядов". "Нужна ли интернационализация, если это приложение не будет использоваться за рубежом?" "Счетчик не может принимать отрицательное значение". "Этот оператор printf не дает сбоев".</p>
     <p>Не стоит заниматься подобного рода самообманом, особенно при написании программ.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 33: Если что-либо не может произойти, воспользуйтесь утверждениями, которые гарантируют, что это не произойдет вовсе</p>
     </cite>
     <empty-line/>
     <p>Всякий раз, когда вы начинаете думать "Ну конечно, такого просто не может произойти", проверяйте это высказывание с помощью программы. Самый простой способ осуществить это – использовать утверждения. В большинстве реализаций языков С и С++ имеется некоторая разновидность макроса assert или _assert, который осуществляет проверку логического условия. Эти макрокоманды могут представлять огромную ценность. Если указатель, передаваемый к вашей процедуре, ни в коем случае не должен принимать значение NULL, то проверьте выполнение этого условия:</p>
     <p>void writeString(char *string) {</p>
     <p>   assert(string != NULL);</p>
     <p>...</p>
     <p>Утверждения представляют собой весьма полезное средство проверки работы алгоритма. Например, вы написали умный алгоритм сортировки. Проверьте, работает ли он:</p>
     <p>For (int i=0; i&lt;num_entries-1; i++) {</p>
     <p>   assert(sorted[i] &lt;= sorted[i+1]);</p>
     <p>}</p>
     <p>Конечно, условие, переданное утверждению, не должно оказывать побочного воздействия (см. врезку "Утверждения и побочные эффекты"). Необходимо также помнить, что утверждения могут отключаться во время компиляции – не помещайте в макрос assert программу, которая должна быть выполнена. Утверждения не должны использоваться вместо реальной обработки ошибок. Они лишь осуществляют проверку того, что никогда не должно произойти; вы же не хотите писать программу, подобную приведенной ниже:</p>
     <p>printf("Enter 'Y' or 'N': ");</p>
     <p>ch = getchar()</p>
     <p>assert((ch=='Y')||(ch=='N')); /* дурной тон! */</p>
     <p>И поскольку имеющаяся макрокоманда assert вызывает exit, если утверждение ложно, нет никаких оснований для того, чтобы этого не могли сделать создаваемые вами версии программы. Если вам приходится освобождать ресурсы, сделайте так, чтобы невыполнение утверждения возбуждало исключение или осуществляло переход longjump к точке выхода, или же вызывало обработчик ошибки. Убедитесь в том, что программа, которая исполняется в течение миллисекунд, не использует информацию, которая привела к невыполнению утверждений.</p>
    </section>
    <section>
     <title>
      <p>Не отключайте утверждения</p>
     </title>
     <p>Существует расхожее недопонимание утверждений, которое провозгласили те, кто разрабатывает компиляторы и языковые среды. Оно формулируется примерно так:</p>
     <cite>
      <p>"Утверждения являются лишним бременем для программы. Поскольку они проверяют то, что никогда не должно случиться, их действие инициируется только ошибкой в тексте программы. Как только программа проверена и отправлена заказчику, необходимость в них отпадает и их надо отключить для ускорения работы программы. Утверждения нужны лишь во время отладки" .</p>
     </cite>
     <p>В этом высказывании имеется два явно неправильных предположения. Первое – авторы высказывания полагают, что при тестировании обнаруживаются все ошибки. В действительности маловероятно, что процедура тестирования любой сложной программы всегда будет происходить по единому сценарию, даже при минимальном проценте перестановок в тексте программы (см. "Безжалостное тестирование"). Второе – эти оптимисты забывают, что ваша программа выполняется в опасном мире. Весьма вероятно, что во время тестирования крысы не будут прогрызать кабели, никто не будет забивать память, запуская игрушку, а файлы журналов не переполнят жесткий диск. Все это может происходить, если ваша программа выполняется в реальных условиях. Ваш первый оборонительный рубеж – проверка наличия любой вероятной ошибки, а второй – использование утверждений для обнаружения тех ошибок, которые прошли первый рубеж.</p>
     <p>Отключение утверждений при доставке программы заказчику сродни хождению по канату без страховочной сетки на том основании, что когда-то вы уже так делали. Сумма страховки велика, но получить ее в случае падения довольно сложно.</p>
     <p id="_ednref26">Даже при наличии некоторых проблем с производительностью, отключите только те утверждения, которые действительно оказывают серьезное воздействие. Пример с программой сортировки, представленный выше, может быть самой важной частью вашего приложения и, наверное, должен работать быстро. Добавление процедуры проверки означает новое считывание данных, что может быть неприемлемо. Сделайте эту конкретную процедуру проверки необязательной <a l:href="#n_26">[26]</a>, но оставьте в покое все остальные.</p>
     <subtitle>Утверждения и побочные эффекты</subtitle>
     <p>Становится как-то неловко, если программа, добавляемая для обнаружения ошибок, в результате создает новые. Это может происходить с утверждениями в том случае, если вычисление условия имеет побочные эффекты. Например, было бы дурным тоном написать на языке Java нечто вроде:</p>
     <p>while (iter.hasMoreElements() {</p>
     <p>  Test.ASSERT(iter.nextElement() != null);</p>
     <p>  Object obj = iter.nextElement();</p>
     <p>// ...</p>
     <p>}</p>
     <p>Вызов .nextElement() в ASSERT обладает побочным эффектом, заключающимся в перемещении указателя цикла за выбираемый элемент, так что цикл обрабатывает лишь половину элементов совокупности. Лучше было бы записать:</p>
     <p>while (iter.hasMoreElements()) {</p>
     <p>Object obj = iter.nextElement();</p>
     <p>Test.ASSERT(obj != null);</p>
     <p>//…</p>
     <p>}</p>
     <p>Эта проблема являются разновидностью так называемого «Heisen-bug» – процесса отладки, изменяющего поведение отлаживаемой системы (см. [URL 52]).</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Отладка</p>
     <p>• Проектирование по контракту</p>
     <p>• Балансировка ресурсов</p>
     <p>• Программирование в расчете на совпадение</p>
     <subtitle>Упражнения</subtitle>
     <p>19. Быстрый тест на ощущение реальности. Какие из перечисленных «невозможных» событий могут случаться в реальности? (Ответ см. в Приложении В.)</p>
     <p>1. Месяц, количество дней в котором меньше 28</p>
     <p>2. Stat(".",&amp;sb)== –1 (т. е. невозможно обращение к текущему каталогу)</p>
     <p>3. В языке С++: а = 2; b = 3; if (а + b != 5) exit(1);</p>
     <p>4. Треугольник, сумма величин внутренних углов которого не равна 180°</p>
     <p>5. Минута, состоящая не из 60 секунд</p>
     <p>6. В языке Java: (а + 1) &lt;= а</p>
     <p>20. Разработайте несложный класс Java для проверки утверждений (Ответ см. в Приложении В.)</p>
    </section>
   </section>
   <section>
    <title>
     <p>24</p>
     <p>Случаи, в которых используются исключения</p>
    </title>
    <section>
     <p>В разделе "Мертвые программы не лгут" высказано предложение считать хорошим тоном проверку всех возможных ошибок, в особенности возникающих неожиданно. Однако на практике это может привести к тому, что программа станет уродливой; нормальная логика вашей программы может сойти на нет из-за ее затуманивания процедурами обработки ошибок, особенно если вы являетесь приверженцем школы программирования, девиз которой звучит так: "В подпрограмме должен иметься один-единственный оператор return" (авторы не являются приверженцами указанной школы). Нам приходилось видеть текст программы, выглядевший следующим образом:</p>
     <p>retcode = OK;</p>
     <p>if (socket.read(name)!=OK) {</p>
     <p>  retcode = BAD_READ;</p>
     <p>}</p>
     <p>else</p>
     <p>  processName(name);</p>
     <p>  if (socket.read(address)!=OK) {</p>
     <p>     retcode = BAD READ;</p>
     <p>  }</p>
     <p>  else {</p>
     <p>     processAddress(address);</p>
     <p>     if (socket.read(telNo)!= OK) {</p>
     <p>        retcode= BAD_READ</p>
     <p>   }</p>
     <p>    else {</p>
     <p>// etc, etc…</p>
     <p>   }</p>
     <p>  }</p>
     <p>}</p>
     <p>return retcode;</p>
     <p>Но если язык программирования (no счастливой случайности) поддерживает исключения, то эту программу можно написать намного изящнее:</p>
     <p>retcode = OK;</p>
     <p>try {</p>
     <p>  socket.read(name);</p>
     <p>  process(name);</p>
     <p>  socket.read(address);</p>
     <p>  processAddress(address);</p>
     <p>  socket.read(telNo);</p>
     <p>// etc, etc…</p>
     <p>}</p>
     <p>catch (lOException e) {</p>
     <p>   retcode = BAD_READ;</p>
     <p>   Logger.log("Error reading individual;" +e.getMessage());</p>
     <p> }</p>
     <p>return retcode;</p>
     <p>Теперь схема управления отличается ясностью – вся обработка ошибок сосредоточена в одном-единственном месте.</p>
    </section>
    <section>
     <title>
      <p>Что является исключительным?</p>
     </title>
     <p>Одна из проблем, связанных с исключениями, заключается в том, что необходимо знать, когда их можно использовать. Мы полагаем, что не стоит злоупотреблять исключениями для нормального хода выполнения программы; они должны быть зарезервированы для нештатных ситуаций. Предположите, что неперехваченное исключение прекратит работу вашей программы, и спросите себя: "А будет ли эта программа исполняться, если удалить все обработчики исключений?". Если ответ отрицательный, то вполне возможно, что исключения используются в обстоятельствах, их не требующих.</p>
     <p>Например, если ваша программа пытается открыть файл для чтения, а этот файл не существует, нужно ли возбуждать исключение?</p>
     <p>Мы отвечаем следующим образом: "Это зависит от конкретного случая". Если файл должен был там находиться, то исключение гарантировано. Произошло что-то непредвиденное – файл, который вы считали существующим, похоже, исчез. С другой стороны, если вы понятия не имеете, должен ли этот файл существовать или нет, то его отсутствие уже не кажется столь исключительным и возвращение ошибки вполне уместно.</p>
     <p>Рассмотрим пример с первой ситуацией. Представленная ниже программа открывает файл /etc/passwd, который обязан существовать во всех системах Unix. Если файл не открывается, происходит передача исключения FileNotFoundException к вызывающей программе.</p>
     <p>public void open_passwd() throws FileNotFoundException {</p>
     <p>//При этом может возбуждаться FileNotFoundException…</p>
     <p>  ipstream = new FilelnputStream("/efc/passwd");</p>
     <p>  //…</p>
     <p>}</p>
     <p>Однако во второй ситуации может происходить открытие файла, указанного пользователем в командной строке. Здесь возбуждение исключения не гарантируется, и программа выглядит по-другому:</p>
     <p>public boolean open_user_file(String name)</p>
     <p>  throws FileNotFoundException {</p>
     <p>  File f = new File(name);</p>
     <p>  if (!f.exists()) {</p>
     <p>     return false;</p>
     <p>  }</p>
     <p>  ipstream = new FilelnputStream(f);</p>
     <p>  return true;</p>
     <p>}</p>
     <p>Обратите внимание на то, что вызов FilelnputStream все еще способен генерировать исключение, передаваемое подпрограммой. Но при этом исключение будет сгенерировано лишь в действительно исключительных обстоятельствах; простая попытка открыть несуществующий файл сгенерирует обычное возвращение ошибки.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 34: Пользуйтесь исключениями только в исключительных случаях</p>
     </cite>
     <empty-line/>
     <p>Почему мы предлагаем именно такой подход к исключениям? Конечно, исключение представляет собой мгновенную нелокальную передачу управления – своего рода многоуровневый оператор goto. Программы, использующие исключения в своей обычной работе, испытывают те же проблемы с удобочитаемостью и сопровождением, которые свойственны классическим неструктурированным программам. Эти программы нарушают инкапсуляцию: подпрограммы и их вызывающие программы отличаются более сильной связанностью за счет обработки исключений.</p>
    </section>
    <section>
     <title>
      <p>Обработчики ошибок как альтернатива исключению</p>
     </title>
     <p>Обработчик ошибок представляет собой подпрограмму, которая вызывается при обнаружении ошибки. Вы можете зарегистрировать подпрограмму для обработки определенной категории ошибок. При возникновении одной из этих ошибок происходит вызов обработчика.</p>
     <p>Возникают ситуации, когда вам захочется применить обработчики ошибок вместо исключений или же одновременно с ними. Понятно, что, если вы работаете с языком С, не поддерживающим исключения, это один из нескольких возможных вариантов (см. Вопрос для обсуждения ниже). Но иногда обработчики ошибки могут использоваться даже в языках (типа Java), обладающих хорошей встроенной схемой обработки исключений.</p>
     <p>Рассмотрим реализацию приложения «клиент-сервер» с использованием средства RMI (удаленный вызов метода) в языке Java. Поскольку RMI реализован определенным способом, каждое обращение к удаленной подпрограмме должно быть подготовлено, с тем чтобы обработать ситуацию RemoteException. Добавление программы обработки этих исключений может представлять собой утомительную процедуру и означает сложность написания программы, которая могла бы работать как с локальными, так и с удаленными подпрограммами. Обойти эту трудность возможно путем инкапсулирования удаленных объектов в класс, не являющийся удаленным. Тогда этот класс сможет реализовать интерфейс обработчика ошибок, позволяя программе клиента регистрировать подпрограмму, обращение к. которой происходит при обнаружении удаленной исключительной ситуации.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Мертвые программы не лгут</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• В языках программирования, не поддерживающих исключительные ситуации, часто используется иной (нелокальный) способ передачи механизма управления (например, в языке С существует средство longjmp/setjmp). Подумайте, как можно реализовать некий «суррогатный» механизм исключения, используя указанные средства. В чем состоят преимущества и опасности? Какие специальные меры необходимо предпринять для гарантии того, что эти ресурсы не «осиротеют»? Есть ли смысл использовать подобное решение всякий раз, когда вы пишете программу на языке С?</p>
     <subtitle>Упражнения</subtitle>
     <p>21. При проектировании нового класса контейнера имеются три возможных состояния ошибки:</p>
     <p>1. Не хватает памяти для нового элемента в подпрограмме add.</p>
     <p>2. В подпрограмме fetch не обнаружена запрашиваемая точка входа.</p>
     <p>3. Указатель null передан к подпрограмме add.</p>
     <p>Каким образом необходимо обрабатывать каждую из этих ошибок? Нужна ли генерация ошибки, возбуждение исключительной ситуации, или же это состояние должно игнорироваться? (Ответ см. в Приложении В).</p>
    </section>
   </section>
   <section>
    <title>
     <p>25</p>
     <p>Балансировка ресурсов</p>
    </title>
    <epigraph>
     <p>"Я привел тебя в этот мир", – сказал бы мой отец, – "я же могу и отправить тебя обратно. Мне это без разницы. Я сделаю еще одного такого, как ты".</p>
     <text-author>Билл Косби, Отцовство</text-author>
    </epigraph>
    <section>
     <p>При написании программ всем нам приходится управлять ресурсами: памятью, транзакциями, потоками, файлами, таймерами – словом, всеми типами объектов, доступность которых ограничена. Большую часть времени использование ресурса следует предсказуемой схеме: ресурс назначается, используется, а затем освобождается.</p>
     <p>Однако многие разработчики не имеют сколько-нибудь завершенного плана, касающегося распределения и освобождения ресурсов. Поэтому предлагается простая подсказка:</p>
     <empty-line/>
     <cite>
      <p>Подсказка 35: Доводите до конца то, что начинаете</p>
     </cite>
     <empty-line/>
     <p>В большинстве случаев эту подсказку применить несложно. Она всего лишь означает, что подпрограмма или объект, который назначает ресурс, должен нести ответственность за освобождение этого ресурса. Использование указанной подсказки можно рассмотреть на примере неудачной программы – приложения, открывающего файл, считывающего из него информацию о заказчике, обновляющего поле и записывающего результат обратно в файл. Чтобы сделать пример более наглядным, мы опустили процедуру обработки ошибок.</p>
     <p>void readCustomer(const char *fName, Customer *cRec) {</p>
     <p>cFiie = fopen(fName, "r+");</p>
     <p>fread(cRec, sizeof(*cRec), 1, cFile);</p>
     <p>}</p>
     <p>void writeCustomer(Customer *cRec) {</p>
     <p>rewind(cFile);</p>
     <p>fwrite(cRec, sizeof(*cRec), 1; cFile);</p>
     <p>fclose(cFile);</p>
     <p>}</p>
     <p>void updateCustomer(const char *fName, double newBalance) {</p>
     <p>Customer cRec;</p>
     <p>readCustomer(fName, &amp;cRec);</p>
     <p>cRec.balance = newBalance;</p>
     <p>writeCustomer(&amp;cRec);</p>
     <p>}</p>
     <p>На первый взгляд, подпрограмма updateCustomer выглядит довольно прилично. Похоже, что она реализует нужную нам логику – считывает запись, обновляет баланс и осуществляет запись обратно в файл. Однако, за внешним приличием и скрывается главная проблема. Подпрограммы readCustomer и writeCustomer тесно связаны между собой <a l:href="#n_27">[27]</a> – они совместно используют глобальную переменную cFile. Подпрограмма readCustomer открывает файл и сохраняет указатель файла в переменной cFile, а подпрограмма writeCustomer использует сохраненный указатель для закрытия файла по окончании работы. Эта глобальная переменная даже не появляется в подпрограмме updateCustomer.</p>
     <p>Почему эту программу можно считать неудачной? Представим несчастную даму-программистку из службы сопровождения, которой сказали, что спецификация изменилась – баланс должен обновляться только в том случае, если его новое значение неотрицательное. Дама открывает файл с исходным текстом и изменяет подпрограмму updateCustomer:</p>
     <p>void updateCustomer(const char *fName, double newBalance) {</p>
     <p>Customer cRec;</p>
     <p>readCustomer(fName, &amp;cRec);</p>
     <p>if (newBalance &gt;= 0.0) {</p>
     <p>   cRec.balance = newBalance;</p>
     <p>   writeCustomer(&amp;cRec);</p>
     <p>  }</p>
     <p>}</p>
     <p>Во время испытания все выглядит замечательно. Однако когда программа вводится в эксплуатацию, она «падает» через несколько часов, выдавая сообщение "Слишком много открытых файлов". Поскольку подпрограмма writeBalance в ряде случаев не вызывается, то и файл не закрывается.</p>
     <p>У этой проблемы есть весьма неудачное решение – использовать специальный оператор выбора в подпрограмме updateCustomer:</p>
     <p>void updateCustomer(const char *fName, double newBalance) {</p>
     <p>Customer cRec;</p>
     <p>readCustomer(fName, &amp;cRec);</p>
     <p>if (newBalance»= 0.0) {</p>
     <p>  cRec.balance = newBalance;</p>
     <p>  writeCustomer(&amp;cRec);</p>
     <p>}</p>
     <p>else</p>
     <p>fclose(cFile);</p>
     <p>}</p>
     <p>Это устраняет проблему – файл закроется независимо от нового значения баланса, но эта процедура означает, что теперь связанными оказываются три подпрограммы (через глобальную переменную cFile). Мы попадаем в ловушку, и если мы продолжаем действовать в том же духе, то все полетит под откос.</p>
     <p>Подсказка "Доводите до конца то, что начинаете" говорит нам о том, что в идеале подпрограмма, которая назначает ресурс, обязана его и освобождать. Мы можем применить ее в данном случае, осуществляя небольшую реорганизацию программы:</p>
     <p>void readCustomer(FILE *cFile, Customer *cRec) {</p>
     <p>fread(cRec, sizeof(*cRec), 1, cFile);</p>
     <p>}</p>
     <p>void writeCustomer(FILE *cFile, Customer *cRec) {</p>
     <p>rewind(cFile);</p>
     <p>fwrite(cRec, sizeof(*cRec), 1, cFile);</p>
     <p>}</p>
     <p>void updateCustomer(const char *fName, double newBalance) {</p>
     <p>FILE *cFile;</p>
     <p>Customer cRec;</p>
     <p>cFile = fopen(fName, "r+"); // -&gt;&gt;&gt;</p>
     <p>readCustomer(cFile, &amp;cRec); //</p>
     <p>if (newBalance &gt;= 0.0) {  //</p>
     <p>  cRec.balance = newBalance; //</p>
     <p>  writeCustomer(cFile, &amp;cRec); //</p>
     <p>  } //</p>
     <p> Fclose(cFile);   // &lt;&lt;&lt;-</p>
     <p>}</p>
     <p>Теперь всю ответственность за файл несет подпрограмма updateCustomer. Она открывает файл и (заканчивая то, что уже начала) закрывает его перед выходом. Подпрограмма осуществляет балансировку использования файла: открытие и закрытие происходят на одном и том же месте, и очевидно, что каждой процедуре открытия будет соответствовать процедура закрытия. Реорганизация также позволяет избавиться от уродливой глобальной переменной.</p>
     <subtitle>Вложенное роспределение ресурса</subtitle>
     <p>Базовая схема распределения ресурсов может быть распространена на подпрограммы, которым одновременно необходимо более одного ресурса. Поэтому есть еще два предложения:</p>
     <p>1. Освобождайте ресурсы в последовательности, обратной той, в которой происходило их распределение. При этом можно избежать появления «осиротевших» ресурсов, если один из них содержит ссылки на другой.</p>
     <p>2. При распределении одного и того же набора ресурсов в различных местах программы необходимо осуществлять эту операцию в одном и том же порядке. Это уменьшает вероятность взаимоблокировки. (Если процесс А требует resource1 и собирается затребовать resource2, тогда как процесс В затребовал resource2 и пытается заполучить resource1, то два процесса окажутся в состоянии вечного ожидания.)</p>
     <p>Неважно, какой тип ресурсов используется, – транзакции, память, файлы, потоки, окна, к ним применима общая схема: кто бы ни назначал ресурс, он обязан нести ответственность за его освобождение. Однако эта концепция может получить дальнейшее развитие при работе с рядом языков программирования.</p>
    </section>
    <section>
     <title>
      <p>Объекты и исключения</p>
     </title>
     <p>Равновесие между распределениями ресурсов и их освобождениями напоминает о равновесии конструктора и деструктора класса. Класс представляет ресурс, конструктор создает конкретный для этого типа ресурса объект, а деструктор удаляет его из вашей области действия.</p>
     <p>Если вы программируете на объектно-ориентированном языке, то упаковка ресурсов в классы может принести пользу. Всякий раз, когда вам необходим конкретный тип ресурса, вы создаете экземпляр объекта указанного класса. Если объект выходит из области действия или повторно запрашивается сборщиком мусора, то деструктор объекта освобождает инкапсулированный ресурс.</p>
     <p>Этот подход обладает определенными преимуществами при работе с языками программирования типа С++, где исключения могут входить в противоречие с освобождением ресурсов.</p>
    </section>
    <section>
     <title>
      <p>Балансировка и исключения</p>
     </title>
     <p>Языки, поддерживающие исключения, могут сделать процедуру освобождения ресурса нетривиальной. Как удостовериться, что все ресурсы, назначенные до возбуждения исключения, освобождены надлежащим образом? В некоторой степени ответ зависит от языка программирования.</p>
     <subtitle>Балансировка ресурсов в исключениях языка С++</subtitle>
     <p>Язык С++ поддерживает механизм исключений типа try…catch. К сожалению, это означает, что всегда существует по крайней мере два возможных варианта выхода из подпрограммы, которая перехватывает, а затем повторно возбуждает исключение:</p>
     <p>void doSomething(void) {</p>
     <p>  Node *n = new Node;</p>
     <p>  try {</p>
     <p>   // do something</p>
     <p>  }</p>
     <p>  catch (…) {</p>
     <p>    delete n;</p>
     <p>    thow;</p>
     <p>  }</p>
     <p>delete n;</p>
     <p>}</p>
     <empty-line/>
     <p>Заметим, что созданный нами узел освобождается дважды – один раз во время нормального выхода из подпрограммы, а второй раз в обработчике исключений. Это явное нарушение принципа DRY и проблема в сопровождении, которая может возникнуть в любой момент.</p>
     <p>Однако в наших интересах воспользоваться семантикой языка С++. Локальные объекты автоматически разрушаются при выходе из блока, в котором они находятся. Это дает нам несколько вариантов. Если обстоятельства позволяют, можно поменять n: оно обозначает не указатель, а реальный объект Node в стеке:</p>
     <p>void doSomething1(void) {</p>
     <p>Node n;</p>
     <p>try {</p>
     <p>// делаем что-либо</p>
     <p>}</p>
     <p>catch (…) {</p>
     <p>throw;</p>
     <p> }</p>
     <p>}</p>
     <p>В этом случае мы используем С++ для автоматического разрушения объекта Node независимо от того, возбуждено исключение или нет.</p>
     <p>В случае, если замена указателя на объект невозможна, тот же самый эффект достигается при инкапсулировании ресурса (речь идет об указателе Node) в пределах другого класса.</p>
     <p>// Класс оболочки для ресурсов Node</p>
     <p>class NodeResource {</p>
     <p>  Node *n;</p>
     <p>public:</p>
     <p>  NodeResource() {n = new Node;}</p>
     <p> ~NodeResource() {delete n;}</p>
     <p> Node *operator -&gt;() {return n;}</p>
     <p>};</p>
     <p>void doSomething2(void) {</p>
     <p>NodeResource n; </p>
     <p>try {</p>
     <p>// do something</p>
     <p>}</p>
     <p>catch (…) {</p>
     <p>   throw;</p>
     <p> }</p>
     <p>}</p>
     <p>Теперь класс-оболочка NodeResource выступает гарантом того, что при разрушении его объектов происходит и разрушение соответствующих узлов. Для удобства класс оболочка предоставляет оператор разыменования – », с тем чтобы пользователи могли обращаться к полям в инкапсулированном объекте Node напрямую.</p>
     <p>Поскольку эта методика столь полезна, в стандартной библиотеке С++ имеется шаблонный класс autOjDtr, обеспечивающий автоматические оболочки для динамически размещаемых объектов.</p>
     <p>void doSomething3(void) {</p>
     <p>   auto_ptr &lt;Node&gt; р (new Node);</p>
     <p>// Обращение к узлу Node как р-»…</p>
     <p>// В конце узел автоматически удаляется</p>
     <p>}</p>
     <subtitle>Балансировка ресурсов в языке Java</subtitle>
     <p>В отличие от C++ язык Java реализует «ленивую» форму автоматического разрушения объекта. Объекты, ссылки на которые отсутствуют, считаются кандидатами на попадание в «мусор», и их метод finalize будет вызываться в любой момент, когда процедура сборки мусора будет претендовать на эти объекты. Представляя собой удобство для разработчиков, которым больше не приходится жаловаться на утечки памяти, в то же время он усложняет реализацию процедуры очистки ресурсов по схеме С + +. К счастью, разработчики языка Java глубокомысленно ввели компенсирующую языковую функцию – предложение finally. Если блок try содержит предложение finally, то часть программы, относящаяся к этому предложению, гарантированно исполняется только в том случае, если исполняется любая инструкция в блоке try. Неважно, возбуждается при этом исключение или нет (даже при выполнении оператора return программой в блоке try) – программа, относящаяся к предложению finally, будет выполнена. Это означает, что использование ресурса может быть сбалансировано с помощью программы типа:</p>
     <p>public void doSomething() throws IOException {</p>
     <p>File tmpFile = new File(tmpFileName); </p>
     <p>FileWriter tmp = new FileWriter(tmpFile);</p>
     <p> try {</p>
     <p>  // do some work</p>
     <p> }</p>
     <p> finally {</p>
     <p>  tmpFile.delete();</p>
     <p> }</p>
     <p>}</p>
     <p>Подпрограмма использует промежуточный файл, который мы хотим удалить, независимо от того, как подпрограмма заканчивает свою работу. Блок finally позволяет нам выразить это в сжатой форме.</p>
    </section>
    <section>
     <title>
      <p>Случаи, при которых балансировка ресурсов невозможна</p>
     </title>
     <p>Возникают моменты, когда основная схема распределения ресурсов просто не годится. Обычно это происходит в программах, которые используют динамические структуры данных. Одна подпрограмма выделяет область в памяти и связывает ее в структуру большего размера, где она и находится в течение некоторого времени.</p>
     <p>Хитрость здесь состоит в установлении семантического инварианта для выделения памяти. Необходимо решить, кто несет ответственность за данные в составной структуре. Что произойдет при освобождении структуры верхнего уровня? Есть три основных варианта развития событий:</p>
     <p>1. Структура верхнего уровня также несет ответственность за освобождение любых входящих в нее подструктур. Затем эти структуры рекурсивно удалят данные, содержащиеся в них, и т. д.</p>
     <p>2. Структура верхнего уровня просто освобождается. Любые структуры, на которые она указывает (и на которых нет других ссылок), становятся "осиротевшими".</p>
     <p>3. Структура верхнего уровня отказывается освобождать себя, если в нее входят какие-либо подструктуры.</p>
     <p>В этом случае выбор зависит от условий, в которых находится каждая взятая в отдельности структура данных. Однако этот выбор должен быть явным для каждого случая, и ваше решение должно реализовываться последовательно. Реализация любого из представленных вариантов на процедурном языке программирования типа С может представлять проблему: структуры данных сами по себе не являются активными. В этих условиях для каждой из основных структур предпочтительнее написать модуль, обеспечивающий стандартные средства распределения и освобождения. (Этот модуль также обеспечивает распечатку результатов отладки, преобразование в последовательную и параллельную формы и средства обхода.)</p>
     <p>И наконец, если отслеживание ресурсов становится слишком хитрой процедурой, можно создать собственную форму ограниченной автоматической сборки «мусора», реализуя схему подсчета ссылок для ваших динамически распределенных объектов. В книге "More Effective С++" ([Меу9б]) этой теме посвящен целый раздел.</p>
    </section>
    <section>
     <title>
      <p>Проверка баланса</p>
     </title>
     <p>Поскольку прагматики не доверяют никому, включая авторов книги, то мы полагаем, что во всех случаях неплохо было бы написать такую программу, которая осуществляла бы реальную проверку того, освобождены ли ресурсы надлежащим образом. Для большинства приложений это обычно означает создание оболочек для каждого типа ресурса и их использование для отслеживания всех распределений и освобождений. В некоторых точках программы логика диктует, что ресурсы находятся в определенном состоянии; для проверки этого и необходимо использовать оболочки.</p>
     <p>Например, в программе, выполняемой на протяжении длительного времени и обслуживающей запросы, наверняка есть одна-единственная точка в начале основного цикла обработки, в которой происходит ожидание прихода следующего запроса. Именно в этой точке можно получить подтверждение тому, что с момента последнего выполнения цикла использование ресурсов не увеличилось.</p>
     <p>При работе на более низком (но не менее полезном) уровне можно потратиться на инструментальные средства, которые (помимо всего прочего) проверяют выполняемые программы на наличие утечек памяти (регулярного неосвобождения области памяти). Весьма популярными являются Purify (www.rational.com) и Insure++ (www.parasoft.com).</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Проектирование по контракту</p>
     <p>• Программирование утверждений</p>
     <p>• Несвязанность и закон Деметера</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Несмотря на то, что не существует надежных способов удостовериться в том, что вы освободили ресурсы, в этом могут помочь некоторые технологии проектирования, если их применять последовательно. В данной главе обсуждалось, как установить семантический инвариант, с тем чтобы основные структуры данных могли управлять освобождением памяти. Подумайте, как с помощью принципа "Проектирование по контракту" можно было бы усовершенствовать эту идею.</p>
     <subtitle>Упражнения</subtitle>
     <p>22. Некоторые разработчики программ на С и С++ обращают особое внимание на необходимость установки указателя в NULL после освобождения области памяти, на которую он ссылается. Почему это можно считать удачной идеей? (Ответ см. в Приложении В.)</p>
     <p>23. Некоторые разработчики программ на языке Java обращают особое внимание на необходимость установки объектной переменной в NULL после окончания использования объекта. Почему это можно считать удачной идеей? (Ответ см. в Приложении В.)</p>
    </section>
   </section>
  </section>
  <section>
   <title>
    <p>Глава 5</p>
    <p>Гибкость против хрупкости</p>
   </title>
   <section>
    <p>Жизнь не стоит не месте.</p>
    <p>Не могут стоять на месте и программы, которые мы пишем. Чтобы не отставать от сегодняшнего, близкого к кошмару, темпа изменений, необходимо приложить все усилия для написания программ слабосвязанных и гибких, насколько это возможно. В противном случае мы придем к тому, что наша программа быстро устареет или станет слишком хрупкой, что не позволит устранять ошибки, и может в конечном итоге оказаться в хвосте сумасшедшей гонки в будущее.</p>
    <p>В разделе «Обратимость» говорится об опасностях необратимых решений. Мы расскажем вам, как принимать обратимые решения так, чтобы ваша программа смогла остаться гибкой и адаптируемой перед лицом нашего неопределенного мира.</p>
    <p>В начале необходимо рассмотреть связывание – взаимозависимость между модулями программы. В разделе "Несвязанность и закон Деметера" будет показано, как сохранить отдельные концепции и уменьшить связывание.</p>
    <p>Хороший способ сохранить гибкость – это писать программы меньшего размера. Изменение кода открывает перед вами возможность внесения новых дефектов. В разделе «Метапрограммирование» объясняется, как полностью вывести из текста программы подробности в то место, где их можно изменить безопаснее и проще.</p>
    <p>В разделе "Временное связывание" рассматриваются два временных аспекта применительно к связыванию. Зависите ли вы от того обстоятельства, что «тик» наступает раньше, чем «так»? Если вы хотите сохранить гибкость, то нет!</p>
    <p>Ключевым принципом в создании гибкой программы является отделение модели данных от их визуального представления, или воспроизведения. Несвязанность модели и ее визуального представления описана в разделе "Всего лишь визуальное представление".</p>
    <p>И наконец, существует методика несвязанности модулей в еще большей степени за счет предоставления "места встречи", где модули могут обмениваться данными анонимно и асинхронно. Эта тема освещена в разделе "Доски объявлений".</p>
    <p>Взяв эти методики на вооружение, вы можете написать программу, которая будет энергично вращаться – как в рок-н-ролле.</p>
   </section>
   <section>
    <title>
     <p>26</p>
     <p>Несвязанность и закон Деметера</p>
    </title>
    <epigraph>
     <p>Хорошая изгородь – добрые соседи.</p>
     <text-author>Роберт Фрост, Подготовка к выборам</text-author>
    </epigraph>
    <section>
     <p>В разделах «Ортогональность» и "Проектирование по контракту" мы высказали предположение, что выгодно писать «скромные» программы. Но эта «скромность» работает в двух направлениях: не раскрывайте себя перед другими и не общайтесь со слишком многими людьми.</p>
     <p>Шпионы, диссиденты, революционеры и им подобные часто организованы в небольшие группы, называемые ячейками. Хотя отдельные личности в каждой ячейке могут знать друг о друге, они не знают ничего об участниках других ячеек. Если одна ячейка раскрыта, то никакое количество "сыворотки правды" неспособно выбить из ее участников информацию об их сподвижниках вне пределов ячейки. Устранение взаимодействий между ячейками убережет всех.</p>
     <p>Мы полагаем, что этот принцип хорошо бы применить и к написанию программ. Разбейте вашу программу на ячейки (модули) и ограничьте взаимодействие между ними. Если один модуль находится под угрозой и должен быть заменен, то другие модули должны быть способны продолжить работу.</p>
    </section>
    <section>
     <title>
      <p>Сведение связанности к минимуму</p>
     </title>
     <p>Что произойдет, если появятся модули, которые знают друг о друге. В принципе ничего – вы не должны впадать в паранойю, как шпионы или диссиденты. Однако, необходимо внимательно следить за тем, со сколькими другими модулями вы взаимодействуете. Это важнее, чем то, каким образом вы пришли к взаимодействию с ними.</p>
     <p>Предположим, вы занимаетесь перепланировкой своего дома или строите дом с нуля. Обычная организация включает "генерального подрядчика". Вы нанимаете подрядчика для выполнения работ, но подрядчик выполняет или не выполняет эти работы сам; работа может быть предложена разнообразным субподрядчикам. Но, будучи клиентом, вы не имеете дело с субподрядчиками напрямую, генеральный подрядчик берет от вашего имени эту головную боль на себя.</p>
     <p>Нам бы хотелось воспользоваться той же моделью в программном обеспечении. Когда мы запрашиваем у объекта определенную услугу, то мы хотим, что бы эта услуга оказывалась от нашего имени. Мы не хотим, чтобы данный объект предоставлял нам еще какой-то объект, подготовленный третьей стороной, с которым нам придется иметь дело для получения необходимой услуги.</p>
     <p>Предположим, что вы пишете класс, генерирующий график по данным научного прибора. Научные приборы рассеяны по всему миру, каждый объект-прибор содержит объект-местоположение, который дает информацию о его расположении и часовом поясе. Вы хотите, чтобы ваши пользователи могли выбирать прибор и наносить его данные на график с отметкой часового пояса. Вы можете записать</p>
     <p>public void plotDate(Date aDate Selection aSelection) {</p>
     <p>  TimeZone tz =</p>
     <p>    ASelection.getRecorder().getLocation().getTimeZone();</p>
     <p>...</p>
     <p>}</p>
     <p>Но теперь подпрограмма построения графика без особой надобности связана с тремя классами – Selection, Recorder и Location. Этот стиль программирования резко увеличивает число классов, от которых зависит наш класс. Почему это плохо? Потому что при этом увеличивается риск того, что внесение несвязанного изменения в другой части системы затронет вашу программу. Например, если сотрудник по имени Фред вносит изменение в класс Location так, что он непосредственно более не содержит TimeZone, то вам придется внести изменения и в свою программу.</p>
     <p>Вместо того чтобы продираться через иерархию самостоятельно, просто спросите напрямую о том, что вам нужно:</p>
     <p>public void plotDate(Date aDate, TimeZone aTz) {</p>
     <p>  ...</p>
     <p>}</p>
     <p>plotDate(someDate, someSelection.getTimeZone());</p>
     <p>Мы добавили метод к классу Selection, чтобы получить часовой пояс от своего имени; подпрограмме построения графика неважно, передается ли часовой пояс непосредственно из класса Recorder, от некоего объекта, содержащегося в Recorder, или же класс Selection сам составляет другой часовой пояс. В свою очередь, подпрограмма выбора должна запросить прибор о его часовом поясе, оставив прибору право получить его значение из содержащегося в нем объекта Location.</p>
     <p id="_ednref28">Непосредственное пересечение отношений между объектами может быстро привести к комбинаторному взрыву <a l:href="#n_28">[28]</a> отношений зависимости. Признаки этого явления можно наблюдать в ряде случаев:</p>
     <p>1. В крупномасштабных проектах на языках С или С++, где команда компоновки процедуры тестирования длиннее, чем сама программа тестирования.</p>
     <p>2. «Простые» изменения в одном модуле, распространяющиеся в системе через модули, не имеющие связей.</p>
     <p>3. Разработчики, которые боятся изменить программу, поскольку они не уверены, как и на чем скажется это изменение.</p>
     <p>Системы, в которых имеется большое число ненужных зависимостей, отличаются большой сложностью (и высокими затратами) при сопровождении и в большинстве случае весьма нестабильны. Для того чтобы поддерживать число зависимостей на минимальном уровне, мы воспользуемся законом Деметера при проектировании методов и функций.</p>
    </section>
    <section>
     <title>
      <p>Закон Деметера для функций</p>
     </title>
     <p>Закон Деметера для функций [LH89] пытается свести к минимуму связывание между модулями в любой программе. Он пытается удержать вас от проникновения в объект для получения доступа к методам третьего объекта. Краткое содержание данного закона представлено на рисунке 5.1.</p>
     <p>Создавая «скромную» программу, в которой закон Деметера соблюдается в максимально возможной степени, мы можем добиться цели, выраженной в следующей подсказке:</p>
     <empty-line/>
     <cite>
      <p>Подсказка 36: Минимизируйте связывание между модулями</p>
     </cite>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>А не все ли равно?</p>
     </title>
     <p>Оказывает ли следование закону Деметера (каким бы хорошим он не был с точки зрения теории) реальную помощь в создании программ, более простых в сопровождении?</p>
     <p>Исследования [ВВМ96] показали, что классы в языке С++ с большими совокупностями откликов менее ошибкоустойчивы, чем классы с небольшими совокупностями (совокупность откликов представляет собой число функций, непосредственно вызываемых методами конкретного класса).</p>
     <p>Рис. 5.1. Закон Деметера для функций</p>
     <image l:href="#i_008.jpg"/>
     <p>Поскольку следование закону Деметера уменьшает размер совокупности отклика в вызывающем отклике, то классы, спроектированные данным образом, также будут менее склонны к наличию ошибок (см. [URL 56], где приводится более подробная информация о статьях и других источниках по проекту Деметера).</p>
     <p>Использование закона Деметера сделает вашу программу более адаптируемой и устойчивой, но не бесплатно: будучи "генеральным подрядчиком", ваша программа должна непосредственно делегировать полномочия и управлять всеми существующими субподрядчиками, не привлекая к этому клиентов вашего модуля. На практике это означает, что вы будете создавать большое количество методов-оболочек, которые просто направляют запрос далее к делегату. Эти методы-оболочки влекут за собой расходы во время исполнения и накладные расходы дискового пространства, которые могут оказаться весьма значительными, а для некоторых приложений даже запредельными.</p>
     <p>Как и при использовании любой методики, вы должны взвесить все «за» и «против» для конкретного приложения. В проекте схемы базы данных обычной практикой является «денормализация» схемы для улучшения производительности: нарушение правил нормализации в обмен на скорость выполнения. Подобного же компромисса можно достичь и в этом случае. На самом деле, обращая закон Деметера и плотно связывая несколько модулей, вы можете получить существенный выигрыш в производительности. Ваша конструкция работает прекрасно, пока она известна и приемлема для этих связываемых модулей.</p>
     <subtitle>Физическая несвязанность</subtitle>
     <p>В данном разделе мы много говорим о сохранении логической несвязанности между элементами проектируемой системы. Однако существует взаимозависимость другого рода, которая становится весьма существенной с увеличением масштаба систем. В своей книге "Large-Scale С++ Software Design" [Lak96] Джон Лакос обращается к вопросам, касающимся отношений между файлами, каталогами и библиотеками, составляющими систему. Игнорирование этих проблем физического проектирования в крупномасштабных проектах приводит, помимо прочих проблем, к тому, что цикл сборки может растягиваться на несколько дней, а процедуры модульного тестирования могут сорвать сроки готовности всей системы. Г-н Лакос приводит убедительные доказательства того, что логическое и физическое проектирование должно осуществляться в тандеме и что устранение повреждений в большом фрагменте программы, нанесенных ему циклическими зависимостями, представляется чрезвычайно трудным делом. Мы рекомендуем вам прочесть эту книгу, если вы участвуете в разработке крупномасштабных проектов, даже если вы осуществляете реализацию на языке, отличном от С++.</p>
     <p>В противном случае вы можете оказаться на пути к хрупкому, негибкому будущему. Или вообще оказаться без будущего.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Ортогональность</p>
     <p>• Обратимость</p>
     <p>• Проектирование по контракту</p>
     <p>• Балансировка ресурсов</p>
     <p>• Всего лишь визуальное представление</p>
     <p>• Команды прагматиков</p>
     <p>• Безжалостное тестирование</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Мы обсудили, как делегирование полномочий облегчает соблюдение закона Деметера и, следовательно, уменьшает связывание. Однако написание всех методов, необходимых для пересылки вызовов к делегированным классам, является утомительной процедурой, чреватой ошибками. Каковы преимущества и недостатки написания препроцессора, который автоматически генерирует эти вызовы? Должен ли этот препроцессор запускаться только единожды, или же он должен применяться как составная часть процесса сборки?</p>
     <subtitle>Упражнения</subtitle>
     <p>24. Мы обсудили концепцию физической несвязанности в последней врезке. Какой из указанных ниже файлов заголовка в языке С++ характеризуется более сильным связыванием с остальной системой? (Ответ см. в Приложении В.)</p>
     <p><emphasis><strong>person1.h</strong></emphasis></p>
     <p>#include <emphasis>"date.b" </emphasis></p>
     <p>class Person 1 {</p>
     <p>private:</p>
     <p>  Date myBirthdate;</p>
     <p>public:</p>
     <p>  Person1(Date &amp;birthDate);</p>
     <p>//...</p>
     <empty-line/>
     <p><emphasis><strong>person2.h</strong></emphasis></p>
     <p>class Date;</p>
     <p>class Person2 {</p>
     <p>private:</p>
     <p>   Date *myBirthdate;</p>
     <p>public:</p>
     <empty-line/>
     <p>25. В данном примере и примерах из упражнений 26 и 27 определите, являются ли показанные вызовы метода допустимыми с точки зрения закона Деметера. Первый пример написан на языке Java. (Ответом, в Приложении В.)</p>
     <p>public void showBalance(BankAccount acct) {</p>
     <p>  Money amt = acct.getBalance();</p>
     <p>  printToScreen(amt.printFormat());</p>
     <p>}</p>
     <empty-line/>
     <p>26. Этот пример также написан на языке Java. (Ответ см. в Приложении В.)</p>
     <p>public class Colada {</p>
     <p>  private Blender myBlender;</p>
     <p>  private Vector myStuff;</p>
     <p>  public Colada() {</p>
     <p>    myBlender = new Blender();</p>
     <p>    myStuff = new Vector));</p>
     <p>  }</p>
     <p>  private void doSomething() {</p>
     <p>     myBlender.addlngredients(myStuff.elements());</p>
     <p>  }</p>
     <p>}</p>
     <empty-line/>
     <p>27. Этот пример написан на языке С + +. (Ответ см. в Приложении В.)</p>
     <p>void processTransaction(BankAccount acct, int) {</p>
     <p>  Person *who;</p>
     <p>  Money amt;</p>
     <p>  amt.setValue(123.45);</p>
     <p>  acct.setBalance(amt);</p>
     <p>  who = acct.getOwnerQ;</p>
     <p>  markWorkflow(who-&gt;name(), SET BALANCE);</p>
     <p>}</p>
    </section>
   </section>
   <section>
    <title>
     <p>27</p>
     <p>Метапрограммирование</p>
    </title>
    <epigraph>
     <p>Никакая гениальность не спасает от любви к подробностям.</p>
     <text-author>Восьмой закон Леви</text-author>
    </epigraph>
    <section>
     <p>Подробности смешивают все в нашей первоначальной программе – особенно если эти подробности часто меняются. Каждый раз, когда нам приходится входить в программу и вносить в нее изменения для того, чтобы привести ее в соответствие с изменившейся бизнес-логикой, законодательством или вкусами руководства, мы рискуем нарушить систему, т. е. внести в нее новый дефект.</p>
     <p>Поэтому мы говорим: "Долой подробности!". Уберите их из программы. В этом случае мы можем сделать нашу программу гибкой при настройке и легко адаптирующейся к изменениям.</p>
    </section>
    <section>
     <title>
      <p>Динамическая конфигурация</p>
     </title>
     <p>Прежде всего мы хотим сделать системы гибкими при настройке. Это касается не только цвета экрана и текста, но и более глубоких вещей, таких как выбор алгоритмов, программ баз данных, технологии связующего программного обеспечения и стиля пользовательского интерфейса. Эти пункты должны реализовываться в виде вариантов конфигурации, а не за счет интеграции или технологии.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 37: Осуществляйте настройку, а не интеграцию</p>
     </cite>
     <empty-line/>
     <p>Используйте метаданные для спецификации вариантов настройки приложения: подгонки параметров, глобальных параметров пользователя, каталога, в который производится установка приложения, и т. д.</p>
     <p>Так что же такое метаданные? Строго говоря, метаданные – это данные о данных. Наиболее распространенным примером, вероятно, является схема базы данных или словарь данных. Схема содержит данные, которые описывают поля (столбцы) в терминах имен, длины и других атрибутов. Вы должны иметь возможность доступа к этой информации и ее обработки так, как если бы это были любые другие данные в этой базе.</p>
     <p>Мы используем этот термин в самом широком смысле. Метаданные – это любые данные, которые описывают приложение – как оно выполняется, какие ресурсы обязано использовать и т. д. Обычно доступ к данным и их использование осуществляется на этапе выполнения, а не компиляции. Вы используете метаданные все время, по крайней мере, это делают ваши программы. Предположим, вы щелкаете мышью для того, чтобы скрыть панель инструментов в интернет-браузере. Браузер будет сохранять эти глобальные параметры как метаданные в своего рода внутренней базе данных.</p>
     <p>Эта база данных может быть сформирована в собственном формате или может воспользоваться стандартным механизмом. При работе в операционной системе Windows таким механизмом является либо файл инициализации (используется суффикс .ini), либо записи в системном реестре. При работе с Unix подобная функциональная возможность обеспечивается системой X Window с помощью файлов Application Default. Java использует файлы Property. Во всех этих средах для извлечения значения вы указываете ключ. В других, более мощных и гибких реализациях метаданных используется встроенный язык сценариев (см. "Языки, отражающие специфику предметной области").</p>
     <p>При реализации этих глобальных параметров в браузере Netscape фактически использованы обе эти технологии. В версии 3 параметры сохранялись в виде пар "ключ-значение":</p>
     <cite>
      <p>SHOWTOOLBAR: False</p>
     </cite>
     <p>В версии 4 параметры больше напоминали JavaScript:</p>
     <cite>
      <p>user_pref("custtoolbar.Browser.Navigation_Toolbar.open", false);</p>
     </cite>
    </section>
    <section>
     <title>
      <p>Приложения, управляемые метаданными</p>
     </title>
     <p>Но мы хотим большего, нежели использовать метаданные для простых глобальных параметров. Мы хотим настраивать и управлять приложением через метаданные – насколько это возможно. Наша цель – думать описательно (обозначая, что должно быть сделано, а не как это должно быть сделано) и создавать высокодинамичные и адаптируемые программы. Это можно сделать, придерживаясь общего правила: программировать для общего случая и помещать всю специфику в другое место – за пределы компилируемого ядра программы.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 38: Помещайте абстракции в текст программы, а подробности – в область метаданных</p>
     </cite>
     <empty-line/>
     <p>Этот подход характеризуется несколькими преимуществами:</p>
     <p>• Он вынуждает вас делать конструкцию несвязанной, что приводит к созданию более гибкой и адаптируемой программы.</p>
     <p>• Он заставляет вас создавать более устойчивую, абстрактную конструкцию за счет отнесения подробностей, выводя все подробности за пределы программы.</p>
     <p>• Вы можете настроить приложение, не прибегая к его перекомпиляции. Вы также можете использовать этот уровень настройки для обеспечения обходных путей при критических дефектах систем, находящихся в эксплуатации.</p>
     <p>• Метаданные могут быть выражены способом, который находится намного ближе к предметной области, по сравнению с универсальным языком программирования (см. "Языки, отражающие специфику конкретной области").</p>
     <p>• Вы даже сможете реализовывать несколько различных проектов, используя то же самое ядро приложения, но с различными метаданными.</p>
     <p>Как правило, нам хочется отложить определение большинства подробностей на последний момент и оставить их как можно менее сложными для изменения. Создавая решение, позволяющее нам вносить изменения быстро, мы можем лучше справляться с потоком направленных сдвигов, которые погубили многие проекты (см. "Обратимость").</p>
     <subtitle>Бизнес-логика</subtitle>
     <p>Итак, мы выбрали механизм базы данных в качестве опции настройки и предусмотрели метаданные для определения стиля пользовательского интерфейса. Можем ли мы сделать большее? Несомненно.</p>
     <p>Поскольку стратегия и бизнес-правила подвергнутся изменениям скорее, нежели любые другие аспекты проекта, есть смысл поддерживать их в очень гибком формате.</p>
     <p>Например, приложение, автоматизирующее процесс закупок, может включать в себя различные корпоративные стратегии. Может быть, вы производите оплату небольшим фирмам-поставщикам через 45 дней, а большим – через 90 дней. Сделайте настраиваемыми определения типов поставщиков, а также самих периодов времени. Используйте возможность обобщения.</p>
     <p>Возможно, вы создаете систему с ужасающими требованиями к последовательности операций. Действия начинаются и заканчиваются согласно сложным (и изменяющимся) бизнес-правилам. Подумайте об их реализации в виде некой системы на основе правил (или экспертной системы), встроенных в ваше приложение. Тем самым вы осуществите его настройку за счет написания правил, а не программы.</p>
     <p>Менее сложная логика может быть выражена при помощи мини-языка, что делает необязательным повторную компиляцию и развертывание при изменении среды. Пример приведен в разделе "Языки, отражающие специфику предметной области".</p>
     <subtitle>Когда осуществлять настройку</subtitle>
     <p>Как было упомянуто в разделе "Преимущество простого текста", рекомендуется представлять метаданные о настройке в формате простого текста – это делает жизнь проще.</p>
     <p>Но когда программа должна осуществлять считывание этой настройки? Многие программы осуществляют просмотр только при неудачном запуске. Если вам необходимо изменить настройку, это вынуждает вас перезапускать приложение. Более гибким подходом является написание программ, которые могут перезагружать свои настройки во время выполнения. Но эта гибкость обходится недешево: она более сложна в реализации.</p>
     <p>Рассмотрим, как будет использоваться приложение: если это продолжительный серверный процесс, то вам понадобится некий механизм для повторного считывания и применения метаданных в ходе выполнения программы. Для небольшого клиентского приложения с графическим интерфейсом, которое перезапускается достаточно быстро, это может и не понадобиться.</p>
     <p>Данное явление не ограничивается прикладными программами. Все мы раздражаемся, если операционные системы заставляют нас проводить перезагрузку при установке простых приложений или изменении совершенно безвредного параметра.</p>
     <subtitle>Пример: пакет Enterprise Java Beans</subtitle>
     <p>Пакет EJB (Enterprise Java Beans) является интегрированной средой, предназначенной для упрощения программирования в распределенной среде, основанной на транзакциях. Этот пакет упоминается в связи с тем, что он иллюстрирует использование метаданных для настройки приложений и упрощения процедуры написания программы.</p>
     <p>Предположим, что вы хотите создать некоторую программу на языке Java, которая будет принимать участие в транзакциях на различных машинах, с базами данных от различных производителей и с разными моделями потоков и распределения нагрузки.</p>
     <p>Хорошая новость: вам не нужно беспокоиться обо всем этом. Вы пишете так называемый bean-элемент – отдельный объект, который следует определенным соглашениям, и помещаете его в контейнер bean-элементов, управляющий многими низкоуровневыми средствами от вашего имени. Вы можете писать программу для bean-элемента, не включая какие-либо транзакционные операции или управление потоками; пакет EJB использует метаданные для указания способа обработки транзакций.</p>
     <p>Назначение потока и распределение нагрузки указываются как метаданные для основной службы транзакций, используемой контейнером. Это разделение допускает большую гибкость при динамической настройке среды во время работы.</p>
     <p>Контейнер bean-элемента может управлять транзакциями от имени bean-элемента одним из нескольких различных способов (включая вариант управления собственными обновлениями и отменой транзакций). Все параметры, воздействующие на поведение bean-элемента, указаны в описателе развертывания последнего – объекте, преобразованном в последовательную форму и содержащем нужные метаданные.</p>
     <p>Распределенные системы, подобные EJB, прокладывают путь в новый мир – мир настраиваемых, динамичных систем.</p>
     <subtitle>Совместная настройка</subtitle>
     <p>Выше уже говорилось о пользователях и разработчиках, настраивающих динамические приложения. Но что происходит, если вы позволяете приложениям настраивать друг друга? Речь идет о программах, которые адаптируются к операционной среде. Незапланированная, импровизированная настройка существующего программного обеспечения является мощной концепцией.</p>
     <p>Операционные системы уже способны подстраивать себя при загрузке под аппаратное обеспечение, a web-браузеры автоматически обновляются, инсталлируя новые компоненты.</p>
     <p>Большие приложения, с которыми вы работаете, имеют проблемы с управлением различными версиями данных и различными версиями библиотек и операционных систем. Возможно, здесь будет полезен более динамичный подход.</p>
     <p>Не пишите нежизнеспособных программ</p>
     <p>В отсутствие метаданных ваша программа не является столь адаптируемой или гибкой, какой она могла бы стать в противном случае. Плохо ли это? В реальном мире виды, которые не могут адаптироваться, умирают.</p>
     <p id="_ednref29">Птицы додо не смогли приспособиться к присутствию людей и домашних животных на острове Маврикий и быстро вымерли <a l:href="#n_29">[29]</a>. Это было первое документально подтвержденное исчезновение вида от рук человека.</p>
     <p>Не дайте вашему проекту (или карьере) повторить судьбу птицы додо.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Ортогональность</p>
     <p>• Обратимость</p>
     <p>• Языки, отражающие специфику предметной области</p>
     <p>• Преимущества простого текста</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Работая над текущим проектом, подумайте о следующем: какая часть программы может быть убрана из нее и перемещена в область метаданных. Как в итоге будет выглядеть «ядро» программы? Сможете ли вы повторно использовать это ядро в контексте иного приложения?</p>
     <subtitle>Упражнения</subtitle>
     <p>28. Что из нижеследующего лучше представить в виде фрагмента программы, а что вывести за ее пределы в область метаданных?</p>
     <p>1. Назначения коммуникационных портов</p>
     <p>2. Поддержка выделения синтаксиса различных языков в программе редактирования</p>
     <p>3. Поддержка редактора для различных графических устройств</p>
     <p>4. Конечный автомат для программы синтаксического анализа или сканера</p>
     <p>5. Типовые значения и результаты, используемые в тестировании модулей</p>
    </section>
   </section>
   <section>
    <title>
     <p>28</p>
     <p>Временное связывание</p>
    </title>
    <section>
     <p>Временное связывание – о чем это? – спросите вы. Это – о времени.</p>
     <p>Время – аспект, который часто игнорируется в архитектуре программного обеспечения. Единственный временной параметр, который занимает наш ум – это время выполнения проекта, время, оставшееся до отправки продукта заказчику, но здесь разговор не об этом, а о роли временного фактора как элемента проектирования самого программного обеспечения. Существует два временных аспекта, представляющих для нас важность: параллелизм (события, происходящие в одно и то же время) и упорядочивание (относительное положение событий во времени).</p>
     <p>Обычно мы не приступаем к программированию, держа в голове тот или иной аспект. Когда люди садятся за проектирование, разработку архитектуры или написание программы, события стремятся к линейности. Это и есть способ мышления большинства людей – сначала сделать «это», а потом всегда сделать «то». Но этот способ мышления приводит к связыванию во времени. Метод А всегда вызывается перед методом В; одновременно должен формироваться только один отчет; необходимо подождать перерисовки экрана до получения отклика на щелчок мыши. «Тик» обязан происходить раньше, чем "так".</p>
     <p>Этот подход не отличается большой гибкостью и реализмом.</p>
     <p id="_ednref30">Нам приходится учитывать параллелизм <a l:href="#n_30">[30]</a> и думать о несвязанности любых временных или упорядоченных зависимостей. При этом мы выигрываем в гибкости и уменьшаем любые зависимости, основанные на времени во многих областях разработки: анализе последовательности операций, архитектуре, проектировании и развертывании.</p>
    </section>
    <section>
     <title>
      <p>Последовательность операций</p>
     </title>
     <p id="_ednref31">При работе над многими проектами, нам приходится моделировать и анализировать последовательности операций пользователей, что является частью анализа требований. Мы хотели бы выяснить, что может происходить одновременно, а что – в строгой последовательности. Одним из способов осуществить задуманное является создание диаграммы последовательностей, с помощью системы обозначений наподобие языка UML (унифицированного языка моделирования) <a l:href="#n_31">[31]</a>.</p>
     <p>Диаграмма состоит из совокупности действий, изображенных в виде прямоугольников с закругленными уголками. Стрелка, выходящая из одной операции, идет либо к другой операции (которая может начаться после того, как первая закончится) либо к жирной линии, называемой полосой синхронизации. Как только все операции, направленные к полосе синхронизации, завершаются, можно перемещаться по стрелкам, идущим от полосы синхронизации. Операция, на которую не указывают никакие стрелки, может быть начата в любой момент.</p>
     <p>Вы можете использовать диаграммы, чтобы добиться максимального параллелизма, определив те процессы, которые могли бы осуществляться параллельно, но не осуществляются.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 39: Анализируйте последовательность операций для увеличения параллелизма</p>
     </cite>
     <empty-line/>
     <p>Например, в проекте блендера для коктейлей (упражнение 17) пользователи могут вначале описать последовательность операций следующим образом:</p>
     <p>1. Открыть блендер</p>
     <p>2. Открыть упаковку со смесью "Пинаколада"</p>
     <p>3. Засыпать смесь в блендер</p>
     <p>4. Отмерить полчашки белого рома</p>
     <p>5. Влить ром</p>
     <p>6. Добавить 2 чашки льда</p>
     <p>7. Закрыть блендер</p>
     <p>8. Перемешивать в течение 2 мин</p>
     <p>9. Открыть блендер</p>
     <p>10. Взять бокалы</p>
     <p>11. Украсить</p>
     <p>12. Налить</p>
     <p>Хотя они описывают эти операции последовательно (и даже могут выполнять их последовательно), заметим, что многие из них могли бы выполняться параллельно, как показано на блок-схеме (см. рис. 5.2).</p>
     <p>Это может открыть вам глаза на реально существующие зависимости. В этом случае задачи высшего уровня приоритета (1, 2, 4, 10 и 11) могут выполняться параллельно, как бы авансом. Задачи 3, 5 и 6 могут выполняться параллельно, но позже.</p>
     <p>Если бы вы участвовали в конкурсе по приготовлению коктейлей «Пинаколада», эти оптимальные решения выгодно отличали бы вас от всех остальных.</p>
     <empty-line/>
     <p>Рис. 5.2. Диаграмма на языке UML: приготовление коктейля "Пинаколада"</p>
     <image l:href="#i_009.jpg"/>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>Архитектура</p>
     </title>
     <p>Несколько лет назад мы написали систему оперативной обработки транзакций (OLAP – on-line transaction processing). В простейшем варианте все, что должна была сделать система, – это принять запрос и обработать транзакцию в сравнении с БД. Но мы написали трехзвенное, многопроцессорное распределенное приложение: каждый компонент представлял собой независимую единицу, которая выполнялась параллельно со всеми другими компонентами. Хотя при этом возникает впечатление большой работы, это не так: при написании этого приложения мы использовали преимущество временной несвязанности. Рассмотрим этот проект более подробно.</p>
     <p>Система принимает запросы от большого числа каналов передачи данных и обрабатывает транзакции в рамках БД.</p>
     <p>Проект налагает следующие ограничения:</p>
     <p>• Операции с БД занимают сравнительно большое время.</p>
     <p>• При каждой транзакции мы не должны блокировать коммуникационные службы в момент обработки транзакции БД.</p>
     <p>• Производительность базы ухудшается за счет слишком большого числа параллельных сеансов.</p>
     <p>• Множественные транзакции осуществляются параллельно на каждой линии передачи данных.</p>
     <p>Решение, обеспечивающее наилучшую производительность и самый четкий интерфейс, выглядит подобно представленному на рисунке 5.3.</p>
     <empty-line/>
     <p>РИС. 5.3. Общая схема архитектуры системы оперативной обработки транзакций</p>
     <image l:href="#i_010.jpg"/>
     <empty-line/>
     <p id="_ednref32">Каждый прямоугольник обозначает отдельный процесс; процессы связываются через очереди работ. Каждый входной процесс отслеживает состояние одного входного канала связи и осуществляет запросы к серверу приложения. Все запросы являются асинхронными: как только входной процесс осуществляет текущий запрос, он сразу же возвращается к отслеживанию канала на наличие трафика. Точно так же сервер приложения осуществляет запросы процесса БД <a l:href="#n_32">[32]</a> и уведомляется в момент завершения отдельной транзакции.</p>
     <p>На этом примере также демонстрируется способ быстрого и грубого распределения нагрузки между множественными потребительскими процессами: это так называемая модель голодного потребителя.</p>
     <p>В модели голодного потребителя центральный планировщик заменяется на несколько независимых задач потребителя и централизованную очередь работ. Каждая задача потребителя захватывает некий фрагмент очереди работ и продолжает заниматься своим делом – его обработкой. Как только задача заканчивает свою работу, она возвращается к очереди за новой порцией. В этом случае, если выполнение какой-либо задачи срывается, другие задачи могут "натянуть поводья" и каждый отдельный компонент может продолжаться в своем собственном темпе. Происходит временная несвязанность одного компонента с другими.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 40: Проектируйте, используя службы</p>
     </cite>
     <empty-line/>
     <p>На самом деле, вместо компонентов мы создали службы – независимые, параллельные объекты, скрытые за четко определенными, непротиворечивыми интерфейсами.</p>
    </section>
    <section>
     <title>
      <p>Проектирование с использованием принципа параллелизма</p>
     </title>
     <p>Поскольку Java все чаще принимается в качестве платформы, многие разработчики перешли к многопоточному программированию. Но программирование с использованием потоков налагает на конструкцию некоторые ограничения – и это хорошо. Эти ограничения настолько полезны, что нам хотелось бы пребывать под их благодатным покровом, когда бы мы ни занимались написанием программ. Это поможет нам делать нашу программу несвязанной и бороться с так называемым "программированием в расчете на стечение обстоятельств" (см. ниже одноименный раздел).</p>
     <p>При работе с линейной программой легко сделать предположения, которые в конечном итоге приведут к небрежно написанным программам. Но параллелизм заставляет задумываться о происходящем несколько глубже – вы больше не находитесь в безвоздушном пространстве. Поскольку многие события могут теперь происходить "в одно и то же время", вы можете внезапно столкнуться с зависимостями, основанными на факторе времени. Прежде всего необходимо защитить любые глобальные или статические переменные от параллельного доступа. Теперь можно задать самому себе вопрос, зачем нужна глобальная переменная на первом месте. Кроме того, необходимо убедиться в том, что вы предоставляете непротиворечивую информацию о состоянии независимо от порядка вызовов. Например, в какой момент допускается опрашивание состояния вашего объекта? Если ваш объект находится в недопустимом состоянии в период между определенными вызовами, то вы, вероятно, полагаетесь на стечение обстоятельств – никто не вызовет ваш объект в этот момент времени.</p>
     <p>Предположим, что есть подсистема работы с окнами, в которой интерфейсные элементы вначале создаются, а затем отображаются на дисплее. Вам не разрешается задавать состояние в элементе, пока он не отобразится. В зависимости от заданных параметров программы вы можете полагаться на то условие, что ни один другой объект не может воспользоваться созданным элементом, пока вы не выведете его на дисплей.</p>
     <p>Но в параллельной системе это может и не выполняться. При вызове объекты всегда обязаны находиться в допустимом состоянии, а они могут вызываться в самое неподходящее время. Вы обязаны убедиться, что объект находится в допустимом состоянии в любой момент, когда потенциально он может быть вызван. Зачастую эта проблема возникает с классами, которые определяют отдельные программы конструктора и инициализации (где конструктор не оставляет объект в инициализированном состоянии). Используя инварианты класса, обсуждаемые в разделе "Проектирование по контракту", вы сможете избежать этой ловушки.</p>
     <subtitle>Четкие интерфейсы</subtitle>
     <p>Размышления о параллелизме и зависимостях, упорядоченных во времени, могут заставить вас проектировать более четкие интерфейсы. Рассмотрим библиотечную подпрограмму на языке С под названием strtok, которая расщепляет строку на лексемы.</p>
     <p id="_ednref33">Конструкция strtok не является поточно-ориентированной <a l:href="#n_33">[33]</a>, но это не самое плохое, рассмотрим временную зависимость. Первый раз вы обязаны вызвать подпрограмму Strtok с переменной, которую вы хотите проанализировать, а во всех последующих вызовах использовать NULL вместо этой переменной. Если переменная принимает значение, отличное от NULL, программа повторно производит разбор содержимого буфера. Не принимая во внимание потоки, предположим, что вы собираетесь использовать Strtok для одновременного синтаксического анализа двух отдельных строк:</p>
     <p>char buf1[BUFSIZ];</p>
     <p>char buf2[BUFSIZ];</p>
     <p>char *p, *q;</p>
     <p>strcpy(bufl, "это тестовая программа");</p>
     <p>strcpy(buf2, "которая не будет работать");</p>
     <p>р = strtck(buf1," ");</p>
     <p>q = strtok(buf2," ");</p>
     <p>while (p &amp;&amp; q) {</p>
     <p>  printf("%s %s\n", p, q);</p>
     <p>  p = strtok(NULL, " ");</p>
     <p>  q = strtok(NULL, " ");</p>
     <p>}</p>
     <p>Представленная программа работать не будет: существует неявное состояние, сохраняющееся в strtok между запросами. Вам придется использовать Strtok одновременно только с одним буфером.</p>
     <p>Конструкция синтаксического анализатора строк на языке Java будет отличаться от указанной выше. Она должна быть поточно-ориентированной и представлять непротиворечивое состояние.</p>
     <p>StringTokenizer st1 = new StringTokenizer("this is a test");</p>
     <p>StrJngTokenlzer st2 = new StringTokenizer("this test will work");</p>
     <p>while (st1.hasMoreTokens() &amp;&amp; st2.hasMoreTokens()) {</p>
     <p>  System.out.println(st1.nextToken());</p>
     <p>  System.out.println(st2.nextToken());</p>
     <p>}</p>
     <p>Программа StringTokenizer обладает более четким и простым в сопровождении интерфейсом. Она не содержит в себе никаких сюрпризов и в будущем не приводит к появлению таинственных дефектов, чего нельзя сказать о программе Strtok.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 41: При проектировании всегда есть место параллелизму</p>
     </cite>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>Развертывание</p>
     </title>
     <p>Как только вы спроектировали архитектуру с элементом параллельности, задача об управлении многими параллельными службами упрощается: модель становится всеобъемлющей.</p>
     <p>Теперь вы можете проявить гибкость относительно способа развертывания приложения: по автономной модели, модели «клиент-сервер» или по n-звенной модели. Создавая архитектуру системы на основе независимых служб, вы также придаете динамизм процессу конфигурирования. Рассчитывая на параллелизм и разделяя операции во времени, вы получаете вес эти варианты, включая автономный вариант развертывания, где вы можете отказаться от параллелизма.</p>
     <p>Другой путь (попытка внести параллелизм в непараллельное приложение) представляется намного сложнее. Если мы проектируем с учетом параллелизма, то со временем нам легче обеспечивать расширяемость и производительность, а если этот момент не настает, мы все равно получаем выгоду от более четкого интерфейса.</p>
     <p>Так, может быть, пора?</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Проектирование по контракту</p>
     <p>• Программирование в расчете на стечение обстоятельств</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Сколько задач вы выполняете параллельно, готовясь к работе? Можете ли вы выразить это с помощью диаграммы на языке UML? Можете ли вы найти иной, более быстрый способ подготовки к работе, придав своим действиям больший параллелизм?</p>
    </section>
   </section>
   <section>
    <title>
     <p>29</p>
     <p>Всего лишь визуальное представление</p>
    </title>
    <epigraph>
     <p>Каждый смертный все же видит</p>
     <p>Только то, что хочет видеть,</p>
     <p>Отметая остальное.</p>
     <p>Ля-ля-ля…</p>
     <text-author>П. Саймон и А. Гарфункель, Боксер</text-author>
    </epigraph>
    <section>
     <p>Ранее нас учили не писать программы одним большим куском, а использовать принцип "разделяй и властвуй" и разбивать программу на модули. У каждого молу-ля есть свои собственные обязанности; модуль (или класс) считается четко определенным, если у него имеется одна четко обозначенная обязанность.</p>
     <p>Но как только вы разбиваете программу на различные модули, основанные на обязанностях, вы сталкиваетесь с новой проблемой. Каким образом объекты общаются друг с другом на стадии выполнения программы? Как вы управляете логическими зависимостями между ними? Другими словами, как вы осуществляете синхронизацию изменений состояния (или обновление значений данных) различных объектов? Этой работе должна быть присуща четкость и гибкость – мы не хотим, чтобы они узнали друг о друге слишком много. Мы хотим, чтобы каждый модуль был похож на героя песни Саймона и Гарфункеля и видел только то, что хочет увидеть.</p>
     <p>Начнем с концепции события. Событие представляет собой специальное сообщение, в котором говорится: "Только что случилось нечто интересное" (разумеется, с точки зрения наблюдателя). Мы можем использовать события, чтобы сигнализировать одному объекту об изменениях, произошедших с другим объектом, в которых последний может быть заинтересован.</p>
     <p>Подобное использование событий сводит к минимуму связывание между двумя объектами – отправителю события не нужно обладать явной информацией о получателе. На самом деле могут существовать и множественные получатели, каждый из которых сосредоточен на собственном перечне основных операций (отправитель же находится в блаженном неведении относительно этого факта).</p>
     <p>Однако при использовании событий необходимо соблюдать некоторую осторожность. Например, в одной из ранних версий Java одна подпрограмма получила все события, предназначенные для специфического приложения. Это не совсем подходит для облегчения сопровождения или развития программы.</p>
    </section>
    <section>
     <title>
      <p>Протокол "Публикация и подписка"</p>
     </title>
     <p>Почему считается дурным тоном пропускать все события через одну-единственную программу? Потому что при этом нарушается инкапсулирование объекта – теперь этой подпрограмме приходится получать сокровенную информацию о взаимодействии между многими объектами. Это также способствует увеличению связывания, а мы пытаемся его уменьшить. Поскольку и самим объектам приходится получать информацию об этих событиях, то, по всей вероятности, вы собираетесь нарушить принцип DRY, принцип ортогональности и, может быть, некоторые разделы Женевской конвенции. Быть может, вам случалось видеть подобные программы – их доминантой является огромный оператор case или многообразная конструкция if-then. Мы можем сделать это изящнее.</p>
     <p id="_ednref34">Объекты должны иметь возможность регистрации только для приема событий, которые им нужны, и никогда не должны посылать события, которые им не нужны. Мы не хотим, чтобы наши объекты подверглись спаммингу! Вместо этого мы можем воспользоваться протоколом типа "публикация и подписка", который представлен на рисунке 5.4 с помощью диаграммы последовательностей на языке UML <a l:href="#n_34">[34]</a>.</p>
     <p>На блок-схеме последовательности показан поток сообщений между несколькими объектами, которые располагаются по столбцам. Каждое сообщение обозначено стрелкой с текстом, идущей от столбца отправителя к столбцу получателя. Звездочка у текста означает, что возможна посылка более одного сообщения данного типа.</p>
     <empty-line/>
     <p>Рис. 5.4. Протокол "Публикация и подписка"</p>
     <image l:href="#i_011.jpg"/>
     <empty-line/>
     <p>Если нам интересны определенные события, которые генерируются объектом Publisher (Издатель), то все, что нам нужно, – это зарегистрироваться. Объект Publisher отслеживает все заинтересованные объекты Subscriber (Подписчик); когда объект Publisher генерирует событие, представляющее интерес, он, в свою очередь обращается к каждому объекту Subscriber, извещая их о том, что данное событие произошло.</p>
     <p>На эту тему существует несколько вариаций, отражающих другие стили обмена данными. Объекты могут использовать протокол "Публикация и подписка" на одноранговой основе (как показано выше), а также "программную шину", где централизованный объект поддерживает базу данных «слушателей» и осуществляет соответствующую диспетчеризацию. Вы даже можете получить схему, в которой критические события транслируются ко всем «слушателям» – как зарегистрированным, так и незарегистрированным. Одна из возможных реализаций событий в распределенной среде иллюстрируется службой сообщений CORBA, описанной во врезке "Служба событий CORBA" (см. ниже).</p>
     <p>Можно использовать протокол "Публикация и подписка" для реализации очень важного принципа проектирования: отделения самой модели от ее визуальных представлений. Начнем с примера графического интерфейса, используя конструкцию на языке Smalltalk, где зародилась данная концепция.</p>
    </section>
    <section>
     <title>
      <p>Принцип "модель-визуальное представление-контроллер»</p>
     </title>
     <p>Предположим, что есть приложение – электронная таблица. В дополнение к числам, расположенным в самой таблице, также имеется график, отображающий числа на гистограмме и диалоговое окно суммы с накоплением, отображающим сумму чисел в некотором столбце таблицы.</p>
     <empty-line/>
     <subtitle>Служба событий CORBA</subtitle>
     <p>Служба событий CORBA позволяет объектам-участникам отправлять и получать уведомления о событиях через общую шину, так называемый канал событий. Канал событий принимает решение по обработке событий, а также осуществляет разделение производителей и потребителей событий. Он работает в двух основных режимах: «проталкивание» и "вытягивание".</p>
     <p>В режиме «проталкивания» поставщики событий информируют канал событий о том, что событие произошло. Затем канал автоматически распространяет это событие ко всем объектам-клиентам, которые зарегистрировались, выражая свой интерес.</p>
     <p>В режиме «вытягивания» клиенты периодически опрашивают канал событий, который в свою очередь, опрашивает поставщика, предлагающего данные о событии в соответствии с запросом.</p>
     <p>Хотя служба событий CORBA может использоваться для реализации всех событийных моделей, описанных в данном разделе, ее можно рассматривать и в другом качестве. CORBA облегчает связь между объектами, написанными на различных языках программирования и выполняющимися на географически рассредоточенных машинах с различными архитектурами. Находясь на верхнем уровне CORBA, служба событий предоставляет вам способ, отличающийся отсутствием связанности и позволяющий взаимодействовать с приложениями, разбросанными по всему миру и написанными людьми, которых вы никогда не встречали, и пишущими на языках, о которых вы и знать не знаете.</p>
     <empty-line/>
     <p>Очевидно, мы не хотим иметь три отдельных копии одних и тех же данных. Поэтому мы создаем модель – сами данные и обычные операции для их обработки. Затем мы можем создать отдельные визуальные представления, которые отображают данные различными способами: в виде электронной таблицы, графика или поля суммы с накоплением. Каждое из этих визуальных представлений может располагать собственными контроллерами. Например, график может располагать неким контроллером, позволяющим приближать и отдалять объекты, осуществлять панорамирование относительно данных. Ни одно из этих средств не оказывает влияния на данные, только на это представление.</p>
     <p id="_ednref35">Это и является ключевым принципом, на котором основана парадигма "модель-визуальное представление-контроллер": отделение модели от графического интерфейса, ее представляющего, и средств управления визуальным представлением <a l:href="#n_35">[35]</a>.</p>
     <p>Действуя подобным образом, вы можете извлечь пользу из некоторых интересных возможностей. Вы можете поддерживать множественные визуальные представления для одной и той же модели данных. Вы можете использовать обычные средства просмотра со многими различными моделями данных. Вы даже можете поддерживать множественные контроллеры для обеспечения нетрадиционных механизмов ввода данных.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 42: Отделяйте визуальные представления от моделей</p>
     </cite>
     <empty-line/>
     <p>Ослабляя связанность между моделью и ее визуальным представлением/контроллером, вы приобретаете большую гибкость практически за бесценок. На самом деле, эта методика является одним из важнейших способов сохранения обратимости (см. "Обратимость").</p>
     <subtitle>Java: древовидное визуальное представление</subtitle>
     <p>Хорошим примером принципа "модель-визуальное представление-контроллер" является графический элемент в древовидной схеме Java. Элемент, отображающий дерево, активизируемое щелчком мыши, в действительности представляет собой набор нескольких различных классов, организованных по шаблону "модель-визуальное представление-контроллер".</p>
     <p>Все, что вам нужно сделать для получения полнофункционального элемента дерева, – это обеспечить источник данных, который соответствует интерфейсу TreeModel. Ваша программа становится моделью дерева.</p>
     <p>Визуальное представление создается классами TreeCellRenderer и TreeCellEditor, которые могут быть унаследованы и настроены для обеспечения различных цветов, шрифтов и пиктограмм в графическом элементе. JTree действует в качестве контроллера для элемента дерева и обеспечивает некоторую общую функциональную возможность просмотра.</p>
     <p>Осуществив разделение модели и ее визуального представления, мы серьезно упростили процесс программирования. Уже не нужно беспокоиться об элементе дерева. Вместо этого необходимо предоставить источник данных.</p>
     <p>Предположим, к вам подходит вице-президент фирмы и высказывает пожелание, чтобы вы быстро написали приложение, которое позволяет ему управлять структурной схемой фирмы, содержащейся в унаследованной базе данных на мэйнфрейме. Просто напишите оболочку, которая получает данные с мэйнфрейма, представляет ее в виде TreeModel, и – "Вуаля!" – у вас имеется полнофункциональный элемент дерева.</p>
     <p>Теперь можете капризничать и начать использовать классы средств просмотра; вы можете изменять представление узлов и использовать специальные пиктограммы, шрифты или цвета. Когда вице-президент вернется к вам и скажет, что новые корпоративные стандарты требуют использования для некоторых служащих пиктограммы "Веселый Роджер", то вы можете внести изменения в TreeCellRenderer, не затрагивая другие программы.</p>
    </section>
    <section>
     <title>
      <p>Отходя от графических интерфейсов</p>
     </title>
     <p>Хотя принцип "модель-визуальное представление-контроллер" обычно реализуется в контексте графического интерфейса, на самом деле он является универсальной методикой программирования. Визуальное представление – это некая интерпретация модели (возможно, подмножества), и она не обязана быть графической. Контроллер в большей части является механизмом координации и не должен ассоциироваться с устройством ввода любого типа.</p>
     <p>• <strong>Модель.</strong> Абстрактная модель данных, представляющая целевой объект. Модель не располагает непосредственной информацией о любых визуальных представлениях или контроллерах.</p>
     <p>• <strong>Визуальное представление.</strong> Способ интерпретации модели. Оно подписывается на изменения в модели и логические события, приходящие от контроллера.</p>
     <p>• <strong>Контроллер.</strong> Способ контроля визуального представления и снабжения модели новыми данными. Он осуществляет публикацию событий для модели и визуального представления.</p>
     <p>Рассмотрим пример с текстовым интерфейсом.</p>
     <p>Игра в бейсбол представляет собой уникальное явление. Где еще можно найти такие пустяки, как "самый результативный матч, сыгранный во вторник под дождем при искусственном освещении между командами, названия которых начинаются с гласной буквы"? Предположим, что нам поручили разработать программу для помощи бесстрашным дикторам, которым по должности полагается сообщать счет, статистику и прочие мелочи.</p>
     <p>Ясно, что нам необходима информация о матче, который проходит в настоящее время – играющие команды, условия, игрок, принимающий подачу, счет и т. д. Эти факты образуют наши модели; они будут обновляться по мере поступления новой информации (смена подающего, выбывание игрока, начался дождь…).</p>
     <p>Затем у нас появится ряд объектов – визуальных представлений, которые будут использовать эти модели. Один объект должен наблюдать за набираемыми очками – для обновления текущего счета. Другой объект может получать уведомления о новых игроках, отбивающих мяч, и извлекать краткую справку об их статистических показателях за год. Третий объект может просматривать данные и проверять, не установлен ли мировой рекорд. Можно даже использовать средство просмотра «мелочей», которое несет ответственность за придумывание сверхъестественных и бесполезных фактов, щекочущих нервы зрителей.</p>
     <empty-line/>
     <p>Рис. 5.5. Комментирование бейсбольного матча. Средства просмотра являются подписчиками модели.</p>
     <image l:href="#i_012.jpg"/>
     <empty-line/>
     <p id="_ednref36">Но мы не хотим, чтобы несчастный диктор работал со всеми этими окнами непосредственно. Вместо этого мы сделаем так, чтобы каждое из окон генерировало извещения об «интересных» событиях, и обеспечим возможность планирования показа с помощью некоторого высокоуровневого объекта <a l:href="#n_36">[36]</a>.</p>
     <p>Эти объекты (средства просмотра) внезапно стали моделями высокоуровневого объекта, который сам по себе может стать моделью для различных форматирующих средств просмотра. Одно такое средство просмотра могло бы создать сценарий для телесуфлера, с которым работает диктор, второе могло бы генерировать заставки непосредственно на спутниковом канале, а третье могло бы осуществлять обновление web-страниц телевизионной сети или бейсбольной команды (см. рис. 5.5).</p>
     <p>Подобная сеть "модель-средство просмотра" является универсальной (и весьма ценной) методикой проектирования. Каждый канал связи осуществляет отделение исходных данных от событий, их породивших; каждое новое средство просмотра есть некая абстракция. И поскольку отношения представляют собой сеть (а не линейную цепь), то мы обладаем большой гибкостью. Каждая модель может включать в себя много средств просмотра, а одно средство просмотра может работать со многими моделями.</p>
     <p>В усовершенствованных системах, наподобие описанной выше, полезно иметь окна отладки – специализированные окна, которые отображают подробности модели. Дополнение системы средством трассировки отдельных событий также способствует существенной экономии времени.</p>
    </section>
    <section>
     <title>
      <p>Все такой же связанный (после стольких лет)</p>
     </title>
     <p>Несмотря на то, что мы добились уменьшения связанности, прослушивающие процессы и генераторы событий (подписчики и издатели) все равно обладают некоторой информацией друг о друге. Например, в языке Java они обязаны прийти к соглашению об общих определениях интерфейса и вызовах.</p>
     <p>В следующем разделе мы рассмотрим способы дальнейшего уменьшения степени связанности при помощи формы "публикация и подписка", в которой ни один из участников не должен знать друг о друге или обращаться напрямую друг к другу.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Ортогональность</p>
     <p>• Обратимость</p>
     <p>• Несвязанность и закон Деметера</p>
     <p>• Доски объявлений</p>
     <p>• Все эти сочинения</p>
     <subtitle>Упражнения</subtitle>
     <p>29. Предположим, что имеется система бронирования авиабилетов, основанная на следующем принципе формирования авиарейса:</p>
     <p>public interface Flight {</p>
     <p>//Return false if flight full.</p>
     <p>public Boolean addPassenger(Passenger p);</p>
     <p>public void addToWaitlJst(Passenger p);</p>
     <p>public int getFlightCapacity();</p>
     <p>public int getNumPassengers();</p>
     <p>}</p>
     <p>Если вы добавляете имя пассажира в лист ожидания авиарейса, то при появлении вакантного места ему будет предложено воспользоваться этим рейсом автоматически.</p>
     <p>Чтобы составить расписание дополнительных рейсов, требуется большая работа с отчетами, заключающаяся в выискивании рейсов, количество мест на которых меньше или равно числу проданных билетов. Это срабатывает, но занимает много времени.</p>
     <p>Нам хотелось бы обладать большей гибкостью при обработке данных о пассажирах в листе ожидания и как-то решить проблемы с этим огромным отчетом – его формирование занимает слишком много времени. Воспользуйтесь идеями, изложенными в данном разделе, чтобы спроектировать этот интерфейс по-новому.</p>
    </section>
   </section>
   <section>
    <title>
     <p>30</p>
     <p>Доски объявлений</p>
    </title>
    <section>
     <epigraph>
      <p>На стене написано…</p>
     </epigraph>
     <p>Обычно вы не связываете понятие изящества с полицейскими детективами. Но рассмотрим пример того, как детективы используют доску объявлений для координации действий и расследования убийства.</p>
     <p>Предположим, что главный инспектор начинает с того, что устанавливает большую доску в комнате для заседаний. На ней он пишет один-единственный вопрос:</p>
     <p>ШАЛТАЙ-БОЛТАЙ (ПОЛ: МУЖСКОЙ, ЧЕЛОВЕК-ЯЙЦО): НЕСЧАСТНЫЙ СЛУЧАЙ ИЛИ УБИЙСТВО?</p>
     <p>Шалтай на самом деле упал, или его толкнули? Каждый детектив может внести свою лепту в раскрытие тайны этого возможного убийства, добавляя факты, показания свидетелей, любые судебные доказательства и т. д. По мере накопления данных детектив может заметить некую связь и также поместить на доску свои наблюдения или гипотезу. Этот процесс продолжается, передается от смены к смене, в нем участвуют различные лица и агенты, пока дело не будет закрыто. Примерный вид доски представлен на рисунке 5.6.</p>
     <p>Некоторые ключевые особенности подхода с применением доски объявлений:</p>
     <p>• Ни один из детективов не обязан знать о существовании какого-либо другого детектива – они лишь смотрят на доску в поисках новой информации и помещают на ней свои находки.</p>
     <p>• Детективы могут пройти подготовку по различным дисциплинам, могут обладать различным уровнем образования и опыта и могут даже не работать на той же территории. Их объединяет желание раскрыть дело и только.</p>
     <p>• Разные детективы могут приходить и уходить в ходе процесса, а также могут работать в различных сменах.</p>
     <p>• На доску можно помещать все, что угодно. Это могут быть изображения, тексты, вещественные доказательства и т. д.</p>
     <empty-line/>
     <p>Рис. 5.6. Кто-то обнаружил связь между карточными долгами Шалтая и распечаткой телефонных разговоров. Возможно, ему угрожали по телефону.</p>
     <image l:href="#i_013.jpg"/>
     <empty-line/>
     <p>Мы работали над несколькими проектами, которые включали в себя сбор распределенных данных или данных о последовательности операций. Каждый проект, решение которого строилось на основе простой модели доски объявлений, давал нам надежную метафору, с которой мы работаем: все вышеперечисленные средства, используемые детективами, также применимы к объектам и программным модулям.</p>
     <p>Доска объявлений позволяет полностью отделять объекты друг от друга, обеспечивая тем самым пространство, на котором потребители и производители информации могут обмениваться данными анонимно и в асинхронном режиме. Как вы могли догадаться, это также позволило уменьшить объем программ, которые нам приходилось писать.</p>
    </section>
    <section>
     <title>
      <p>Реализация концепции доски объявлений</p>
     </title>
     <p>Изначально доски объявлений (на основе компьютеров) разрабатывались в системах искусственного интеллекта для решения крупномасштабных и сложных задач – распознавания речи, принятии решений на основе баз знаний и т. д.</p>
     <p>Современные распределенные системы (подобные доскам объявлений), такие как JavaSpaces и Т Spaces [URL 50, URL 25], основаны на модели пар «ключ-значение», изначально пропагандировавшейся в системе Linda [CG90], где этот принцип был известен под именем "область кортежей".</p>
     <p>При помощи этих систем можно сохранять активные объекты Java (а не только данные) на доске объявлений и извлекать их при частичном соответствии полей (через шаблоны и трафаретные символы) или с использованием подтипов. Предположим, что имеется тип Author, являющийся подтипом Person. Вы можете искать доску объявлений, содержащую объекты Person, используя шаблон Author, в котором параметру lastName присвоено значение «Shakespeare». В результате вы получите автора по имени Bill Shakespeare, а не садовника по имени Fred Shakespeare. Основные операции в системе JavaSpaces:</p>
     <p>Название – Функция</p>
     <p><strong>read</strong>  – Осуществляет поиск и извлечение данных из данной области.</p>
     <p><strong>write</strong>  – Помещает некий элемент в данную область.</p>
     <p><strong>take</strong>  – Подобен read, но также удаляет элемент из данной области.</p>
     <p><strong>notify</strong>  – Задает вид уведомления, которое присылается при записи объекта, совпадающего с шаблоном.</p>
     <p>Система Т Spaces поддерживает аналогичный набор операций, но с другими наименованиями и несколько другой семантикой. Обе системы построены подобно базе данных; они обеспечивают элементарные операции и распределенные транзакции, гарантирующие целостность данных.</p>
     <p>Поскольку мы можем хранить объекты, то можно использовать доску объявлений для проектирования алгоритмов, основанных на потоке объектов, а не только на данных. Любой может задать свидетелю вопросы, касающиеся расследования, поместить протокол и переместить свидетеля на другой участок доски, где он отвечал по-другому (если вы дадите и ему прочесть написанное на доске).</p>
     <p>Большим преимуществом систем подобного типа является единственный непротиворечивый интерфейс к "доске объявлений". При построении обычного распределенного приложения вы можете затратить много времени, обрабатывая уникальные вызовы API для каждой распределенной транзакции и интеракции в системе. Проект быстро станет сущим кошмаром, если произойдет комбинаторный взрыв интерфейсов и интеракций.</p>
     <subtitle>Как организовать доску объявлений</subtitle>
     <p>Когда детективы ведут расследование крупных дел, то доска объявлений может прийти в беспорядок и найти на ней нужные данные станет сложно. Решение состоит том, чтобы разбить доску на секции и начать каким-то образом упорядочивать данные.</p>
     <p>Различные программные системы осуществляют это разбиение по-разному; одни используют достаточно однородные зоны или группы интересов, тогда как другие используют более иерархичную древовидную структуру.</p>
     <empty-line/>
     <p>Стиль программирования под названием "доска объявлений" снимает потребность во многих интерфейсах, позволяя создавать более элегантную и последовательную систему.</p>
    </section>
    <section>
     <title>
      <p>Пример приложения</p>
     </title>
     <p>Предположим, что мы пишем программу для принятия и обработки заявлений на ипотечный кредит или ссуду. Законы, действующие в этой области, отличаются одиозной сложностью, и чиновникам различного уровня всегда есть что сказать по данному поводу. Кредитор обязан убедить заявителя в том, что он должен раскрыть некоторые факты и запросить определенную информацию, но не должен задавать других конкретных вопросов и т. д.</p>
     <p>Помимо отвратительных правовых норм, нам приходится бороться со следующими проблемами.</p>
     <p>• Порядок поступления данных никак не гарантируется. Например, выполнение запросов для проверки кредитоспособности или поиска названия требует существенных временных затрат, тогда как фамилия и адрес могут быть найдены сразу.</p>
     <p>• Сбор данных может осуществляться разными людьми, рассеянными по разным офисам, расположенным в различных часовых поясах.</p>
     <p>• Некоторые данные могут собираться автоматически с помощью других систем. Эти данные могут поступать в асинхронном режиме.</p>
     <p>• И тем не менее, некоторые данные могут находится в зависимости от других данных. Например, вы не сможете начать поиск автомобиля по названию, пока не получите подтверждение права собственности или страховки.</p>
     <p>• Поступление новых данных может вызвать появление новых вопросов и стратегии действий. Предположим, что проверка кредитоспособности заканчивается неубедительным результатом; теперь вам придется заполнить еще пять формуляров и, возможно, сдать анализ крови.</p>
     <p>Вы можете попробовать обрабатывать всевозможные сочетания и обстоятельства, используя систему автоматизации документооборота. Существует большое число подобных систем, но они могут быть сложными и требовать интенсивной работы программистов. При изменении нормативов необходимо менять и документооборот: людям придется изменять процедуры и переписывать встроенную логику.</p>
     <p>Доска объявлений в сочетании с механизмом правил, который включает в себя юридические требования, представляет собой изящное решение имеющих место проблем. Порядок поступления данных является несущественным параметром: регистрация некоего факта активизирует соответствующие правила. Обработка сигналов обратной связи также не представляет труда: результат действия любой совокупности правил может поместить на доску и вызвать активизацию более подходящих в данной ситуации правил.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 43: Используйте доски объявлений для координации потоков работ</p>
     </cite>
     <empty-line/>
     <p>Можно использовать доску для координации неоднородных фактов и агентов, одновременно сохраняя независимость и даже изоляцию участников друг от друга.</p>
     <p>Вы можете добиться тех же результатов, действуя и более грубыми методами, но в результате получите более хрупкую систему. Когда она сломается, даже "вся королевская конница и вся королевская рать" не смогут заставить работать вашу программу.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Преимущество простого текста</p>
     <p>• Всего лишь визуальное представление</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Используете ли вы доски объявлений в реальности – памятные записки дома, рядом с холодильником или большие лекционные доски на работе? Что делает их эффективными? Всегда ли формат помещаемых сообщений является последовательным? Имеет ли это значение?</p>
     <subtitle>Упражнения</subtitle>
     <p>30. Будет ли уместным использование системы "доска объявлений" для приложений, указанных ниже, или нет? Почему? (Ответ см. в Приложении В.)</p>
     <p>1. Обработка изображений. Несколько параллельных процессов захватывают фрагменты изображения, обрабатывают их и помещают обработанный фрагмент обратно.</p>
     <p>2. Календарное планирование для групп. Есть группа людей, находящихся в разных странах, в различных часовых поясах, говорящих на разных языках и пытающихся спланировать встречу.</p>
     <p>3. Средство мониторинга компьютерной сети. Система осуществляет сбор статистических данных о производительности сети и отчетов о неполадках. Вы хотели бы реализовать несколько программ-агентов, которые могли бы использовать эту информацию для отслеживания неисправностей в системе.</p>
    </section>
   </section>
  </section>
  <section>
   <title>
    <p>Глава 6</p>
    <p>Пока вы пишете программу</p>
   </title>
   <section>
    <p>Житейская мудрость гласит, что как только проект переходит в стадию написания текстов программ, работа становится большей частью механической, преобразующей спроектированную конструкцию в набор исполняемых операторов. Мы полагаем, что подобное отношение является единственной и самой серьезной причиной того, что многие программы уродливы, неэффективны, плохо структурированы, сложны в сопровождении и просто ошибочны.</p>
    <p>Написание программ – не механическая процедура. В противном случае CASE-средства, с которыми специалисты связывали свои надежды в начале 80-х годов прошлого века, уже давно заменили бы программистов. Существуют решения, которые необходимо принимать ежеминутно, решения, требующие тщательного обдумывания и оценки, дающие написанной программе право на долгую, праведную и продуктивную жизнь.</p>
    <p>Разработчики, не проявляющие активности при обдумывании своей программы, программируют в расчете на стечение обстоятельств. Программа, может быть, и работает, но этому нет определенного объяснения. В разделе "Программирование в расчете на стечение обстоятельств" мы призываем к большему участию в процессе написания программы.</p>
    <p>Несмотря на то, что большинство составляемых нами программ выполняются быстро, иногда мы разрабатываем алгоритмы, которые способны «посадить» даже Самые быстрые процессоры. В разделе "Скорость алгоритма" обсуждаются методы оценки скорости работы программы и приводятся некоторые подсказки, предупреждающие возникновение потенциальных проблем.</p>
    <p>Прагматики относятся критически ко всем программам, включая собственные. Мы всегда находим резервы улучшения в наших программах и конструкциях. В разделе «Реорганизация» рассматриваются методики, помогающие исправлять существующий текст программы, даже если проект находится в самом разгаре.</p>
    <p>Всякий раз при написании текста программы необходимо помнить следующее: придет время, когда вам нужно будет ее тестировать. Сделайте так, чтобы тестирование не оказалось сложной процедурой, и вероятность того, что программа пройдет тестирование, увеличится. Эту идею мы развиваем в разделе "Программа, которую легко тестировать".</p>
    <p>И наконец, в разделе "Злые волшебники" говорится о том, что необходимо быть осторожным с инструментальными средствами, генерирующими миллионы строк от вашего имени, если вы не понимаете сути работы этих средств.</p>
    <p>Многие из нас в значительной степени управляют автомобилем "на автопилоте" – мы не даем явных указаний ноге, чтобы она нажала на педаль, или руке, чтобы она повернула руль, а мысленно говорим себе: "снизить скорость и повернуть направо". Но дисциплинированные водители постоянно контролируют ситуацию, отыскивают потенциальные проблемы и оказываются в нужном положении, если происходит непредвиденное. Это применимо и к написанию программ – возможно, об этом говорилось уже много раз, но хладнокровие всегда позволит вам предотвратить катастрофу.</p>
   </section>
   <section>
    <title>
     <p>31</p>
     <p>Программирование в расчете на стечение обстоятельств</p>
    </title>
    <section>
     <p>Случалось ли вам когда-нибудь смотреть старые черно-белые фильмы о войне? Усталый солдат осторожно выбирается из зарослей кустарника. Впереди него свободное пространство, и солдат задается вопросом: есть ли впереди мины или можно безбоязненно идти дальше? Ничто не говорит о том, что впереди минное поле, – нет ни знаков, ни колючей проволоки, ни воронок. Солдат пробует штыком грунт впереди себя и вздрагивает в ожидании взрыва. Но ничего не происходит. Какое-то время он продолжает осторожно продвигаться но полю, прощупывая грунт. В конце концов, убедившись, что проход безопасен, он распрямляется и начинает гордо маршировать вперед… навстречу смерти.</p>
     <p>Первые поиски мин, проведенные солдатом, были безрезультатны, но ему просто повезло. Он пришел к ложному заключению, которое закончилось катастрофой.</p>
     <p>Программисты также работают на заминированной территории. Существуют сотни ловушек, подстерегающих нас ежедневно. Помня об истории с солдатом из фильма, нам стоит опасаться ложных заключений. Необходимо избегать программирования в расчете на стечение обстоятельств, полагаясь на удачу и случайные успехи, и сделать выбор в пользу преднамеренного программирования.</p>
    </section>
    <section>
     <title>
      <p>Как программировать в расчете на стечение обстоятельств</p>
     </title>
     <p>Предположим, Фреду дано задание написать программу. Фред составляет некую программу, пробует ее запустить, и она вроде бы работает. Фред пишет еще один фрагмент, пробует его запустить, и снова все работает. В такой обстановке проходит еще несколько недель, но внезапно программа прекращает работать, и, потратив несколько часов на устранение дефекта, Фред все еще не знает, в чем причина. Фред может потратить много времени, копаясь с этим фрагментом, без перспективы на восстановление работы программы. И что бы он ни делал, кажется, что программа никогда не будет работать правильно.</p>
     <p>Фред не знает, почему программа сбоит, потому что не знает, почему она работала вначале. Она лишь казалась работающей в условиях ограниченного «тестирования», которое проводил Фред, но это было лишь стечением обстоятельств. Находясь в плену ложной уверенности, Фред впал в забытье. Большинству интеллектуалов знаком этот образ Фреда, но мы знаем его лучше. Мы ведь не полагаемся на стечение обстоятельств, не так ли?</p>
     <p>Впрочем, иногда полагаемся. Порой легко спутать счастливый случай с целенаправленным планированием. Рассмотрим несколько примеров.</p>
     <subtitle>Случайная реализация</subtitle>
     <p>Случайная реализация – это то, что происходит просто потому, что программа написана именно так, как она написана. Вы перестаете полагаться на недокументированную ошибку или граничные условия.</p>
     <p>Предположим, что вы вызываете подпрограмму с неверными данными. Подпрограмма откликается определенным образом, и ваша программа основывается на этом отклике. Но у автора даже и в мыслях не было, что программа будет работать подобным образом, – это даже не рассматривалось. Если подпрограмма «исправляется», то основная программа может нарушиться. В самом крайнем случае вызываемая подпрограмма даже не предназначена для того, чего вы от нее ждете, но вроде бы она работает нормально. Вызов каких-либо элементов неправильным образом или в неверном контексте является связанной проблемой.</p>
     <p>paint(g);</p>
     <p>invalidate();</p>
     <p>validate();</p>
     <p>revalidate();</p>
     <p>repaint();</p>
     <p>paintImmediately(r);</p>
     <p>Похоже, что Фред предпринимает отчаянные попытки вывести что-то на экран. Но эти подпрограммы не предназначены для того, чтобы к ним обращались таким способом; хотя они кажутся работающими, в действительности это лишь стечение обстоятельств.</p>
     <p>Чтобы не получить новых ударов, когда компонент все-таки нарисован, Фред не пытается вернуться назад и устранить поддельные запросы. "Сейчас она работает, оставим все как есть…".</p>
     <p>Подобные размышления могут ввести вас в заблуждение. Зачем рисковать, портить то, что работает? Так можно думать по нескольким причинам:</p>
     <p>• Программа действительно может не работать, она может лишь казаться работающей.</p>
     <p>• Граничное условие, на которое вы полагаетесь, может быть лишь частным случаем. В различных обстоятельствах (например, при ином экранном разрешении) программа может вести себя по-разному.</p>
     <p>• Недокументированное поведение может измениться с выпуском новой версии библиотеки.</p>
     <p>• Дополнительные и необязательные вызовы замедляют работу программы.</p>
     <p>• Дополнительные вызовы также увеличивают риск привнесения новых дефектов, связанных с этим вызовами.</p>
     <p>При написании программы, вызываемой другими разработчиками, полезными могут оказаться базовые принципы четкой модуляризации и скрытия реализации за несложными, четко документированными интерфейсами. Четко определенный контракт (см. "Проектирование по контракту") может устранить недоразумения.</p>
     <p>Для вызываемых вами подпрограмм полагайтесь только на документированное поведение. Если по какой-то причине вы не можете сделать этого, то четко документируйте ваше предположение.</p>
     <subtitle>Случайный контекст</subtitle>
     <p>Вы также можете встретиться со "случайным контекстом". Предположим, вы пишете сервисный модуль. Поскольку в данное время вы пишете программу для графической среды, должен ли модуль полагаться на существующий графический интерфейс? Полагаетесь ли вы на англоязычных пользователей? На грамотных пользователей? Полагаетесь ли вы еще на какой-то контекст, наличие которого не гарантируется?</p>
     <subtitle>Неявные предположения</subtitle>
     <p>Совпадения могут вводить в заблуждение на всех уровнях – от генерации требований до тестирования. Тестирование особенно чревато наличием ложных причинных связей и случайным совпадением результатов. Легко предположить, что А вызывает У, но, как сказано в разделе «Отладка» не предполагайте это, а доказывайте.</p>
     <p>На всех уровнях люди работают, держа многие предположения в голове, но они редко документируются и часто вызывают противоречия между разработчиками. Предположения, не основанные на известных фактах, способны отравить любые проекты.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 44: Не пишите программы в расчете на стечение обстоятельств</p>
     </cite>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>Преднамеренное программирование</p>
     </title>
     <p>Мы хотели бы тратить меньше времени на придание нашим программам компактности, как можно раньше перехватывая и устраняя ошибки, возникающие в ходе разработки, а для начала допускать меньшее число ошибок. Этот принцип приносит пользу, если мы способны программировать преднамеренно:</p>
     <p>• Всегда отдавайте себе отчет в том, что вы делаете. Программист Фред постепенно терял контроль над происходящим, пока не сварился сам, подобно лягушке из раздела "Суп из камней и сварившиеся лягушки".</p>
     <p>• Не пишите программ вслепую. Попытка написать приложение, которое вы до конца не понимаете, или использовать технологию, с которой вы не знакомы, становится поводом к тому, что вы будете введены в заблуждение случайными совпадениями.</p>
     <p>• Действуйте исходя из плана, неважно, где он составлен – у вас в голове, на кухонной салфетке или на огромной «простыне», полученной с помощью CASE-средств.</p>
     <p>• Полагайтесь только на надежные предметы. Не вводите себя в зависимость от случаев или предположений. Если вы не можете понять, в чем состоит различие при специфических обстоятельствах, предполагайте худшее.</p>
     <p>• Документируйте ваши предположения. Раздел "Проектирование по контракту" поможет прояснить ваши предположения в вашей же голове, а также передать их другим людям.</p>
     <p>• Тестируйте не только вашу программу, но и ваши предположения. Не гадайте, попробуйте осуществить это на деле. Напишите программу контроля для проверки ваших предположений (см. "Программирование утверждений"). Если ваше предположение верно, то вы улучшили документирование вашей программы. Если вы обнаружили, что предположение ошибочно, тогда считайте, что вам повезло.</p>
     <p>• Определите приоритеты в своей работе. Уделите время аспектам, представляющим важность; скорее всего, они окажутся непростыми. При отсутствии надлежащих фундаментальных принципов или инфраструктуры все блестящие «бантики» будут просто неуместны.</p>
     <p id="_ednref37">• Не будьте рабами прошлого. Не позволяйте существующей программе диктовать свою волю той программе, за которой будущее. Если программа устаревает, она может быть полностью заменена. И даже в пределах одной программы не позволяйте уже сделанному сдерживать то, что идет за ним, – будьте готовы к реорганизации (см. "Реорганизация"). Это решение может повлиять на график выполнения проекта. Мы полагаем, что это воздействие будет меньше той цены, которую придется платить за отсутствие изменений <a l:href="#n_37">[37]</a>.</p>
     <p>Поэтому, если в следующий раз что-то начинает работать, но вы не знаете, почему это происходит, убедитесь, что это не является стечением обстоятельств</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Суп из камней и сварившиеся лягушки</p>
     <p>• Отладка</p>
     <p>• Проектирование по контракту</p>
     <p>• Программирование утверждений</p>
     <p>• Временное связывание</p>
     <p>• Реорганизация</p>
     <p>• Все эти сочинения</p>
     <subtitle>Упражнения</subtitle>
     <p>31. Найдите совпадения в представленном фрагменте программы на языке С. Предположим, что этот фрагмент находится глубоко в недрах библиотечной подпрограммы. (Ответ см. в Приложении В.)</p>
     <p>fprintf(stderr, "Error, continue?");</p>
     <p>gets(buf);</p>
     <empty-line/>
     <p>32. Этот фрагмент программы на языке С мог работать в течение какого-то времени на некоторых машинах. Затем он переставал работать. В чем ошибка? (Ответ см. в Приложении В.)</p>
     <p>/* Truncate string to its iast maxlen chars */</p>
     <p>void string_tail(char *string, int maxlen) {</p>
     <p>  int len = strlen(string);</p>
     <p>  if (len &gt; maxlen) {</p>
     <p>    strcpy(string, string+(len – maxlen));</p>
     <p>  }</p>
     <p>}</p>
     <empty-line/>
     <p>33. Эта программа входит в состав универсального пакета трассировки Java. Функция записывает строки в файл журнала. Она проходит модульное тестирование, но дает сбой при попытке ее применения одним из разработчиков программ для сети Интернет. На какое стечение обстоятельств полагается эта программа? (Ответ см. в Приложении В.)</p>
     <p>public static void debug(String s) throws IOException {</p>
     <p>FileWriter fw = new FileWriter("debug.log");</p>
     <p>fw.write(s);</p>
     <p>fw.flush();</p>
     <p>fw.close();</p>
     <p>}</p>
    </section>
   </section>
   <section>
    <title>
     <p>32</p>
     <p>Скорость алгоритма</p>
    </title>
    <section>
     <p>В разделе «Оценка» говорилось об оценке того, сколько времени потребуется, чтобы пройти несколько городских кварталов, и сколько времени нужно для завершения проекта. Однако существует и другой вид оценок, который прагматики применяют практически ежедневно: оценка ресурсов, используемых алгоритмами, – времени, работы процессора, объема памяти и т. д.</p>
     <p>Зачастую этот вид оценки является решающим. Если вы можете сделать что-либо двумя способами, то какой из них стоит выбрать? Если вам известно время выполнения программы при наличии 1000 записей, то как оно изменится при наличии 1000000 записей? Какая часть программы нуждается в оптимизации?</p>
     <p>Оказывается, что во многих случаях на подобные вопросы можно ответить, пользуясь здравым смыслом, некоторым анализом и методикой записи приближений, которая называется "О-большое".</p>
    </section>
    <section>
     <title>
      <p>Что подразумевается под оценкой алгоритмов?</p>
     </title>
     <p>Большинство нетривиальных алгоритмов обрабатывают некий вид переменных входных массивов, они выполняют сортировку n строк, обращение матрицы размером m*n или расшифровку сообщения с n-битовым ключом. Обычно объем входных данных оказывает влияние на алгоритм: чем больше этот объем, тем больше время выполнения алгоритма или объем используемой памяти.</p>
     <p>Если бы эта зависимость всегда была линейной (т. е. время возрастало бы прямо пропорционально значению n), то этот раздел можно было бы и пропустить. Однако наиболее важные алгоритмы не являются линейными. Хорошая новость: многие алгоритмы являются сублинейными. Например, в алгоритме двоичного поиска при нахождении соответствия вовсе не обязательно рассматривать подряд всех кандидатов. А теперь плохая новость: другие алгоритмы отличаются существенно худшими линейными свойствами; время их выполнения или требования к объему памяти возрастают намного быстрее, чем значение n. Если для обработки десяти элементов алгоритму требуется минута, то для обработки ста элементов потребуется целая жизнь.</p>
     <p>При написании любых программ, содержащих циклы или рекурсивные вызовы, мы подсознательно проверяем требования, предъявляемые ко времени выполнения и объему памяти. Это редко является формальным процессом, скорее, оперативным подтверждением наличия здравого смысла в том, что мы делаем в определенных обстоятельствах. Но иногда мы оказываемся в ситуации, когда нам приходится проводить более детальный анализ. В этом случае весьма полезной оказывается система обозначений "O()" ("O-большое").</p>
    </section>
    <section>
     <title>
      <p>Система обозначений О()</p>
     </title>
     <p>Система O() представляет собой математический способ обозначения приближений. Если мы указываем, что некая программа осуществляет сортировку n записей за время O(n^2), то это просто означает, что максимальное время выполнения программы будет изменяться пропорционально n^2. При удвоении числа записей время возрастет примерно в четыре раза. O() можно рассматривать как порядок величины. Система обозначений O() определяет верхнюю границу величины измеряемого параметра (время, объем памяти, и т. д.). Если мы говорим, что некая функция занимает время O(n^2), то под этим понимается, что верхняя граница интервала времени, необходимого для ее выполнения, возрастает не быстрее n^2. Иногда мы встречаемся с довольно сложными функциями O(), и поскольку именно член высшего порядка будет определять значение с ростом n, то обычно все члены низшего порядка удаляются, чтобы не мешать постоянным коэффициентам умножения. O(n^2/2+Зn) означает то же самое, что и O(n^2/2), которое, в свою очередь, является эквивалентом O(n^2). В этом и состоит недостаток системы обозначений O() – один алгоритм O(n^2) может быть быстрее другого алгоритма O(n^2) в тысячу раз, но из обозначений вы этого не поймете.</p>
     <p>На рисунке 6.1 показано несколько общих обозначений O(), с которым вы можете встретиться, и график, на котором сравнивается время выполнения алгоритмов в каждой категории. Из него ясно, что все начинает быстро выходить из-под контроля, как только мы переходим через O(n^2).</p>
     <empty-line/>
     <p>Рис. 6.1. Время выполнения различных алгоритмов</p>
     <image l:href="#i_014.jpg"/>
     <empty-line/>
     <p>Некоторые универсальные обозначения О-большое</p>
     <p>O(1) Постоянная зависимость (обращение к элементу массива, простые операторы)</p>
     <p>O(lg(n)) Логарифмическая зависимость (двоичный поиск) [lg(n) – краткое обозначение log2(n)]</p>
     <p>O(n) Линейная зависимость (последовательный поиск)</p>
     <p>O(n lg(n)) Эта зависимость линейной, но не намного (среднее время быстрой сортировки, пирамидальной сортировки)</p>
     <p>O(n^2) Квадратичная зависимость (выборочная сортировка и сортировка включения)</p>
     <p>O(n^3) Кубическая зависимость (перемножение двух матриц размером n*n)</p>
     <p>O(C^n) Экспоненциальная зависимость (задача о коммивояжере, разбиение набора)</p>
     <empty-line/>
     <p>Предположим, что у вас есть программа, обрабатывающая 100 записей за 1 сек. Сколько времени ей потребуется для обработки 1000 записей? Если ваша программа является O(1), то это время остается равным 1 сек. Если она является O(lg(n)), то для обработки потребуется около 3 сек. При O(n) время обработки линейно возрастает до 10 сек., а при O(nlg(n)) составит примерно 33 сек. Если вам не повезло и ваша программа является O(n^2), то можете отдохнуть в течение 100 сек., пока она не сделает свое дело. Ну а в том случае, если вы используете экспоненциальный алгоритм O(2^n), можете заварить чашечку кофе – программа завершит свою работу примерно через 10263 года. В общем, хотелось бы знать, как происходит конец света.</p>
     <p>Система обозначений O() не применяется только к временным параметрам; ее можно использовать для представления других ресурсов, требуемых неким алгоритмом. Например, она часто является полезной при моделировании расхода памяти (см. упражнение 35).</p>
    </section>
    <section>
     <title>
      <p>Оценка с точки зрения здравого смысла</p>
     </title>
     <p>Можно оценить порядок многих базовых алгоритмов с точки зрения здравого смысла.</p>
     <p>• <strong>Простые циклы.</strong> Если простой цикл выполняется от 1 до n, то алгоритм, скорее всего, является O(n) – время находится в линейной зависимости от n. Примерами этого являются исчерпывающий поиск, поиск максимального элемента в массиве и генерация контрольной суммы.</p>
     <p>• <strong>Вложенные циклы.</strong> Если вы помещаете один цикл в другой, то ваш алгоритм становится O(m*n), где m и n – пределы этих двух циклов. Обычно это свойственно простым алгоритмам сортировки, типа пузырьковой сортировки, где внешний цикл поочередно просматривает каждый элемент массива, а внутренний цикл определяет местонахождение этого элемента в результирующем массиве. Подобные алгоритмы сортировки чаще всего стремятся к O(n^2).</p>
     <p>• <strong>Алгоритм двоичного поиска.</strong> Если алгоритм делит пополам набор элементов, который он рассматривает всякий раз в цикле, то скорее всего он логарифмический O(lg(n)) (см. упражнение 37). Двоичный поиск в упорядоченном списке, обход двоичного дерева и поиск первого установленного бита в машинном слове могут быть O(lg(n)).</p>
     <p>• <strong>Разделяй и властвуй.</strong> Алгоритмы, разбивающие входные данные на разделы, работающие независимо с двумя половинами и затем комбинирующие конечный результат, могут представлять собой O(nlg(n)). Классическим примером является алгоритм быстрой сортировки, который делит входной массив пополам и затем проводит рекурсивную сортировку в каждой из половин. Хотя технически он и является O(n^2), поскольку его поведение ухудшается при обработке упорядоченных данных, но среднее время быстрой сортировки составляет O(nlg(n)).</p>
     <p>• <strong>Комбинаторика.</strong> При использовании алгоритмов в решении любых задач, связанных с перестановкой, время их выполнения может выйти из-под контроля.</p>
     <p>Это происходит потому, что задачи о перестановке включают вычисления факториалов (существует 5! = 5*4*3*2*1 = 120 перестановок цифр от 1 до 5). Возьмем за основу время выполнения комбинаторного алгоритма для пяти элементов; для шести элементов времени потребуется в шесть раз больше, а для семи – в 42. Примерами этого являются алгоритмы решения многих известных сложных задач – о коммивояжере, об оптимальной упаковке предметов в контейнер, о разделении набора чисел таким образом, что сумма каждого отдельного набора одинакова и т. д. Во многих случаях для сокращения времени выполнения алгоритмов данного типа в определенных прикладных областях используются эвристические подходы.</p>
    </section>
    <section>
     <title>
      <p>Скорость алгоритма на практике</p>
     </title>
     <p>Маловероятно, что в своей профессиональной карьере вам придется тратить много времени на написание программ сортировки. Эти программы, входящие в стандартные библиотеки, наверняка без особых усилий превзойдут написанное вами. Но основные типы алгоритмов, описанные выше, будут время от времени всплывать на поверхность. Во всех случаях, когда вы пишете простой цикл, знайте, что имеете дело с алгоритмом О(n). Если же этот цикл содержит внутренний цикл, то речь идет о О(m*n). Вы обязаны задаться вопросом: а насколько велики эти значения? Если эти значения ограничены сверху, то вы можете представить, сколько времени потребуется на выполнение программы. Если эти цифры зависят от внешних факторов (наподобие количества записей в запускаемом на ночь пакете программ или количества фамилий в списке персоналий), то стоит остановиться и изучить влияние больших чисел на время выполнения программы или объемы необходимой памяти.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 45: Оцените порядок ваших алгоритмов</p>
     </cite>
     <empty-line/>
     <p>Существует несколько подходов, которыми вы можете воспользоваться при решении потенциально возникающих проблем. Если есть алгоритм, являющийся O(n^2), попробуйте действовать по принципу "разделяй и властвуй", что может уменьшить время выполнения до O(nlg(n)).</p>
     <p>Если вы не уверены в том, что ваша программа будет выполняться в течение определенного времени, или в том, что она затребует определенный объем памяти, попытайтесь запустить ее, варьируя количество обрабатываемых записей или другие параметры, способные оказать воздействие на время выполнения программы. На основе полученных результатов постройте график и получите представление о форме кривой. Изгибается ли она кверху, представляет ли собой прямую линию или сглаживается с увеличением размера входного массива данных? Представление об этом можно получить, исходя из трех или четырех точек.</p>
     <p>Стоит рассмотреть и то, что происходит в самой программе. При малых значениях n простой цикл O(n^2) может работать намного лучше, чем сложный О(nlg(n)), особенно если последний содержит ресурсоемкий внутренний цикл.</p>
     <p id="_ednref38">Говоря о теории, не стоит забывать и о практических соображениях. При работе с небольшими массивами входных данных может показаться, что время выполнения возрастает линейно. Но если программа обрабатывает миллионы записей, то внезапно время выполнения резко увеличивается, по мере того как система начинает «буксовать». При проведении тестирования программы сортировки со случайными входными ключами вы можете удивиться ее работе с упорядоченным входным массивом. Прагматики стараются обеспечивать как теоретическую, так и практическую базу. После всех проведенных оценок единственной определяемой временной характеристикой является скорость выполнения вашей программы в реальных условиях эксплуатации и с реальными данными <a l:href="#n_38">[38]</a>. Из этого следует следующая подсказка.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 46: Проверяйте ваши оценки</p>
     </cite>
     <empty-line/>
     <p>Если сложно точно определить время, воспользуйтесь программами оптимизации, чтобы подсчитать, сколько раз выполнялся алгоритм, и постройте зависимость этого количества от размера входного массива данных.</p>
     <subtitle>Лучшее – враг хорошего</subtitle>
     <p>При выборе подходящего алгоритма также необходимо придерживаться прагматического подхода – самые быстрые алгоритмы не обязательно являются наилучшими для конкретного случая. При небольшом входном массиве «прямолинейная» сортировка со вставкой будет работать так же хорошо, как и алгоритм быстрой сортировки, и потребует меньше времени на написание и отладку. Необходимо соблюдать осторожность, если выбранный вами алгоритм отличается высокими затратами на установку. При работе с небольшими массивами эта дорогостоящая установка может свести на нет преимущество в скорости выполнения и сделать алгоритм нерентабельным.</p>
     <p>Кроме того, необходимо опасаться преждевременной оптимизации. Перед тем как потратить ваше драгоценное время на улучшение алгоритма, всегда есть смысл убедиться, что он действительно является "узким местом".</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Оценка</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Каждый разработчик должен обладать чутьем на проектирование и анализ алгоритмов. По данному предмету Роберт Седжвик написал серию доступных книг ([Sed83, SF96, Sed92]и др.). Мы рекомендуем пополнить вашу библиотеку одной из этих книг и обязательно прочесть ее.</p>
     <p>• Те, кто интересуется данным предметом более глубоко (по сравнению с его подачей в книге Седжвика), могут прочесть каноническую серию книг Дональда Кнута "Искусство программирования", в которых анализируются разнообразные алгоритмы [Knu97a, Knu97b, Ктш98].</p>
     <p>• В упражнении 34 рассматривается сортировка массивов, состоящих из чисел типа "длинное целое". Как скажутся на сортировке усложнение ключей и издержки на их сравнение? Оказывает ли структура ключей влияние на эффективность работы алгоритмов сортировки, словом, является ли самый быстрый алгоритм сортировки таковым во всех случаях?</p>
     <subtitle>Упражнения</subtitle>
     <p>34. Авторы книги составили набор простых программ сортировки, которые можно загрузить с их Интернет-сайта (www.pragmaticprogrammer.com). Прогоните эти программы на разных компьютерах, имеющихся в вашем распоряжении. Соответствуют ли полученные вами данные ожидаемым кривым? Какие заключения можно сделать об относительных скоростях ваших машин? Каково влияние различных установочных параметров компиляторов? Является ли поразрядная сортировка действительно линейной? (Ответ см. в Приложении В.)</p>
     <p>35. Приведенная ниже подпрограмма выводит на печать содержимое двоичного дерева. Предполагая, что дерево сбалансировано, какой (примерно) объем стека будет использоваться подпрограммой для вывода на печать дерева, состоящего из 1000000 элементов? (Предполагается, что вызовы подпрограммы не оказывают существенной нагрузки на стек). (Ответ см. в Приложении В.)</p>
     <p>void printTree(const Node *node) {</p>
     <p>char buffer[1000];</p>
     <p> if (node) {</p>
     <p>   printTree(node-&gt;left);</p>
     <p>   getNodeAsString(node, buffer);</p>
     <p>   puts(buffer);</p>
     <p>   printTree(node-&gt;right);</p>
     <p> }</p>
     <p>}</p>
     <p>36. Существует ли способ уменьшить потребность подпрограммы, описанной в упражнении 35, в ресурсах стека (помимо уменьшения размера буфера)? (Ответ см. в Приложении В.)</p>
     <p>37. В разделе "Оценка с точки зрения здравого смысла" утверждается, что алгоритм двоичного поиска является O(lg(n)). Можно ли это доказать? (Ответ см. в Приложении В.)</p>
    </section>
   </section>
   <section>
    <title>
     <p>33</p>
     <p>Реорганизация</p>
    </title>
    <epigraph>
     <p>Как изменилось и увяло все, что окружает меня…</p>
     <text-author>Г.Ф. Лайт, Пребудь со мной</text-author>
    </epigraph>
    <section>
     <p>По мере развития программы возникает необходимость в переосмыслении ранее принятых решений и переработки отдельных фрагментов текста программы. Этот процесс абсолютно естественен. Программа нуждается в эволюции, она не является статическим объектом.</p>
     <p>К сожалению, наиболее распространенной метафорой разработки программного обеспечения является строительство здания (Б. Мейер [Меу97Ь] использует термин "Software Construction" – букв.: строительство программ – Прим. пер.). Но использование термина «строительство» в качестве определяющей метафоры подразумевает наличие следующих стадий:</p>
     <p>1. Архитектор готовит чертежи на кальке.</p>
     <p>2. Фирмы-подрядчики роют котлован под фундамент, возводят наземную часть, проводят электричество, монтируют водопровод и канализацию и осуществляют отделочные работы.</p>
     <p>3. Арендаторы въезжают в дом и с этого времени живут-поживают, лишь иногда обращаясь в домоуправление с просьбой устранить возникшие неисправности.</p>
     <p>Программное обеспечение работает несколько по-иному. В отличие от строительства, написание программ ближе к садоводству, оно ближе к живой природе, чем к бетонным конструкциям. Вы высаживаете в саду множество растений согласно первоначальному плану и условиям. Некоторые растения разрастаются, другим же уготована компостная яма. Вы можете пересаживать растения друг относительно друга, чтобы извлечь пользу из взаимодействия света и тени, ветра и дождя. Переросшие растения разрубают или обрезают, растения определенного цвета пересаживают на другие участки, где они становятся более приятными глазу с точки зрения эстетики. Вы выпалываете сорняки и подкармливаете растения, которые нуждаются в дополнительном питании. Вы постоянно следите за состоянием сада и при необходимости вносите изменения (в почву, растения, общий план).</p>
     <p>Для бизнесменов понятнее метафора строительства здания, она более научна по сравнению с садоводством, она воспроизводима, в управлении есть жесткая иерархия подотчетности и т. д. Но мы не занимаемся строительством небоскребов – можем выйти за рамки физики и реального мира.</p>
     <p>Метафора садоводства намного ближе к реальности разработки программного обеспечения. Возможно, некая программа переросла себя или пытается осуществить слишком много – ее необходимо разбить на две. Все, что не получается в соответствии с планом, подлежит прополке или обрезке.</p>
     <p>Переписывание, переработка и перепланирование текста программы описывается общим термином "реорганизация".</p>
    </section>
    <section>
     <title>
      <p>Когда осуществлять реорганизацию?</p>
     </title>
     <p>Если вы встречаете на своем пути камень преткновения, поскольку текст программы никуда не годится, замечаете, что два объекта стали несовместимы друг с другом, или же нечто другое, что задевает вас своей «неправильностью», не стесняйтесь вносить изменения. Другого времени, кроме настоящего, не существует. Программу можно считать пригодной для реорганизации при наличии одного из указанных ниже условий:</p>
     <p>• <strong>Дублирование.</strong> Вы обнаружили нарушение принципа DRY (см. "Пороки дублирования").</p>
     <p>• <strong>Неортогональность конструкции.</strong> Вы обнаружили некий фрагмент программы или конструкцию, которой можно придать большую ортогональность (см. "Ортогональность").</p>
     <p>• <strong>Устаревшие знания.</strong> Все изменяется, требования варьируются, и ваши знания о проблеме расширяются. Программа должна соответствовать новому уровню знаний.</p>
     <p>• <strong>Рабочие характеристики.</strong> Для улучшения характеристик программы вам необходимо перенести функциональную возможность из одной части системы в другую.</p>
     <p>Реорганизация программы, т. е. перемещение функциональной возможности и изменение ранее принятых решений – это упражнение в обезболивании. Скажем сразу – изменение исходного текста программы может быть весьма болезненной процедурой: она уже почти работала, а теперь ее разрывают в клочья. Многие разработчики крайне неохотно соглашаются «вспарывать» программу лишь на том основании, что она работает не совсем правильно.</p>
     <subtitle>Осложнения в реальном мире</subtitle>
     <p>Итак, вы идете к вашему шефу или заказчику и говорите: "Эта программа работает, но для ее реорганизации мне нужна еще неделя".</p>
     <p>Они скажут вам… впрочем, это непечатное выражение.</p>
     <p>На жесткие временные рамки часто ссылаются, оправдывая отсутствие реорганизации. Но это оправдание не должно становиться нормой: если вы не сможете провести реорганизацию сейчас, то позже (когда придется принимать во внимание большее число зависимостей) на устранение возникшей проблемы потребуется намного больше времени. А будет ли у вас это время? У нас – точно не будет.</p>
     <p>Попробуйте объяснить этот принцип вашему шефу, пользуясь аналогией с медициной: рассматривайте программу, нуждающуюся в реорганизации, как «опухоль». Чтобы удалить ее, требуется хирургическое вмешательство. Вы можете начать сразу и извлечь ее, пока она небольшая. Но если вы будете ждать, пока она вырастет и распространится, то ее удаление станет более дорогой и опасной процедурой. Подождите еще, и вы можете потерять пациента окончательно.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 47: Реорганизация должна проводиться часто и как можно раньше</p>
     </cite>
     <empty-line/>
     <p>Следите за всем, что требует реорганизации. Если вы не можете провести реорганизацию чего-либо прямо сейчас, удостоверьтесь, что она стоит в вашем плане. Убедитесь, что пользователи программы, над которой производится реорганизация, знают о запланированной процедуре и о том, как она может повлиять на их работу.</p>
    </section>
    <section>
     <title>
      <p>Как производится реорганизация?</p>
     </title>
     <p>Реорганизация появилась в среде программистов, работающих с языком Smalltalk, и начала, вкупе с другими модными поветриями (например, шаблоны конструкций), завоевывать все более широкую аудиторию. Но это еще малоизвестная тема, по ней опубликовано не так много работ. Первая большая монография о реорганизации ([FBB+99], а также [URL 47]) вышла одновременно с данной книгой.</p>
     <p>Суть реорганизации заключается в перепланировке. Все спроектированное вами или другими членами вашей команды может быть переделано в свете новых фактов, более глубокого понимания, изменения требований и т. д. Но если вы предадите забвению огромные фрагменты программы, то окажетесь в худшем положении, чем в начале работы по реорганизации.</p>
     <p>Ясно, что реорганизация представляет собой род деятельности, которая должна осуществляться медленно, преднамеренно и осторожно. Мартин Фаулер предлагает ряд простых подсказок – как провести реорганизацию, чтобы это не принесло больше вреда, чем пользы (см. врезку на стр. 30 в книге [FS97]):</p>
     <p>1. Не пытайтесь одновременно производить реорганизацию и добавлять функциональные возможности.</p>
     <p>2. Перед тем как начинать реорганизацию, убедитесь, что тестирование прошло успешно. Проводите тестирование как можно чаще. В этом случае вы сразу увидите нарушение, которое было вызвано внесенными изменениями.</p>
     <subtitle>Автоматическая реорганизация</subtitle>
     <p>Исторически сложилось так, что пользователи Smalltalk всегда применяли средство просмотра классов как неотъемлемую часть интегрированной среды разработчика. В отличие от web-браузеров, средства просмотра классов позволяют пользователям перемещаться по иерархиям и методам класса и проверять их.</p>
     <p>Обычно средства просмотра классов позволяют редактировать текст программы, создавать новые методы, классы и т. д. Следующей вариацией на эту тему является браузер реорганизации.</p>
     <p>Этот браузер может в полуавтоматическом режиме проводить операции, обычные при реорганизации: разбивать длинную подпрограмму на несколько более коротких, автоматически перенося изменения на имена методов и переменных, а также осуществлять операцию "буксировки и перетаскивания", что помогает в перемещении текста программы и т. д.</p>
     <p>Во время написания данной книги этой технологии еще предстояло выйти за пределы мира Smalltalk, но скорее всего она начнет меняться с той же скоростью, что и язык Java, – быстро. В то же время исторический браузер реорганизации Smalltalk можно отыскать в Интернете [URL 20].</p>
     <empty-line/>
     <p>3. Двигайтесь обдуманно и не спеша: переместите поле из одного класса в другой, объедините два подобных метода в суперкласс. Часто при реорганизации вносится много локальных изменений, которые приводят к серьезным сдвигам. Если вы двигаетесь без спешки и проводите тестирование после каждого шага, вы избежите длительной процедуры отладки.</p>
     <p>На данном уровне тестирование будет обсуждаться в разделе "Программа, которую легко тестировать", тестирование на более высоком уровне – в разделе "Безжалостное тестирование"), но мнение г-на Фаулера о тщательном регрессионном тестировании является ключом к надежной реорганизации.</p>
     <p>Также весьма полезно удостовериться в том, что серьезные изменения в некоем модуле, такие как изменения его интерфейса или его функциональной возможности неподобающим способом, приведут к нарушению процесса сборки. Это означает, что прежние клиенты этой программы не смогут пройти компиляцию. Тогда вы можете отыскать старых клиентов и внести необходимые изменения, чтобы осовременить их.</p>
     <p>Поэтому в следующий раз, когда вам попадется фрагмент программы, который не совсем такой, каким ему надлежит быть, исправьте и его, и все то, что от него зависит. Научитесь управлять этой головной болью: если она досаждает вам сейчас, то потом будет досаждать еще больше, у вас есть шанс устранить ее совсем. Помните уроки, полученные в разделе "Энтропия в программах": не живите с разбитыми окнами.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Мой исходный текст съел кот Мурзик</p>
     <p>• Энтропия в программах</p>
     <p>• Суп из камней и сварившиеся лягушки</p>
     <p>• Пороки дублирования</p>
     <p>• Ортогональность</p>
     <p>• Программирование в расчете на стечение обстоятельств</p>
     <p>• Программа, которую легко тестировать</p>
     <p>• Безжалостное тестирование</p>
     <subtitle>Упражнения</subtitle>
     <p>38. По всей вероятности, за последние годы представленная ниже программа переписывалась несколько раз, но эти изменения никак не способствовали улучшению ее структуры. Проведите ее реорганизацию. (Ответ см. в Приложении В.)</p>
     <p>if (state==TEXAS) {</p>
     <p>rate=TX.RATE;</p>
     <p>amt=base * TX_RATE;</p>
     <p>calc=2*basis(amt) + extra(amt)*1.05;</p>
     <p>}</p>
     <p>else if ((state==OHIO) || (state==MAINE)) {</p>
     <p>rate=(state==OHIO) ? OH_RATE : MN_RATE;</p>
     <p>amt=base*rate;</p>
     <p>calc=2*basis(amt) + extra(amt)*1.05;</p>
     <p>if (state==OHIO) </p>
     <p>   points = 2;</p>
     <p>}</p>
     <p>else {</p>
     <p>rate=1;</p>
     <p>amt=base;</p>
     <p>calc=2*basis(amt) + extra(amt)*1.05;</p>
     <p>}</p>
     <empty-line/>
     <p>39. Класс Java, представленный ниже, нуждается в поддержке дополнительных форм. Произведите реорганизацию этого класса, чтобы подготовить его к этим дополнениям. (Ответ см. в Приложении В.)</p>
     <p>public class Shape {</p>
     <p>public static final int SQUARE = 1;</p>
     <p>public static final int CIRCLE = 2;</p>
     <p>public static final int RIGHTTRIANGLE = 3;</p>
     <p>private int shapeType;</p>
     <p>private double size;</p>
     <p>public Shape(int shapeType, double size) {</p>
     <p>   this.shapeType = shapeType;</p>
     <p>   this.size = size;</p>
     <p>}</p>
     <p>//… другие методы… </p>
     <p>public double area() {</p>
     <p> switch (shapeType) {</p>
     <p>  case SQUARE: return size*size;</p>
     <p>  case CIRCLE: return Math.PI*size*size/4.0;</p>
     <p>  case RIGHT TRIANGLE: return size*size/2.0;</p>
     <p>}</p>
     <p>return 0;</p>
     <p>}</p>
     <p>40. Данная программа на языке Java представляет собой часть некоего скелета, который будет использоваться во всем вашем проекте. Произведите реорганизацию этой программы, чтобы сделать ее более общей и упростить ее расширение в будущем. (Ответ см. в Приложении В.)</p>
     <empty-line/>
     <p>public class Window {</p>
     <p>  public Window(int width, int height) {…}</p>
     <p>  public void setSize(int width, int height) {…}</p>
     <p>  public boolean overiaps(Window w) {…}</p>
     <p>  public int getArea() {…}</p>
    </section>
   </section>
   <section>
    <title>
     <p>34</p>
     <p>Программа, которую легко тестировать</p>
    </title>
    <section>
     <p id="_ednref39">Термин "программная интегральная схема" является метафорой, брошенной в ходе дискуссии о многократном использовании и компонентно-ориентированной разработке <a l:href="#n_39">[39]</a>. Идея заключается в том, что программные компоненты должны объединяться так же, как это происходит с чипами интегральной схемы. Этот подход срабатывает только в том случае, если известно, что используемые компоненты надежны.</p>
     <p>Чипы предназначены душ тестирования не только на предприятии-изготовителе, не только при сборке, но и в сфере их применения. Более сложные чипы и системы могут снабжаться полномасштабными средствами самотестирования, которые осуществляют внутреннюю диагностику на базовом уровне, или тестовым стендом с комплектом измерительных кабелей инициирующим подачу тестовых входных сигналов и снимающим ответную информацию с чипа.</p>
     <p>То же самое можно осуществить и с программным обеспечением. Подобно нашим коллегам, работающим с «железом», нам приходится с самого начала встраивать средства тестирования в программы и тщательно тестировать каждый фрагмент, перед тем как предпринять попытку их объединения.</p>
    </section>
    <section>
     <title>
      <p>Модульное тестирование</p>
     </title>
     <p>Тестирование аппаратных средств на уровне чипа отдаленно напоминает модульное тестирование программного обеспечения – тестируется каждый модуль по отдельности для проверки его поведения. Мы можем лучше представить себе, какова будет реакция модуля на внешний мир, если проведем его тщательное тестирование в контролируемых (и даже искусственных) условиях.</p>
     <p>Модульный программный тест – это программа, испытывающая работу модуля. Обычно модульный тест задает некую искусственную среду, затем осуществляется вызов подпрограмм из проверяемого модуля. Потом происходит проверка полученных результатов, они сравниваются с известными величинами или с результатами предыдущих прогонов той же самой программы тестирования (регрессионное тестирование).</p>
     <p>Когда мы объединим наши "программные интегральные схемы" в единую систему, мы будем уверены, что ее отдельные части работают предсказуемо, а затем можем применить те же средства модульного тестирования при проверке системы в целом. О подобном крупномасштабном тестировании речь идет в разделе "Безжалостное тестирование".</p>
     <p>Но прежде чем выйти на этот уровень, необходимо решить, а что же мы будем тестировать на уровне блоков. Обычно программисты задают несколько случайных массивов данных и считают, что они провели тестирование. Но это можно сделать намного лучше, если использовать идеи, связанные с "программированием по контракту".</p>
    </section>
    <section>
     <title>
      <p>Тестирование в рамках контракта</p>
     </title>
     <p>Мы рассматриваем модульное тестирование, как тестирование исходя из контракта (см. "Проектирование по контракту"). Нам бы хотелось написать процедуры тестирования, гарантирующие, что данный модуль соблюдает соответствующий контракт. При этом выясняются два момента: отвечает ли программа условиям контракта, и означает ли контракт на самом деле то, что мы о нем думаем. Мы хотим проверить, обладает ли модуль функциональными характеристиками, которые в нем заложены, используя разнообразные тестовые процедуры и граничные условия.</p>
     <p>Что это означает на практике? Рассмотрим подпрограмму извлечения квадратного корня, с которой мы впервые встретились в разделе "ППК и аварийное завершение работы программы". Ее контракт довольно прост:</p>
     <p>require:</p>
     <p>   argument &gt;=0</p>
     <p>ensure:</p>
     <p>  abs((result*result)–argument) &lt; epsilon</p>
     <p>Он указывает на моменты, нуждающиеся в проверке:</p>
     <p>• Передать отрицательный аргумент и удостовериться в том, что он отклонен</p>
     <p>• Передать аргумент, равный нулю, и удостовериться в том, что он принят (это граничное значение)</p>
     <p>• Передать значение в интервале от нуля до максимально выражаемого параметра и проверить, что разность между квадратом результата и исходным аргументом меньше некоторой величины "epsilon"</p>
     <p>Вооружась этим контрактом и полагая, что наша программа осуществляет собственную проверку предусловий и постусловий, можно записать базовый тестовый сценарий для проверки функции извлечения квадратного корня.</p>
     <p>public void testValue(double num, double expected) {</p>
     <p>double result = 0.0;</p>
     <p>try {    // We may throw a</p>
     <p>result = mySqrt(num); // precondition exception</p>
     <p>}</p>
     <p>catch (Throwable e) {</p>
     <p>if (num&lt;0.0) // If input is «0, then</p>
     <p>   Return; // we're expecting the</p>
     <p>Else // exception, otherwise</p>
     <p>   Assert(false); // force a test failure</p>
     <p>}</p>
     <p>assert(Math.abs(expected-result)&lt;epsilon);</p>
     <p>}</p>
     <p>Затем мы можем вызвать эту подпрограмму, чтобы проверить нашу функцию излечения квадратного корня:</p>
     <p>TestValue(-4.0, 0.0);</p>
     <p>TestValue(0.0, 0.0);</p>
     <p>TestValue(2.0, 1.4142135624);</p>
     <p>TestValue(64.0, 8.0);</p>
     <p>TestValue(1.0e7, 3162.2776602);</p>
     <p>Это весьма простая процедура тестирования; в реальном мире любой нетривиальный модуль скорее всего будет зависеть от ряда других модулей, поэтому, может быть, есть смысл протестировать их сочетание?</p>
     <p>Предположим, есть модуль А, использующий модули LinkedList и Sort. Мы осуществляем тестирование в следующем порядке:</p>
     <p>1. Полностью тестируем контракт модуля LinkedList.</p>
     <p>2. Полностью тестируем контракт модуля Sort.</p>
     <p>3. Тестируем контракт модуля А, который полагается на другие контракты, но не раскрывает их напрямую.</p>
     <p>При этом способе тестирования вы вначале обязаны проводить тестирование подкомпонентов.</p>
     <p>Если модули LinkedList и Sort успешно прошли тестирование, а модуль А испытания не прошел, мы можем быть вполне уверены, что проблема заключается в модуле А или в том, как модуль А использует один из подкомпонентов. Эта методика способствует уменьшению трудоемкости процесса отладки: можно быстро сосредоточиться на вероятном источнике проблем в пределах модуля А и не тратить время на изучение его подкомпонентов.</p>
     <p>Зачем вся эта головная боль? Прежде всего, хотелось бы избежать создания "бомбы замедленного действия", той, что остается незамеченной и позже взрывается в самый неподходящий момент во время работы над проектом. Подчеркивая важность "тестирования в рамках контракта", мы пытаемся, насколько это возможно, избежать катастроф, возникающих в будущем.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 48: Проектируйте с учетом тестирования</p>
     </cite>
     <empty-line/>
     <p>Когда вы проектируете модуль или даже целую программу, вы обязаны проектировать ее контракт и программу для проверки этого контракта. Проектируя программу, которая проходит тестирование и выполняет соответствующий контракт, вы можете учесть граничные условия и другие аспекты, на которые в иных случаях не обратили бы внимания. Лучше всего устранять ошибки, избежав их с самого начала. На самом деле, при создании процедуры тестирования до реализации программы вам приходится испытывать интерфейс перед тем как принять его.</p>
    </section>
    <section>
     <title>
      <p>Создание модульных тестов</p>
     </title>
     <p>Модульные тесты не должны оказываться где-то на периферии исходной древовидной схемы. Они должны располагаться так, чтобы с ними было удобно обращаться. В случае небольших проектов можно внедрить модульный тест в сам модуль. Для более крупных проектов можно поместить каждую из процедур тестирования в отдельный подкаталог. В любом случае необходимо помнить, что если модуль сложно отыскать, то он не будет использован.</p>
     <p>Делая тестовую процедуру доступной, вы наделяете разработчиков, которые могут воспользоваться вашей программой, двумя бесценными ресурсами:</p>
     <p>1. Примерами того, как использовать все функциональные возможности вашего модуля</p>
     <p>2. Средствами построения процедур регрессионного тестирования для проверки правильности любых изменений, которые будут вноситься в программу впоследствии</p>
     <p>Если каждый класс или модуль содержит свой собственный модульный тест, это удобно, но не всегда практично. Например, в языке Java каждый класс содержит собственную подпрограмму main. За исключением файла основного класса приложения, подпрограмма main может использоваться для запуска модульных тестов; она будет игнорироваться во время работы самого приложения. Преимущество состоит в том, что программа, отправляемая заказчику, все еще содержит тесты, которые могут использоваться для диагностики проблем, возникающих "в боевой обстановке".</p>
     <p>При работе с языком С++ вы можете добиться того же эффекта (во время компиляции) используя конструкцию #ifdef для выборочной компиляции программы модульного теста. Ниже представлен очень простой модульный тест на языке С++, внедренный в наш модуль и проверяющий работу функции извлечения квадратного корня с помощью подпрограммы testValue, подобной программе на языке Java, реализованной ранее:</p>
     <p>#ifdef _TEST_</p>
     <p>int main(int argc, char **argv) {</p>
     <p>argc-; argv++; // пропускаем имя программы</p>
     <p> if (argc&lt;2) {   // стандартные тесты, если аргументы не указаны</p>
     <p>   TestValue(-4.0, 0.0);</p>
     <p>   TestValue(0.0, 0.0);</p>
     <p>   TestValue(2.0, 1.4142135624);</p>
     <p>   TestValue(64.0, 8.0);</p>
     <p>   TestValue(1.0e7, 3162.2776602);</p>
     <p>}</p>
     <p>else {   // в этом случае используем аргументы</p>
     <p>  double num, expected;</p>
     <p>  while (argc&gt;= 2) {</p>
     <p>  num = atof(argv[0]);</p>
     <p>  expected = atof(argv[1]);</p>
     <p>  testValue(num.expected);</p>
     <p>  argc – = 2;</p>
     <p>  argv += 2;</p>
     <p> }</p>
     <p>}</p>
     <p>return 0;</p>
     <p>}</p>
     <p>#endif</p>
     <p>Данный модульный тест запускает минимальный набор тестов или же (при наличии аргументов) позволяет использовать внешние данные. Эта возможность могла быть задействована в сценарии запуска более полного набора тестов.</p>
     <p>Как поступить, если корректным откликом на модульный тест является выход из программы или ее аварийное завершение? В этом случае вам необходимо выбирать запускаемый тест, указывая аргумент в командной строке. Вам также придется передать некие параметры, чтобы указать различные начальные условия для ваших тестов.</p>
     <p>Но разработки одних модульных тестов недостаточно. Вы обязаны выполнять их и выполнять часто. Это также полезно, если класс время от времени проходит процедуру тестирования.</p>
    </section>
    <section>
     <title>
      <p>Применение тестовых стендов</p>
     </title>
     <p>Поскольку обычно мы пишем большое количество тестирующих программ и проводим большое количество процедур тестирования, есть смысл облегчить себе жизнь и разработать стандартный тестовый стенд для конкретного проекта. Программа main, представленная в предыдущем разделе, является весьма простым тестовым стендом, но обычно нам нужно больше функциональных возможностей.</p>
     <p>Тестовый стенд может осуществлять универсальные операции, такие как регистрация состояния системы, анализ выходных данных на наличие ожидаемых результатов, а также выбор и запуск конкретных процедур тестирования. Стенды могут управляться при помощи графического интерфейса, могут быть написаны на том же целевом языке, что и весь проект, или реализованы в виде сочетания сборочных файлов и сценариев на языке Perl. Простой тестовый стенд описан в ответе к упражнению 41 (см. Приложение В).</p>
     <p>При работе с объектно-ориентированными языками и средами можно создать базовый класс, содержащий универсальные операции. Отдельные тесты могут создать подкласс и добавить специфические процедуры тестирования. Можно использовать стандартное соглашение об именовании и отражение на языке Java для формирования списка процедур тестирования в автоматическом режиме. Эта методика является прекрасным способом соблюдать принцип DRY – вам не приходится следить за списком доступных тестов. Но перед тем как взлететь и начать писать свой собственный стенд, есть смысл изучить методику xUnit Кента Бека и Эриха Гаммы [URL 22]. Они уже проделали всю сложную подготовительную работу.</p>
     <p>Вне зависимости от выбранной вами технологии тестовый стенд обязан предоставлять следующие возможности:</p>
     <p>• Стандартный способ определения установочной процедуры и завершения работы</p>
     <p>• Метод выбора отдельных тестов или всех доступных тестов</p>
     <p>• Средства анализа выходных данных на наличие ожидаемых (или неожиданных) результатов</p>
     <p>• Стандартизированная форма отчета об обнаруженных неисправностях</p>
     <p>Процедуры тестирования должны быть составными; другими словами, процедура тестирования может состоять из различающихся степенью детализации субтестов, которые направлены на подкомпоненты. Мы можем воспользоваться этой особенностью для тестирования отдельных компонентов или системы в целом, используя те же самые инструменты.</p>
     <subtitle>Специальное тестирование</subtitle>
     <p>Во время отладки можно прекратить создание определенных тестов "на лету". Это может быть таким же простым делом, как оператор print или ввод фрагмента программы в интерактивной оболочке отладчика или ИСР.</p>
     <p>В конце сеанса отладки необходимо формализовать процедуру специального тестирования. Если программа прервалась один раз, скорее всего она прервется снова. Не стоит просто отбрасывать в сторону созданную процедуру тестирования; добавьте ее к существующему модульному тесту.</p>
     <empty-line/>
     <p>Например, при помощи JUnit (элемент Java из семейства xUnit) можно записать процедуру проверки извлечения квадратного корня следующим образом:</p>
     <p>public class JUnitExample extends TestCase {</p>
     <p>public JUnitExampleffinal String name) {</p>
     <p>  super(name);</p>
     <p>}</p>
     <p>protected void setUpQ {</p>
     <p>// Load up test data…</p>
     <p>testData.addElement(new dblPair(-4.0,0.0));</p>
     <p>testData.addElement(new dblPair(0.0,0.0));</p>
     <p>testData.addElement(new dblPair(64.0,8.0));</p>
     <p>testData.addElement(new dblPair(Double.MAX_VALUE, 1.3407807929942597E154));</p>
     <p>}</p>
     <p>public void testMySqrt() {</p>
     <p>double num, expected, result = 0.0;</p>
     <p>Enumeration enum = testData.elements();</p>
     <p>while (enum.hasMoreElements()) {</p>
     <p>dblPair p = (dblPair)enum.nextElement();</p>
     <p>num = p.getNum();</p>
     <p>expected = p.getExpected();</p>
     <p>testValue(num, expected);</p>
     <p>}</p>
     <p>}</p>
     <p>public static Test suite() {</p>
     <p>TestSuite suite= new TestSuite();</p>
     <p>suite.addTest(new JUnitExample("testMySqrt"));</p>
     <p>return suite;</p>
     <p>}</p>
     <p>}</p>
     <p>Пакет JUnit разработан по модульному принципу: к нему можно добавлять сколько угодно тестов, и каждый из них может, в свою очередь, являться пакетом. В дополнение к этому для управления процедурой тестирования вы можете выбрать графический или текстовый интерфейс.</p>
    </section>
    <section>
     <title>
      <p>Построение тестового окна</p>
     </title>
     <p>Даже самые лучшие наборы тестов скорее всего не смогут обнаружить всех «жучков»: во влажных и жарких условиях реальной эксплуатации возникает нечто, что заставляет их вылезать из деревянных изделий.</p>
     <p>Это означает, что зачастую приходится тестировать фрагмент программного обеспечения сразу после его развертывания – с реальными данными, текущими в его жилах. В отличие от печатной платы или чипа, в программном обеспечении нет тестовых контактов, но можно по-разному взглянуть на внутреннее состояние модуля, не прибегая к помощи отладчика (в производственных условиях его применение либо неудобно, либо просто невозможно).</p>
     <p>Одним из таких механизмов являются файлы журналов. Сообщения в журналах должны записываться в обычном последовательном формате; возможно, вы захотите провести их синтаксический анализ в автоматическом режиме дня определения времени обработки или логических путей, по которым двигалась программа. Диагностические процедуры, составленные небрежно или в несовместимом формате, вызывают тошноту – их трудно читать и непрактично анализировать.</p>
     <p>Другим механизмом, позволяющим заглянуть внутрь выполняющейся программы, является комбинация "горячих клавиш". При нажатии такой комбинации на экране появляется окно диагностики с сообщениями о состоянии и т. д. Совсем не обязательно сообщать о такой возможности конечным пользователям, но это может быть весьма полезно для службы технического сопровождения.</p>
     <p>Для более крупных программ, работающих на серверах, существует изящная технология, заключающаяся в том, что для слежения за ходом работы используется встроенный web-сервер. Можно привязать web-браузер к HTTP-порту приложения</p>
     <p>(который обычно имеет нестандартный номер типа 8080) и увидеть внутреннее состояние, журналы и даже нечто вроде панели управления отладкой. Реализация этого может показаться сложным делом, что не соответствует действительности это. Бесплатно внедряемые web-серверы с протоколом HTTP реализованы на различных современных языках программирования. Поиск можно начать с сайта [URL 58].</p>
    </section>
    <section>
     <title>
      <p>Культура тестирования</p>
     </title>
     <p>Все создаваемые вами программы будут протестированы – если не вами и вашей командой, то конечными пользователями, так что вы вполне можете планировать их тщательное тестирование. Небольшая предусмотрительность окажет серьезную помощь в минимизации затрат на сопровождение и снизит количество обращений в службу технического сопровождения.</p>
     <p>Несмотря на репутацию хакеров, члены сообщества Perl являются стойкими приверженцами регрессионного и модульного тестирования. Стандартная процедура инсталляции модуля в Perl поддерживает регрессионное тестирование с помощью команды</p>
     <p>% make test</p>
     <p>В этом отношении сам по себе Perl не является чем-то сверхъестественным. Perl облегчает сопоставление и анализ результатов тестирования для обеспечения соответствия, но его большое преимущество состоит в том, что он является стандартом – тестирование проводится в конкретном месте и имеет предсказуемый результат. Тестирование в большей степени является вопросом культуры, а не техники, независимо от используемого вами языка.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 49: Тестируйте ваши программы, в противном случае это сделают ваши пользователи</p>
     </cite>
     <empty-line/>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Мой исходный текст съел кот Мурзик</p>
     <p>• Ортогональность</p>
     <p>• Проектирование по контракту</p>
     <p>• Реорганизация</p>
     <p>• Безжалостное тестирование</p>
     <subtitle>Упражнения</subtitle>
     <p>41. Спроектируйте тестовый шаблон для интерфейса блендера для коктейлей, описанного в ответе к упражнению 17 (см. Приложение В). Напишите сценарий оболочки, который осуществит регрессионное тестирование блендерa. Необходимо проверить основные функциональные возможности, ошибки и граничные условия, а также любые обязательства по контракту. Какие ограничения налагаются на изменение скорости вращения ротора блендера? Соблюдаются ли они?</p>
    </section>
   </section>
   <section>
    <title>
     <p>35</p>
     <p>Злые волшебники</p>
    </title>
    <p>Никто не может отрицать – создавать приложения становится все сложнее и сложнее. В частности, пользовательские интерфейсы становятся все более утонченными. Двадцать лет назад приложение среднего масштаба обошлось бы интерфейсом "стеклянного телетайпа" (а может быть, интерфейса не было бы и вовсе). Асинхронные терминалы обеспечивали интерактивное отображение символов, а устройства ввода (наподобие вездесущей IBM 3270) позволяли набирать целую экранную страницу перед нажатием клавиши SEND. Теперь пользователи требуют графический интерфейс с контекстно-зависимой справкой, средствами типа "вырезать и вставить", "перетащить и отпустить", средством OLE, много- или однодокументным интерфейсом. Пользователям потребна интеграция с web-браузером и поддержка архитектуры с тонким клиентом.</p>
    <p>Усложняются и сами приложения. В настоящее время большинство разработок использует многозвенную модель, возможно, с промежуточным программным обеспечением или монитором транзакций. Эти программы отличаются динамичностью, гибкостью и способностью работать во взаимодействии с приложениями, написанными сторонними фирмами.</p>
    <p>Кажется, мы не сказали о том, что нам это было нужно на прошлой неделе – вес и сразу!</p>
    <p>Разработчики стараются быть в форме. Если бы мы использовали те же самые инструментальные средства, которые применялись для терминалов ввода-вывода двадцатилетней давности, то ничего бы не добились.</p>
    <p>Поэтому производители инструментальных средств и поставщики средств инфраструктуры придумали палочку выручалочку – функцию-мастера. Это замечательное средство. Вам нужно приложение с многодокументным интерфейсом и поддержкой контейнера OLE? Один щелчок мыши, ответ на пару простых вопросов – и функция-мастер автоматически сгенерирует для вас скелет программы. При выполнении данного сценария среда Microsoft Visual С++ автоматически создает программу, содержащую свыше 1200 строк. Функции-мастера хорошо справляются и с другими заданиями. Вы можете воспользоваться мастерами при создании серверных компонентов, реализации Java beans, работе с сетевыми интерфейсами – все это достаточно сложные области, где не обойтись без помощи эксперта.</p>
    <p>Но применение функции-мастера, спроектированной неким компьютерным гуру, не делает автоматически из разработчика Джо компьютерного эксперта. Джо чувствует себя недурно – он ведь сгенерировал большое количество исходного текста и довольно элегантную на вид программу. Ему нужно лишь добавить функциональную возможность, характерную для данного приложения, и программу можно отправлять заказчику. Но покуда Джо реально не осознает сути программы, сгенерированной от его имени, он вводит самого себя в заблуждение. Он программирует в расчете на стечение обстоятельств. Функция-мастер подобна улице с односторонним движением – она лишь «вырезает» программу и затем движется далее. Если сгенерированная программа не совсем правильна (или обстоятельства изменились), а вам необходимо адаптировать ее, вы остаетесь с ней один на один.</p>
    <p>Мы не выступаем против функций-мастеров. Напротив, их созданию в книге посвящен целый раздел "Генераторы исходных текстов". Но если вы все же используете функцию-мастера и не понимаете всей создаваемой ею программы, то не сможете управлять вашим собственным приложением. Вы не сможете сопровождать его и будете затрачивать неимоверные усилия при отладке.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 50: Не пользуйтесь программой функции-мастера, которую не понимаете</p>
    </cite>
    <empty-line/>
    <p id="_ednref40">Некоторые полагают, что это совсем уж экстремистская позиция. Они говорят, что разработчики всегда основывают свою работу на предметах, которые до конца им непонятны, – на квантовой механике в интегральных схемах, схеме прерываний в процессоре, алгоритмах, используемых при диспетчеризации процессов, программах из имеющихся библиотек и т. д. Мы согласны. И мы придерживались бы того же мнения о функциях-мастерах, если бы они представляли собой просто набор библиотечных вызовов или стандартные службы операционной системы, на которые могли положиться разработчики. Но это не так. Функции-мастера генерируют программу, которая становится неотъемлемой частью приложения, написанного разработчиком Джо. Сгенерированная программа не выносится за скобки, прячась за опрятным интерфейсом, она переплетена, строчка за строчкой, с теми функциональными возможностями, которые созданы самим Джо <a l:href="#n_40">[40]</a>. В конечном итоге она перестает быть программой функции-мастера и становится программой самого Джо. Никто не должен генерировать программу, не понимая ее до конца.</p>
    <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
    <p>• Ортогональность</p>
    <p>• Генераторы исходных текстов</p>
    <subtitle>Вопросы для обсуждения</subtitle>
    <p>• Если в вашем распоряжении имеется функция-мастер построения графического интерфейса, воспользуйтесь ей для генерирования «скелета» приложения. Внимательно изучите каждую строку сгенерированной программы. Всели в ней вам понятно? Могли бы написать ее сами? Лучше написать ее самому, или же она делает то, что вам не нужно?</p>
   </section>
  </section>
  <section>
   <title>
    <p>Глава 7</p>
    <p>Перед тем, как начать проект</p>
   </title>
   <section>
    <p>У вас никогда не возникало ощущения, что ваш проект обречен еще до его начала? Иногда так и происходит, если вначале вы не установите некоторые основополагающие правила. В противном случае вы можете объявить проект закрытым и сэкономить спонсору некоторую сумму.</p>
    <p>В самом начале проекта вам придется определить требования. Недостаточно лишь выслушать пользователей, необходимо прочесть раздел "Карьер для добычи требований".</p>
    <p>Житейская мудрость и управление сдерживающими факторами являются основными темами раздела "Разгадка невероятных головоломок". Неважно, какую операцию вы осуществляете – анализ, составление текста программы или тестирование, проблемы возникают все равно. Чаще они не будут настолько сложными, какими показались вначале.</p>
    <p>Даже когда вы подумаете, что решили все проблемы, то все равно будете чувствовать неудобства, начав работать над проектом. Является ли это простым промедлением или чем-то большим? В разделе "Пока вы не готовы" предлагается совет – в какой момент благоразумно прислушаться к предостережению внутреннего голоса.</p>
    <p>Слишком раннее начало – это проблема, но слишком долгое ожидание еще хуже. В разделе "Западня со стороны требований" обсуждаются преимущества создания спецификаций по образцу.</p>
    <p>В разделе "Круги и стрелки" рассматриваются некоторые ловушки, в которые можно попасть при использовании формальных процессов и методологий. Неважно, насколько хорошо он продуман, и какие "лучшие случаи из практики" в нем использованы, – никакой метод не заменит мышления.</p>
    <p>Если вы устраните эти критические аспекты до того, как проект будет запущен, вы лучше справитесь с "аналитическим параличом" и начнете выполнять реальный успешный проект.</p>
   </section>
   <section>
    <title>
     <p>36</p>
     <p>Карьер для добычи требований</p>
    </title>
    <epigraph>
     <p>Совершенство достигается не тогда, когда уже нечего прибавить, но когда уже ничего нельзя отнять.</p>
     <text-author>Антуан де Сент-Экзюпери, Ветер, песок и звезды, 1939</text-author>
    </epigraph>
    <section>
     <p>Многие книги и учебные пособия относят процедуру сбора исходных требований к начальной фазе проекта. Термин «сбор» напоминает о племени счастливых аналитиков, занимающихся собирательством камней-самородков мудрости, разбросанных по земле на фоне приглушенного звучания "Пасторальной симфонии". Этот термин напоминает о том, что все требования уже имеются в наличии, нужно лишь отыскать их, положить в корзину и весело шагать дальше.</p>
     <p>Это не совсем так. Требования редко лежат на поверхности. Обычно они находятся глубоко под толщей предположений, неверных представлений и политики.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 51: Не собирайте требования – выискивайте их</p>
     </cite>
     <empty-line/>
    </section>
    <section>
     <title>
      <p>В поисках требований</p>
     </title>
     <p>Как распознать истинное требование, пробиваясь к нему сквозь толшу грязевых наносов? Ответ на этот вопрос и прост, и сложен одновременно.</p>
     <p>Простой ответ состоит в том, что требование формулирует необходимость осуществления чего-либо. Грамотно составленное требование выглядит следующим образом:</p>
     <p>• Доступ к личному делу сотрудника ограничен группой уполномоченных на то лиц.</p>
     <p>• Температура головки блока цилиндров не должна превышать определенного критического значения, зависящего от марки двигателя.</p>
     <p>• Редактор выделяет ключевые слова, выбор которых зависит от типа редактируемого файла.</p>
     <p>Однако подобной четкостью могут похвастаться лишь немногие требования, что и делает их анализ весьма сложной задачей.</p>
     <p>Первая формулировка в списке, приведенном выше, вероятно, была составлена пользователями следующим образом: "Доступ к личному делу сотрудника ограничен его руководителями и работниками отдела кадров". Является ли эта формулировка требованием? Возможно, что сегодня и является, но она воплощает бизнес-политику в абсолютной формулировке. Политика же регулярно меняется, поэтому, скорее всего, мы не захотим жестко встраивать ее в наши требования. Мы рекомендуем документировать положения политики отдельно от требований и связывать их посредством гиперссылки. Сделайте требование общей формулировкой и снабдите разработчиков информацией о политике в качестве примера того, что им придется поддерживать в реализации. В конечном счете политика конечна, как и метаданные в приложении.</p>
     <p>Это весьма тонкое различие, но именно оно окажет серьезное воздействие на разработчиков. Если требование сформулировано как "Доступ к личному делу сотрудника ограничен персоналом фирмы", то разработчик может прекратить составление программы проверки на том месте, где приложение обращается к этим файлам. Однако если эта формулировка звучит как "Доступ к личному делу сотрудника ограничен уполномоченными на то пользователями", то разработчик, по всей вероятности, спроектирует и реализует нечто вроде системы управления доступом. При изменении политики (а оно обязательно произойдет) потребуется лишь обновление метаданных системы. На самом деле подобный метод сбора требований приведет к созданию системы, четко структурированной для поддержки метаданных.</p>
     <p>Различия между требованиями, политикой и реализацией могут быть весьма размытыми, если речь идет о пользовательских интерфейсах. Слова "Система должна давать возможность выбора срока предоставления ссуды" представляют собой формулировку требования. Выражение "Для выбора срока предоставления ссуды необходимо окно списка" может являться формулировкой, а может таковой и не являться. Если пользователям позарез нужно окно списка, то в этом случае речь идет о требовании. Если же вместо этого они описывают свою способность выбирать, используя окно списка лишь в качестве примера, то здесь говорится не о требовании. Врезка ниже "Когда интерфейс становится системой" описывает проект, который пошел совсем не в ту сторону, поскольку потребности пользователей в интерфейсе были проигнорированы.</p>
     <p>Важно обнаружить основополагающую причину того, почему пользователи поступают определенным образом, а не так, как они привыкли это делать. В конечном итоге разрабатываемой программе придется решать проблемы их бизнеса, а не просто отвечать их заявленным требованиям. Документируя причины, по которым были выдвинуты требования, команда разработчиков получит бесценную информацию, необходимую для принятия ежедневных решений, связанных с реализацией.</p>
     <p id="_ednref41">Существует простая методика: чтобы взглянуть изнутри на требования (которые часто являются весьма недостаточными) ваших пользователей, нужно самому стать пользователем. Пишете систему для службы поддержки? Посидите пару дней на телефоне вместе с опытным сотрудником этой службы. Занимаетесь автоматизацией ручной системы управления складскими запасами? Поработайте на складе с неделю <a l:href="#n_41">[41]</a>. Вы получите представление о реальном использовании системы и вдобавок будете просто поражены тем, насколько просьба "Можно я посижу рядом с вами недельку и посмотрю, как вы работаете?" способствует доверию и закладывает основы ваших взаимоотношений с пользователями. Но не путайтесь у них под ногами!</p>
     <empty-line/>
     <cite>
      <p>Подсказка 52: Работайте с пользователем, чтобы мыслить категориями пользователя</p>
     </cite>
     <empty-line/>
     <p>Добыча полезных требований важна – в это время начинают складываться связи с вашим пользовательским ядром, изучаются их ожидания и надежды на создаваемую вами систему. Более подробно это обсуждается в разделе "Большие надежды".</p>
    </section>
    <section>
     <title>
      <p>Документация требований</p>
     </title>
     <p>Итак, вы садитесь за стол с пользователями и начинаете выпытывать у них, что же им нужно на самом деле. Вы столкнетесь с несколькими вероятными сценариями, описывающими, что должно делать ваше приложение. Поскольку вы остаетесь профессионалом во всем, то вам хочется опубликовать такой документ, которым все смогут пользоваться в качестве основы при обсуждении, – разработчики, конечные пользователи и спонсоры проекта. Это весьма широкая аудитория.</p>
     <p>Ивар Джекобсон [Jac94] предложил концепцию "сценариев использования системы" для фиксирования требований. Они позволяют описывать частные случаи использования системы не с точки зрения пользовательского интерфейса, а в более абстрактном виде. К сожалению, книга И. Джекобсона несколько расплывчата в деталях, поэтому в настоящее время не существует единого мнения о том, что же считать "сценарием использования системы". Что это – формальный или неформальный термин, прозаический или структурированный документ (подобный канцелярской форме)? Каким должен быть уровень детализации (помните, что у нас весьма широкая аудитория)?</p>
     <subtitle>Когда интерфейс становится системой</subtitle>
     <p>В своей статье (журнал «Wired», январь 1999, с. 176) продюсер и музыкант Брайан Иноу описал чудо техники – новейший микшерный пульт. Этот пульт заставляет звучать все, что в принципе может звучать. И все же, вместо того, чтобы помочь музыкантам в создании лучших произведений или ускорить (или удешевить) процесс записи, он "путается под ногами", нарушая творческий процесс.</p>
     <p>Чтобы понять, почему это происходит, необходимо взглянуть на работу инженеров студии звукозаписи. Они сводят звук интуитивно. За годы работы в студии у них вырабатывается врожденный цикл обратной связи между ушами и кончиками пальцев, управляющих плавно движущимися регуляторами, вращающимися ручками и т. д. Однако компьютерный интерфейс нового микшерного пульта не усиливал их способностей. Вместо этого он заставлял пользователей набирать текст на клавиатуре и/или щелкать мышью. Функции, обеспечиваемые этим интерфейсом, были универсальными, но они были скомпонованы неизвестными и экзотическими способами. Функции, необходимые инженерам в их работе, иногда скрывались за невразумительными названиями или же достигались за счет неестественных сочетаний базовых средств.</p>
     <p>Эта среда характеризовалась требованием – усилить существующие навыки работы. Вместо того, чтобы раболепно дублировать то, что уже существует, нужно было обеспечить переход на новую ступень развития.</p>
     <p>Например, хорошим подспорьем в работе инженеров звукозаписи мог бы оказаться сенсорный интерфейс, смонтированный в виде классического микшерного пульта, но при этом позволяющий программам выходить за границы, определенные фиксированными ручками и переключателями. Единственным способом завоевать рынок является обеспечение удобства во время перехода на новую ступень за счет уже известных метафор.</p>
     <p>Этот пример также иллюстрирует нашу уверенность в том, что удачные инструменты всегда привыкают к рукам, их держащим. В данном случае речь идет о привыкании инструментов, которые создаются вами для других людей.</p>
     <empty-line/>
     <p>При рассмотрении сценариев использования системы стоит отметить их целенаправленную природу. Алистер Кокбэрн опубликовал статью, в которой описывается этот подход, а также шаблоны, используемые (строго или нестрого) при этом в качестве отправной точки ([Сос97а]; имеется Интернет-версия этой статьи [URL 46]). На рисунке 7.1. показан (в сокращении) пример подобного шаблона, на рис. 7.2 представлен пример сценария его использования.</p>
     <empty-line/>
     <p>Рис. 7.1. Шаблон сценария использования системы по А. Кокбэрну</p>
     <p>A. ХАРАКТЕРНАЯ ИНФОРМАЦИЯ</p>
     <p>– Цель в контексте</p>
     <p>– Область действия</p>
     <p>– Уровень</p>
     <p>– Предусловия</p>
     <p>– Условие успешного завершения</p>
     <p>– Условие неудачного завершения</p>
     <p>– Первичный действующий субъект</p>
     <p>– Условие начала действия</p>
     <p>B. ОСНОВНОЙ СЦЕНАРИЙ ПРИ УСПЕШНОМ ЗАВЕРШЕНИИ</p>
     <p>C. РАСШИРЕНИЯ</p>
     <p>D. ВАРИАНТЫ</p>
     <p>E. СОПУТСТВУЮЩАЯ ИНФОРМАЦИЯ</p>
     <p>– Приоритет</p>
     <p>– Рабочая характеристика</p>
     <p>– Частота</p>
     <p>– Превосходящий прецедент использования</p>
     <p>– Подчиненный прецедент использования</p>
     <p>– Канал связи с первичным действующим субъектом</p>
     <p>– Вторичные действующие субъекты</p>
     <p>– Канал связи со вторичными действующими субъектами</p>
     <p>F. РАСПИСАНИЕ</p>
     <p>G. ОТКРЫТЫЕ ПРОБЛЕМЫ</p>
     <empty-line/>
     <p>Используя формальный шаблон в качестве шпаргалки, вы можете быть уверены в том, что включили всю необходимую информацию в сценарий использования системы: характеристики производительности, другие стороны-участники, приоритет, частоту использования и разнообразные ошибки и исключения, которые могут появляться неожиданно ("нефункциональные требования"). Шаблон удобен для записи комментариев пользователей, наподобие "если мы получим условие ххх, тогда нам придется сделать ууу". Шаблон может послужить в качестве готовой повестки дня при встрече с пользователями ваших программ.</p>
     <empty-line/>
     <p>Рис. 7.2. Пример сценария использования системы</p>
     <p><strong>ПРЕЦЕДЕНТ ИСПОЛЬЗОВАНИЯ № 5: ПРИОБРЕТЕНИЕ ТОВАРА</strong></p>
     <p><strong>A. ХАРАКТЕРНАЯ ИНФОРМАЦИЯ</strong></p>
     <p>• Цель в контексте: Покупатель напрямую направляет коммерческий запрос в нашу фирму и ожидает отгрузки товаров и выставления счета за указанные товары.</p>
     <p>• Область действия: Фирма</p>
     <p>• Уровень: Итоговая информация</p>
     <p>• Предусловия: Нам известен покупатель, его адрес, и т. д.</p>
     <p>• Условие успешного завершения: Покупатель получает товары, мы получаем оплату.</p>
     <p>• Условие неуспешного завершения: Мы не производим отгрузку товаров, покупатель не производит оплату.</p>
     <p>• Первичный действующий субъект: Покупатель, любой агент (или компьютер), действующий от имени заказчика</p>
     <p>• Условие начала действия: Получение запроса на приобретение товара.</p>
     <p><strong>B. ОСНОВНОЙ СЦЕНАРИЙ С УСПЕШНЫМ ЗАВЕРШЕНИЕМ</strong></p>
     <p>1. Покупатель обращается в фирму с запросом на приобретение товара.</p>
     <p>2. Фирма фиксирует имя покупателя. его адрес, требуемые товары. и т. д.</p>
     <p>3. Фирма предоставляет покупателю информацию о товарах, ценах, сроках поставки, и т. д.</p>
     <p>4. Покупатель подтверждает заказ.</p>
     <p>5. Фирма компонует заказ, отправляет заказ покупателю.</p>
     <p>6. Фирма высылает покупателю счет-фактуру.</p>
     <p>7. Покупатель оплачивает счет-фактуру.</p>
     <p>C. <strong>РАСШИРЕНИЯ</strong></p>
     <p>3а. Один из пунктов заказа отсутствует у данной фирмы: Заказ переоформляется.</p>
     <p>4а. Покупатель производит оплату непосредственно кредитной картой: Прием оплаты кредитной картой (прецедент использования № 44).</p>
     <p>7а. Покупатель возвращает товар: Оформление возвращенного товара (прецедент использования № 105).</p>
     <p><strong>D. ВАРИАНТЫ</strong></p>
     <p>1. Покупатель может осуществить заказ по телефону, факсу, при помощи Интернет-формы (на странице), по другим сетям электронного обмена информацией.</p>
     <p>7. Покупатель может оплатить заказ наличными денежным переводом, чеком, или кредитной картой.</p>
     <p><strong>E. СОПУТСТВУЮЩАЯ ИНФОРМАЦИЯ</strong></p>
     <p>• Приоритет: Высший</p>
     <p>• Производительность: 5 минут на оформление заказа, оплата в течение 45 дней</p>
     <p>• Частота: 200 заказов в день</p>
     <p>• Превосходящий прецедент использования: Управление взаимоотношением с заказчиком (прецедент использования № 2).</p>
     <p>• Подчиненные прецеденты использования: Компоновка заказа (прецедент использования № 15)</p>
     <p>• Прием оплаты кредитной картой (прецедент использования № 44). Возврат товара покупателем (прецедент использования № 105).</p>
     <p>• Канал общения с первичным действующим субъектом: по телефону, факсу или компьютерной сети.</p>
     <p>• Вторичные действующие субъекты: компания – оператор платежной системы, банк, экспедиторская фирма.</p>
     <p><strong>F. РАСПИСАНИЕ</strong></p>
     <p>• Должная дата: Выпуск 1.0</p>
     <p><strong>G. ПРОБЛЕМЫ, ЯВЛЯЮЩИЕСЯ ОТКРЫТЫМИ</strong></p>
     <p>• Что происходит, если имеется лишь часть заказа?</p>
     <p>• Что происходит, если кредитная карта похищена?</p>
     <empty-line/>
     <p>Подобного рода организация поддерживает иерархическое структурирование сценариев использования системы – вложение более подробных сценариев в сценарии более высокого уровня. Например, сценарии post debit и post credit дополняют друг друга в сценарии post transaction.</p>
     <subtitle>Диаграммы сценариев использования</subtitle>
     <p>Последовательность операций может быть зафиксирована при помощи диаграмм на языке UML, а схемы концептуального представления иногда могут быть полезны для оперативного моделирования бизнес-процессов. На самом деле сценарии использования представляют собой текстовые описания с иерархией и перекрестными ссылками. Сценарии использования могут содержать гиперссылки на другие сценарии и могут вкладываться друг в друга.</p>
     <empty-line/>
     <p>Рис. 7.3. Сценарии использования, выраженные UML, понятны даже ребенку!</p>
     <image l:href="#i_015.jpg"/>
     <p>Кажется невероятным, что кто-нибудь может всерьез воспринимать документирование информации, используя примитивные символы, подобные изображенным на рисунке 7.3. Не будьте рабом системы обозначений: используйте любой метод общения, с помощью которого можно обмениваться требованиями с вашей аудиторией.</p>
    </section>
    <section>
     <title>
      <p>Чрезмерная спецификация</p>
     </title>
     <p>При генерации документов, содержащих требования, возникает серьезная опасность чрезмерной спецификации. Хорошие документы остаются абстрактными. Там, где думают о требованиях, простейшая формулировка, точно отражающая суть потребности, является наилучшей. Это не означает, что вы можете допустить неопределенность, нужно зафиксировать основополагающие семантические инварианты в качестве требований и задокументировать конкретную или же существующую на данный момент практику в качестве политики.</p>
     <p>Требования не являются архитектурой. Требования – это не конструкция, и не пользовательский интерфейс. Это потребность.</p>
    </section>
    <section>
     <title>
      <p>Видеть перспективу</p>
     </title>
     <p>Вина за возникновение "проблемы 2000 года" часто возлагается на близоруких программистов, пытавшихся сэкономить несколько байтов в те дни, когда объем памяти мэйнфреймов был меньше, чем у современных пультов дистанционного управления телевизорами.</p>
     <p>Но это не зависело от программистов и не являлось вопросом использования памяти. Если уж быть честным до конца, вина за это лежит на системных аналитиках и проектировщиках. "Проблема 2000 года" возникла по двум основным причинам: нежелание выйти за пределы существующей бизнес-практики и нарушение принципа DRY.</p>
     <p>Двухразрядное обозначение года использовалось в деловой практике задолго до появления компьютеров. Это было обычной практикой. В то время приложения, предназначенные для обработки данных, в основном занимались автоматизацией существующих бизнес-процессов и просто повторили ошибку. Даже в том случае, когда архитектура требовала двухразрядного обозначения при вводе данных, создании отчетов и хранении данных, должна была бы появиться абстракция DATE, которая «знала» о том, что две цифры представляли собой усеченную форму реальной календарной даты.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 53: Абстракции живут дольше, чем подробности</p>
     </cite>
     <empty-line/>
     <p>Требует ли от вас фраза "Видеть перспективу", чтобы вы занялись предсказанием будущего? Нет. Это означает создание формулировок типа:</p>
     <cite>
      <p>Система активно извлекает пользу из абстракции DATE. Система последовательно и универсально осуществит реализацию служб DATE наподобие форматирования, хранения данных и математических операций.</p>
     </cite>
     <p>В требованиях указывается лишь то, что даты используются в принципе. Это может навести на мысль, что с датами можно производить некоторые математические действия и что даты будут храниться на различных устройствах внешней памяти. Это и есть истинные требования для модуля или класса DATE.</p>
    </section>
    <section>
     <title>
      <p>Еще одна мелочь…</p>
     </title>
     <p>Вина за неудачи многих проектов возлагается на увеличение области их применения – это также называется раздуванием одной их характеристик, мелким улучшательством или размыванием требований. Это аспект синдрома лягушки из раздела "Суп из камней и сварившиеся лягушки" Что можно сделать для того, чтобы требования не поглотили нас?</p>
     <p>В литературе описаны многие метрики: количество обнаруженных и устраненных дефектов, плотность дефектов, сцепление, связывание, функциональные точки, строки программы и т. д. Эти метрики могут отслеживаться вручную или с помощью программы.</p>
     <p>К сожалению, немногие проекты могут похвастаться активным отслеживанием требований. Это означает, что они не имеют возможности сообщать об изменении в области действия – кто затребовал средство, кто утвердил его, каково общее число утвержденных запросов и т. д.</p>
     <p>Указание спонсорам на воздействие, оказываемое всяким новым средством на график проекта, помогает сдерживать рост количества требований. Если проект запаздывает на год по сравнению с начальными оценками, а в адрес исполнителей летят обвинения, всегда полезно иметь точную и полную картину того, как и когда происходит рост числа требований.</p>
     <p>Легко быть втянутым в водоворот под названием "всего лишь еще одно средство", но с помощью отслеживания требований вы получите более четкое представление о том, что это "всего лишь еще одно средство" на самом деле является пятнадцатым по счету, добавленным в этом месяце.</p>
    </section>
    <section>
     <title>
      <p>Поддержка глоссария</p>
     </title>
     <p>Как только вы начинаете обсуждать требования, пользователи и специалисты в предметной области будут использовать определенные термины, имеющие для них специфическое значение. Например, они проводят различие между «клиентом» и «заказчиком». Было бы неуместно допустить небрежность, используя в системе то один, то другой термин.</p>
     <p>Создайте и поддерживайте "глоссарий проекта", где будут определены все специфические термины и словарь, используемый в проекте. Все участники проекта, от конечных пользователей до специалистов службы поддержки, обязаны использовать глоссарий для обеспечения согласованности. Это подразумевает доступность глоссария для широкого круга – хороший аргумент для размещения документации на web-сайтах (об этом буквально через минуту).</p>
     <empty-line/>
     <cite>
      <p>Подсказка 54: Используйте глоссарий проекта</p>
     </cite>
     <empty-line/>
     <p>Очень сложно создать успешный проект, в котором пользователи и разработчики обращаются к одному и тому же предмету под разными именами или, что еще хуже, обращаются к разным предметам, используя одно и тоже имя.</p>
    </section>
    <section>
     <title>
      <p>Прошу слова…</p>
     </title>
     <p>В разделе "Все эти сочинения" обсуждается публикация проектных документов на внутренних сайтах, обеспечивающих легкость доступа к ним со стороны всех участников. Этот способ распространения особенно полезен для документации, относящейся к требованиям.</p>
     <p>Представляя требования в виде гипертекстового документа, мы можем обращаться к нуждам различной аудитории – дать каждому читателю, то что он хочет. Спонсоры проекта могут действовать на высоком уровне абстракции, чтобы удостовериться в том, нет что отклонений от цели бизнеса. Программисты могут использовать гиперссылки, чтобы «врубиться» в возросшие уровни детализации (даже в те, которые ссылаются на соответствующие определения или технические характеристики).</p>
     <p>Распространение с помощью сети Интернет также позволит избежать создания толстенных отчетов под названием "Анализ требований", которые никто никогда не прочтет и которые устаревают в тот момент, когда первая капля чернил смачивает лист бумаги.</p>
     <p>Если этот материал есть в Сети, то программисты даже могут его прочесть.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Суп из камней и сварившиеся лягушки</p>
     <p>• Довольно приличные программы</p>
     <p>• Круги и стрелки</p>
     <p>• Все эти сочинения</p>
     <p>• Большие надежды</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Можете ли вы использовать программы, которые сами пишете? Можно ли обладать хорошим чутьем на требования, будучи неспособным использовать программы самостоятельно?</p>
     <p>• Выберите проблему (не связанную с информатикой), которую вам необходимо решить в данный момент. Сгенерируйте требования для решения, не требующего наличия компьютера.</p>
     <subtitle>Упражнения</subtitle>
     <p>42. Какие из нижеследующих примеров, по всей вероятности, являются требованиями? Переформулируйте те, которые таковыми не являются, для придания им большей пользы (если это возможно). (Ответ см. в Приложении В.)</p>
     <p>1. Время отклика не должно превышать 500 мс.</p>
     <p>2. Цвет фона диалогового окна будет серым.</p>
     <p>3. Приложение будет организовано в виде нескольких внешних процессов и внутреннего сервера.</p>
     <p>4. Если пользователь вводит нечисловые символы в числовое поле, система будет выдавать звуковой сигнал и не примет их.</p>
     <p>5. Приложение и данные должны умещаться в пределах 256 Кбайт.</p>
    </section>
   </section>
   <section>
    <title>
     <p>37</p>
     <p>Разгадка невероятных головоломок</p>
    </title>
    <section>
     <p>Однажды царь Фригии Гордий завязал узел, который никто не мог развязать. Было предсказано, что тот, кто сможет развязать его, станет властелином всей Азии. И вот пришел Александр Македонский, который разрубил узел своим мечом. Несколько иная интерпретация требований и все – он стал властителем всей Азии.</p>
     <p>Время от времени вы будете оказываться в ситуации, когда в самом разгаре проекта перед вами возникает сложнейшая головоломка: техническая проблема, с которой невозможно справиться, или фрагмент программы, составление которого оказалось намного сложнее, чем вы думали. Может быть, это выглядит просто невозможным. Но так ли это сложно на самом деле?</p>
     <p>Рассмотрим реальные головоломки – хитроумные детальки, выполненные из дерева, металла или пластмассы, которые появляются в магазинах в дни рождественских праздников и распродаж. Задача состоит в том, что бы снять кольцо или сложить Т-образные кусочки в одну картинку, или выполнить нечто подобное.</p>
     <p>Итак, вы пытаетесь сделать это и быстро приходите к выводу, что очевидные решения просто не срабатывают. Головоломка не может быть разгадана подобным способом. И хотя это очевидно, люди не прекращают делать одно и то же снова и снова, будучи уверенными, что это и есть нужный способ.</p>
     <p>Конечно же, нет. Разгадка находится в совершенно другом месте. Секрет разгадки головоломки состоит в идентификации реальных (а не воображаемых) ограничений и поиске решения, исходя из этих ограничений, некоторые из которых абсолютны, а другие являются лишь предвзятыми мнениями. Абсолютные ограничения обязаны соблюдаться, какими бы неприятными и нелепыми они ни казались. С другой стороны, некоторые очевидные ограничения в реальности могут таковыми и не являться. Например, существует старый фокус, который обычно демонстрируется в баре: вы берете закупоренную бутылку шампанского и спорите, что можете пить из нее пиво. Фокус заключается в том, что вы переворачиваете бутылку донышком вверх и наливаете немного пива в углубление на донышке. Многие проблемы в программировании можно разрешить подобным оригинальным способом.</p>
    </section>
    <section>
     <title>
      <p>Степени свободы</p>
     </title>
     <p>Широко известное «умное» изречение о "размышлении вне пределов ящика" поощряет распознавание ограничений, которые могут быть неприменимы в данной ситуации, и игнорирование их впоследствии. Но эта фраза не вполне точна. Если «ящик» является границей ограничений и условий, то фокус заключается в нахождении этого «ящика», который может оказаться намного больше, чем выдумаете.</p>
     <p>Ключом к разгадке головоломки является распознавание факторов, сдерживающих вас, и степеней свободы, которые у вас есть, поскольку в них в них-то и находится разгадка. Вот почему многие головоломки столь эффективны: слишком легко вы отвергаете потенциальные разгадки.</p>
     <p>Например, можете ли вы соединить все четыре точки (см. рисунок ниже) тремя прямыми линиями и вернуться в исходную точку, не отрывая карандаша от бумаги и не проводя одной и той же линии дважды [Но178]?</p>
     <empty-line/>
     <p>Вы обязаны бросить вызов любым предвзятым мнениям и оценить, являются ли они реальными, раз и навсегда установленными ограничениями.</p>
     <image l:href="#i_016.jpg"/>
     <p>Неважно, как вы мыслите – в пределах ящика или за его пределами. Проблема заключается в нахождении ящика – распознавании реальных ограничений.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 55: Не размышляйте вне ящика – найдите этот ящик</p>
     </cite>
     <empty-line/>
     <p>Столкнувшись с серьезной проблемой, представьте все возможные направления, в которых вы можете двигаться. Не отвергайте никакие варианты, какими бы бесполезными или глупыми они ни казались. Теперь просмотрите весь список и объясните, почему нельзя идти по тому или иному пути. Вы уверены в этом? Можете ли это доказать?</p>
     <p>Рассмотрим историю с троянским конем – свежее решение непреодолимой проблемы. Как войско может попасть в укрепленный город, оставаясь незамеченным? Спорим, что вариант "через главные ворота" изначально был отвергнут как самоубийственный. Расположите ограничения по категориям и приоритетам. Столяры сначала вырезают самые крупные деревянные детали, а затем из оставшейся части – детали меньшего размера. Действуя подобным образом, мы хотим вначале идентифицировать самые жесткие ограничения и поместить оставшиеся внутрь.</p>
     <p>Между прочим, решение головоломки с четырьмя точками представлено в Приложении В.</p>
    </section>
    <section>
     <title>
      <p>Есть более простой способ!</p>
     </title>
     <p>Иногда вам приходится работать над проблемой, которая оказывается намного сложнее, чем выдумали. Возможно, вы идете неправильным путем, возможно, в данный момент вы отклонились от графика выполнения проекта или уже отчаялись увидеть систему работающей, поскольку конкретную проблему "невозможно решить". В этот момент необходимо сделать шаг назад и задать себе несколько вопросов:</p>
     <p>• Существует ли более простой способ?</p>
     <p>• Вы пытаетесь решить главную проблему или отвлекаетесь на второстепенные технические детали?</p>
     <p>• Почему это является проблемой?</p>
     <p>• Что делает эту проблему столь сложной для решения?</p>
     <p>• Стоит ли делать это именно таким образом?</p>
     <p>• Стоит ли это делать вообще?</p>
     <p>И во многих случаях секрет удивительным образом раскроется перед вами, как только вы попробуете ответить на один из этих вопросов. Зачастую новая интерпретация требований может унести с собой целый ворох проблем – так, как это произошло в случае с гордиевым узлом.</p>
     <p>Все, что вам нужно, – это знание реальных ограничений, вводящих вас в заблуждение, и мудрость, позволяющая отличить одно от другого.</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Пристально взгляните на любую сложную проблему, которую вам приходится решать. Можете ли вы разрубить гордиев узел? Задайте себе ключевые вопросы, приведенные выше, особенно этот: "Стоит ли делать это именно таким образом?"</p>
     <p>• Когда вы получили проект, которым занимаетесь в настоящее время, то прилагался ли к нему набор ограничений?</p>
    </section>
   </section>
   <section>
    <title>
     <p>38</p>
     <p>Чувство готовности</p>
    </title>
    <epigraph>
     <p>Тот, кто колеблется, иногда спасается</p>
     <text-author>Джеймс Тэрбер, Стекло на поле</text-author>
    </epigraph>
    <section>
     <p>Великим лицедеям присуща одна общая черта: они знают, когда начинать, а когда подождать. Прыгун в воду стоит на трамплине, ожидая подходящего момента для прыжка. Дирижер стоит за пультом с поднятыми руками, пока не почувствует, что пора начинать.</p>
     <p>Вы – великий артист. Вам также необходимо прислушиваться к внутреннему голосу, который шепчет «подожди». Если вы садитесь, начинаете набирать текст, а у вас в голове возникает неотступное сомнение, прислушайтесь к нему.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 56: Прислушайтесь к сомнениям – начинайте тогда, когда полностью готовы</p>
     </cite>
     <empty-line/>
     <p>Когда-то существовал стиль обучения игре в теннис под названием "внутренний теннис". Обучающийся должен был часами перекидывать мячи через сетку, не особенно заботясь о точности, а вместо этого описывая словами место, куда попал мяч относительно некой цели (часто этой целью был стул). Идея заключалась в тренировке подсознания и рефлексов, так начинающий теннисист улучшал игру, не осознавая, как и почему это происходит.</p>
     <p>Как разработчик вы проделываете то же самое на протяжении всей вашей профессиональной карьеры. Вы испробовали разные методы и видели, какие из них работают, а какие нет. Вы накапливали опыт и мудрость. Когда сомневались или испытывали затруднения, вы учитывали это. Возможно, вы не сможете точно указать, что не так, но потерпите немного, и сомнения вероятно выкристаллизуются в нечто более основательное, на что сможете ссылаться. Разработка программ пока еще не является научной дисциплиной. Дайте инстинктам внести лепту в вашу работу.</p>
    </section>
    <section>
     <title>
      <p>Здравое суждение или промедление?</p>
     </title>
     <p>Каждый испытывает страх перед чистым листом бумаги. Начало нового проекта (или даже новый модуль в существующем проекте) может лишить вас спокойствия. Многие из нас предпочли бы отложить момент связывания себя обязательствами. Но вы же не можете заявить, что вы просто оттягиваете начало работы?</p>
     <p>Создание прототипа – это методика, хорошо зарекомендовавшая себя в подобных обстоятельствах. Выберите область, которая, по вашему мнению, будет трудной, и начните создание некоего доказательства концепции. Вскоре вы можете ощутить, что тратите время понапрасну. Это признак того, что ваше изначальное сопротивление было просто желанием отложить момент связывания себя обязательствами. Откажитесь от прототипа и врубайтесь в реальную разработку.</p>
     <p>С другой стороны, в ходе разработки прототипа наступает момент истины, когда вы внезапно осознаете, что некая базовая предпосылка была неверной. Но вам станет ясно не только это, но и способ исправления этой предпосылки. Вы с легкостью откажетесь от прототипа и начнете проект надлежащим образом. Инстинкты не обманули, и вы сэкономили для себя и команды значительное количество усилий, которое могли потратить впустую.</p>
     <p>Когда вы принимаете решение о создании прототипа, в целях исследования причины своего беспокойства, не забывайте, зачем это делаете. Вспоминать о том, что вы начали создавать прототип, спустя несколько недель после начала серьезного проекта – последнее дело.</p>
     <p>Это звучит несколько цинично, но начало работ по созданию прототипа может быть более политкорректно, нежели примитивное высказывание типа "Я не настроен на начало работы" с последующим запуском игры "пасьянс".</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Обсудите синдром "страха начала работы" с вашими коллегами. Испытывают ли они тот же самый синдром? Принимают ли они его во внимание? Какие приемы они используют для его преодоления? Может ли группа преодолеть сопротивление отдельной личности, или это будет давлен и ем со стороны команды?</p>
    </section>
   </section>
   <section>
    <title>
     <p>39</p>
     <p>Западня со стороны требований</p>
    </title>
    <epigraph>
     <p>Пилот, совершающий посадку, не управляет самолетом до подачи команды "высота принятия решения", когда пилот, управляющий самолетом и не совершающий посадку, передает управление пилоту, не осуществляющему управление и совершающему посадку, если последний не подает команду "уход на второй круг", и в этом случае пилот, осуществляющий управление и не совершающий посадку продолжает управлять самолетом, а пилот, не управляющий самолетом и совершающий посадку, остается на связи до подачи команды «посадка» или "уход на второй круг" в зависимости от обстановки. Ввиду недавних случаев неоднозначного толкования этих правил считаем необходимым дать их более четкую формулировку.</p>
     <text-author>Цитата из докладной записки авиакомпании British Airways, опубликованная в журнале "Pilot Magazine", декабрь 1996 г.</text-author>
    </epigraph>
    <p>Спецификация программы – это процесс приема требований и сокращения их до точки, в которой навык программиста может взять вверх. Это акт передачи информации, объяснения и прояснения в целях устранения основных неоднозначностей. Подобно разговору с разработчиком, который будет осуществлять первоначальную реализацию, спецификация является скрижалью для будущих поколений программистов, которые будут заниматься сопровождением и усовершенствованием программы. Спецификация представляет собой также и соглашение с пользователем – это кодификация их потребностей и негласный контракт, говорящий о том, что окончательная версия системы будет соответствовать тем же требованиям.</p>
    <p>Составление спецификации – это большая ответственность.</p>
    <p>Проблема состоит в том, что многим проектировщикам трудно остановиться. Они полагают, что, пока каждая второстепенная деталь не будет выявлена до мельчайших подробностей, они даром получают свои деньги.</p>
    <p>Это является ошибкой по ряду причин. Во-первых, наивно полагать, что спецификация вообще способна зафиксировать каждую подробность некой системы или предъявляемых к ней требований. В узких предметных областях существуют формальные методы, с помощью которых можно описать систему, но для объяснения смысла обозначений конечным пользователям все равно требуется проектировщик – все еще имеет место человеческий фактор. И даже в отсутствии проблем, присущих этой версии, маловероятно, что средний пользователь точно знает, что ему нужно от этого проекта. Заказчики могут сказать, что осознают суть требований и подписаться под 200-страничным документом, составленным вами, но можете быть уверены – как только они увидят систему в работе, вы будете завалены просьбами о внесении изменений.</p>
    <p id="_ednref42">Во вторых, существует проблема выразительности самого языка. Все методики составления диаграмм и формальные методы все еще полагаются на выражение проводимых операций средствами естественных языков <a l:href="#n_42">[42]</a>. А естественный язык не приспособлен для этого. Посмотрите на формулировку любого контракта: юристам приходится коверкать язык самым неестественным способом, стараясь быть точными.</p>
    <p>Проблемный вопрос для вас. Напишите короткую инструкцию по завязыванию бантиком шнурков на ботинках. Попробуйте!</p>
    <p>Если вы хоть чем-то похожи на нас, то скорее всего, сдадитесь, дойдя примерно до этого места: "Теперь оберните большой и указательный пальцы так, чтобы свободный конец шнурка проходил под левым шнурком во внутреннюю петлю…" Это феноменально трудное задание. И все же большинство из нас могут зашнуровать ботинки, не напрягая мозги.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 57: Некоторые вещи лучше сделать, чем описывать</p>
    </cite>
    <empty-line/>
    <p>И наконец, существует "эффект смирительной рубашки" – конструкции, которая не оставляет кодировщику пространства для импровизации и отнимает усилия программирования любого рода. Кое-кто говорит, что хотел как лучше, но он неправ. Зачастую лишь на стадии написания текста некоторые варианты становятся очевидными. Во время написания программы вы можете подумать следующее: "Посмотрим вот сюда. Поскольку я написал эту подпрограмму именно таким образом, я смог добавить эту функциональную возможность практически без усилий". Или: "В спецификации говорится, что нужно сделать вот это, но я смог добиться практически того же результата, сделав по-другому, но затратил на это вдвое меньше времени". Ясно, что вы не обязаны вносить изменения, но у вас не было бы и намека на эту возможность, если бы ваши действия сдерживались конструкцией, изобилующей предписаниями.</p>
    <p>Будучи прагматиком, вы должны стремиться рассматривать сбор требований, проектирование и реализацию как различные ипостаси одного процесса – поставки заказчику качественной системы. Не воспринимайте как изолированные друг от друга те среды, в которых происходит сбор требований, составление спецификаций и создание программ. Вместо этого постарайтесь принять «бесшовную» технологию: спецификация и реализация просто являются разными аспектами одного и того же процесса – попыткой зафиксировать и кодифицировать некое требование. Каждый из этих аспектов должен плавно переходить в другой без искусственных границ. Вы обнаружите, что в жизнеспособном процессе разработки поощряется обратная связь, идущая от реализации и тестирования к процессу составления спецификации.</p>
    <p id="_ednref43">Поймите нас правильно, мы не против искусственного генерирования спецификаций. Разумеется, мы признаем, что в ряде случаев необходимы невероятно подробные спецификации – в силу причин, обусловленных контрактом, из-за операционной системы, в которой вы работаете, или природы самого продукта, разработкой которого вы занимаетесь <a l:href="#n_43">[43]</a>. Просто осознайте, что по мере того как спецификации становятся все более подробными, их доходность начинает убывать, а то и уходит в минус. Кроме того, будьте осторожны при составлении многослойных спецификаций, нижние уровни которых не обеспечены реализацией или прототипами; слишком легко составить спецификацию того, что невозможно построить.</p>
    <p>Чем дольше вы будете позволять спецификациям оставаться защитной оболочкой, предохраняющей разработчиков от кошмарного мира составления программ, тем сложнее будет перейти к решению задач, возникающих при составлении программ. Не окажитесь в этой спирали спецификации: в некоторой точке вам придется начать программирование! Если ваша команда будет облачена в теплые, удобные спецификации, разорвите эти оковы. Подумайте о создании прототипов или о разработке с использованием метода "стрельбы трассирующими".</p>
    <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
    <p>• Стрельба трассирующими</p>
    <subtitle>Вопросы для обсуждения</subtitle>
    <p>• Пример с завязыванием шнурка бантиком, приведенный в данной главе, является интересной иллюстрацией проблем, связанных с письменным изложением. Вы не думали о том, что лучше описывать процесс блок-схемами, а не словами? Фотографиями? С помощью некой формальной системы обозначений, взятой из топологии? При помощи модели с проволочными шнурками? Как бы вы научили ребенка завязывать шнурки?</p>
    <p>Иногда от одного рисунка больше пользы, чем от любого количества слов. Если вы замечаете, что ваша спецификация чрезмерна, можно ли призвать на помощь рисунки или специальную систему обозначений? Насколько подробными они обязаны быть? В каких случаях лучше использовать наглядное средство, а не лекционную доску?</p>
   </section>
   <section>
    <title>
     <p>40</p>
     <p>Круги и стрелки</p>
    </title>
    <section>
     <epigraph>
      <p>[Фотографии] с кругами и стрелками и несколькими строками на обратной стороне, объясняющими, кто есть кто, должны были стать свидетельством против нас…</p>
      <text-author>Арло Гатри, Ресторан Алисы</text-author>
     </epigraph>
     <p>Начиная со структурного программирования, через бригады главного программиста, CASE-средства, разработку методом «водопада», спиральную модель, метод Джексона, диаграмму «сущность-связь», облака Буча, метод объектного моделирования, метод Objectory, метод Коуда/Йордона до современного языка UML информатика никогда не страдала от недостатка методов, стремившихся уподобить программирование инженерной дисциплине. Каждый метод имеет своих приверженцев, и каждый из них переживает период популярности. Затем ему на смену приходит следующий. Долгая жизнь была суждена возможно лишь одному из всех этих методов – структурному программированию.</p>
     <p>И все же некоторые разработчики, дрейфуя в море тонущих проектов, продолжают цепляться за последний «пунктик», подобно тому как жертвы кораблекрушения хватаются за проплывающее бревно. Когда к ним подплывает другой обломок, то они, испытывая мучения, доплывают до него, надеясь что уж он-то будет получше. Хотя, в конце концов, качество обломка не имеет особого значения – разработчики дрейфуют все так же бесцельно.</p>
     <p>Поймите нас правильно. Нам нравятся (некоторые) формальные методики и методы. Но мы полагаем, что слепое следование любой методике без рассмотрения ее в контексте практики разработки программ и ваших возможностей является лучшим рецептом для разочарования.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 58: Не будьте рабом формальных методов</p>
     </cite>
     <empty-line/>
     <p>Формальные методы имеют ряд серьезных недостатков.</p>
     <p>• Большинство формальных методов фиксируют требования, используя сочетание диаграмм и нескольких пояснительных фраз. На этих рисунках показано, как проектировщик понимает требования. Однако в многих случаях для конечных пользователей эти диаграммы бессмысленны, поэтому они нуждаются в их интерпретации проектировщиками. Следовательно, в реальности формальная проверка требований со стороны фактического пользователя отсутствует – все основывается на объяснениях проектировщика, как и в старомодных письменных требованиях. В этом способе фиксирования требований есть определенная польза, но мы предпочитаем, если это возможно, предоставить в распоряжение пользователя некий прототип и дать ему с ним поиграться.</p>
     <p>• Похоже, что формальные методы поощряют специализацию. Одна группа людей работает над моделью данных, другие занимаются архитектурой, в то время как сборщики требований коллекционируют сценарии использования (или их эквивалент). Мы видели, как это приводило к плохому взаимодействию и трате усилий впустую. Кроме того, существует тенденция впадать в умонастроение типа "мы против них" – проектировщики против программистов. Мы же предпочитаем воспринимать систему, над которой работаем, целиком. Скорее всего, невозможно будет глубоко проникнуть в суть каждого аспекта системы, но вы обязаны знать, как взаимодействуют между собой компоненты, куда помещены данные и каковы требования.</p>
     <p>• Мы предпочитаем создавать настраиваемые динамичные системы, используя метаданные, позволяющие изменять характер приложений в ходе их выполнения. Большинство современных формальных методов сочетают модель статического объекта или данных с некоторой разновидностью механизма построения диаграммы событий или процесса. Мы пока не встречали механизма, позволяющего отображать динамизм, ожидаемый от систем. На самом деле большинство формальных методов уводят в сторону, поощряя стремление к заданию статических отношений между объектами, которые на самом деле должны быть связаны между собой динамически.</p>
    </section>
    <section>
     <title>
      <p>Какова отдача от методов?</p>
     </title>
     <p>В своей статье в журнале САСМ [Gla99b], написанной в 1999 г., Роберт Гласе сделал обзор исследований улучшений в производительности и качестве, достигнутых благодаря семи различным технологиям разработки программ (технология 4GL, структурные методики, CASE-средства, формальные методы, методология "чистой комнаты", модели процессов и ООТ). Он сообщает, что первоначальное оживление, связанное со всеми этими методами, было преувеличено. Хотя существуют указания на то, что у некоторых методов есть преимущества, эти преимущества начинают проявляться только после существенного снижения производительности и качества, в период принятия технологии на вооружение и обучения пользователей.</p>
     <p>Не стоит недооценивать стоимость принятия новых инструментальных средств и методов. Подготовьтесь к тому, что первые проекты с применением этих технологий будут предназначены для учебных целей.</p>
    </section>
    <section>
     <title>
      <p>Нужно ли использовать формальные методы?</p>
     </title>
     <p>Безусловно. Но не забывайте, что формальные методы разработки – это лишь один инструмент из вашего арсенала. Если после тщательного анализа вы почувствуете, что вам необходим формальный метод, берите его на вооружение, но помните, что несете ответственность. Никогда не становитесь рабом методологии, ведь кружки и стрелки обедняют своих хозяев. Прагматики смотрят на методологии критическим взглядом, затем берут лучшее из каждой и преобразуют их в набор практических технологий, который улучшается каждый месяц. Это является решающим моментом. Вы должны постоянно работать над усовершенствованием процессов. Никогда не делайте жесткие рамки методологии границами вашего собственного мира.</p>
     <p>Не подавайтесь ложному авторитету метода. Люди могут ходить на собрания, принося с собой гектары бумаги с изображением диаграмм классов и сто пятьдесят сценариев использования, но вся эта макулатура – лишь их ошибочная интерпретация требований и конструкции. Старайтесь не думать о том, сколько стоит тот или иной инструмент, глядя на результаты его работы.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 59: Дорогие инструменты не всегда создают лучшие решения</p>
     </cite>
     <empty-line/>
     <p>Конечно, в разработке программ есть место формальным методам. Однако, столкнувшись с проектом, философия которого заключается в изречении "диаграмма класса и есть приложение, все остальное – лишь механическое составление текста программы", знайте, что имеете дело с проектной командой, которая уцепилась за плавучее бревно и медленно гребет к берегу.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Карьер для добычи требований</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Диаграммы сценариев использования являются частью процесса UML при сборе требований (см. "Карьер для добычи требований"). Являются ли они эффективным способом взаимодействия с вашими пользователями? Если нет, то почему вы их используете?</p>
     <p>• Как вы можете объяснить пользу, которую приносит формальный метод вашей команде? Чем вы можете ее измерить? В чем состоит улучшение? Можете ли вы провести различие между пользой от инструментального средства и возросшим опытом сотрудников вашей команды?</p>
     <p>• Где расположена точка безубыточности при внедрении новых методов в вашей команде? Как можно оценить компромисс между пользой, приносимой в будущем, и текущими потерями в производительности в период внедрения нового инструментального средства?</p>
     <p>• Годятся ли инструментальные средства, применяемые в крупномасштабных проектах, для малых проектов? Верно ли обратное?</p>
    </section>
   </section>
  </section>
  <section>
   <title>
    <p>Глава 8</p>
    <p>Прагматические проекты</p>
   </title>
   <section>
    <p>Поскольку вы уже работаете над проектом, нам придется отойти от вопросов, связанных с личностной философией и написанием программ, чтобы поговорить о более серьезных вещах в масштабах проекта. Мы не собираемся углубляться в специфику руководства проектами, а рассмотрим несколько критических областей, которые способны создать или разрушить любой проект.</p>
    <p>Как только число сотрудников, работающих на проектом, превышает единицу, вам приходится устанавливать некие основные правила и делегировать части проекта соответствующим образом. В разделе "Команды прагматиков" мы покажем как это можно делать, соблюдая принципы прагматической философии.</p>
    <p>Единственным и самый важным фактором, придающим последовательность и надежность процессам на уровне проекта, является автоматизация процедур. В разделе "Вездесущая автоматизация" мы объясним, почему это именно так, и приведем некоторые примеры из реальной жизни.</p>
    <p>Выше говорилось о тестировании в ходе написания программ. В разделе "Безжалостное тестирование" мы переходим на следующую ступень философии и инструментов, применяемых в масштабе проекта, в особенности, если нет отдела контроля качества, находящегося у вас на побегушках.</p>
    <p>Единственная вещь, которую разработчики не любят больше, чем тестирование, – это документация. Независимо от того, есть ли у вас технические писатели, помогающие вам, или вы пишете документацию сами, мы покажем в разделе "Все эти сочинения", как сделать эту работу менее болезненной и более продуктивной.</p>
    <p>Успех проекта находится перед глазами наблюдателя – спонсора проекта. Восприятие успеха – это самое главное, и в разделе "Большие надежды" мы покажем вам некоторые хитрости, которые порадуют сердце любого спонсора проекта.</p>
    <p>Последней подсказкой в этой книге является прямое следствие всех остальных. В разделе "Гордость и предубеждение" мы поощряем вас подписывать свою работу и гордиться тем, что вы делаете.</p>
   </section>
   <section>
    <title>
     <p>41</p>
     <p>Команды прагматиков</p>
    </title>
    <epigraph>
     <p>В группе L Стоффел руководит шестью первоклассными программистами – это руководящая работа, которую можно приравнять к управлению бродячими котами.</p>
     <text-author>Журнал "Washington Post" от 9 июня 1985 г.</text-author>
    </epigraph>
    <section>
     <p>Пока в книге мы рассматривали прагматические методики, которые помогают отдельной личности стать лучшим программистом. Могут ли эти методы работать в приложении к командам?</p>
     <p>Отвечаем на это громким "да!" В личностном прагматизме есть свои преимущества, но эти преимущества преумножаются, если личность работает в команде прагматиков,</p>
     <p>В этом разделе мы кратко рассмотрим, как прагматические методики могут применяться к целым командам. Эти замечания – лишь начало. Как только собирается команда разработчиков-прагматиков, работающих в среде, предоставляющей определенные возможности, они быстро развивают и совершенствуют свою собственную командную динамику, которая работает на них.</p>
     <p>Рассмотрим некоторые из предыдущих разделов с точки зрения команд.</p>
    </section>
    <section>
     <title>
      <p>Никаких разбитых окон</p>
     </title>
     <p>Качество является прерогативой команды. Для самого прилежного разработчика, попавшего в команду, которая безразлична к работе, окажется сложным сохранять энтузиазм, необходимый для устранения проблем, требующих кропотливости. Проблемы будут только усугубляться, если команда активно уговаривает разработчика не тратить время на устранение этих проблем.</p>
     <p>Команда в целом не должна допускать наличия разбитых окон – этих маленьких недостатков, которые никем не устраняются. Команда обязана взять на себя ответственность за качество продукта, поддерживая разработчиков, исповедующих философию "не живите с разбитыми окнами", описанную в разделе "Энтропия в программах", и поощряя ее изучение теми, кто пока не открыл ее для себя.</p>
     <p>В некоторых методологиях коллективной работы предусмотрен менеджер по качеству – сотрудник, которому команда делегирует ответственность за качество продукта, отправляемого заказчику. Это просто смешно: качества можно достигнуть только в результате индивидуальной лепты, вносимой каждым членом команды.</p>
    </section>
    <section>
     <title>
      <p>Сварившиеся лягушки</p>
     </title>
     <p>Помните несчастную лягушку, сидевшую в кастрюле с водой, из разделе "Суп из камней и сварившиеся лягушки"? Она не заметила постепенного изменения в окружающей среде и в конце концов сварилась. То же самое может произойти с отдельными личностями, которые теряют бдительность. Трудно уследить за общим состоянием среды в разгаре работы над проектом.</p>
     <p>Команда может свариться значительно быстрее, чем отдельная личность. Люди предполагают, что кто-то другой занимается неким вопросом или что руководитель команды наверняка одобрил изменение, которое просил внести пользователь. Даже самые целеустремленные группы могут не обратить внимания на существенные изменения, происходящие с их проектами.</p>
     <p>Боритесь с этим. Убедитесь, что каждый активно отслеживает изменения в состоянии среды. Может быть, стоит нанять "ответственного за состояние воды". Этот сотрудник должен постоянно следить за увеличением сферы покрытия, уменьшением масштабов времени, дополнительными средствами, новыми средами – всем тем, чего не было в первоначальном соглашении. Сохраняйте метрики по новым требованиям (см. раздел "Еще одна мелочь…"). Команде не нужно наотрез отказываться от изменений – просто надо знать, что они происходят. В противном случае лягушкой в горячей воде окажетесь именно вы.</p>
    </section>
    <section>
     <title>
      <p>Общайтесь</p>
     </title>
     <p>Очевидно, что разработчики в группе должны разговаривать друг с другом. В разделе "Общайтесь!" даны некоторые советы для облегчения подобного общения. Однако не забывайте, что сама по себе команда находится в рамках определенной организации. Команде как субъекту приходится четко взаимодействовать с остальным миром.</p>
     <p>Для посторонних худшими проектными командами являются те, которые кажутся угрюмыми и чересчур сдержанными. Они проводят бессистемные встречи, на которых никто не хочет выступать. Их документы – сплошная путаница, среди них нет хотя бы двух похожих, и каждый разработчик пользуется своей терминологией.</p>
     <p id="_ednref44">Лучшие проектные команды обладают ярко выраженной индивидуальностью. Люди ожидают встреч с ними, поскольку знают, что увидят хорошо подготовленную презентацию, от которой всем станет лучше. Производимая ими документация отличается четкостью, точностью и последовательностью. В такой команде нет разноголосицы <a l:href="#n_44">[44]</a>. У нее даже может быть чувство юмора.</p>
     <p>В маркетинге существует простой трюк, помогающий командам взаимодействовать как одно целое: создание брэнда. Когда вы начинаете некий проект, придумайте имя для проектной команды, в идеале – нечто из ряда вон выходящее. (В прошлом мы называли проекты в честь попугаев-киллеров, охотящихся на овец, оптических обманов и мифических городов.) Потратьте полчаса на придумывание самого идиотского логотипа и используйте его в ваших служебных записках и отчетах. В разговорах с людьми свободно упоминайте название вашей команды. Это звучит глупо, но все это придаст вашей команде некую самобытность, а миру – что-то запоминающееся, с чем можно ассоциировать вашу работу.</p>
    </section>
    <section>
     <title>
      <p>Не повторяйте самого себя</p>
     </title>
     <p>"В разделе "Пороки дублирования" говорилось о трудностях, связанных с устранением дублирования работы, выполняемой разными членами команды. Это дублирование ведет к тому, что усилия тратятся впустую и все выливается в кошмарные ситуации при сопровождении. Ясно, что здесь нужно четкое взаимодействие, но в ряде случаев необходимо приложить и дополнительные усилия.</p>
     <p>Некоторые команды включают в свой состав библиотекаря проекта, который несет ответственность за координацию документации и хранение текстов исходных программ. Другие члены команды могут использовать этого сотрудника в качестве "истины в последней инстанции", когда они занимаются поиском чего-либо. Хороший библиотекарь также способен предсказать возникновение дублирования, прочитав материал, с которым они работают.</p>
     <p>Если проект слишком велик для одного-единственного библиотекаря (или если никто не хочет брать на себя его функции), назначьте нескольких человек "фокусными точками" различных функциональных аспектов работы. Если кто-то хочет обговорить тему обработки даты, он знает, что по этому вопросу нужно обращаться к Мэри. Если же речь идет о базе данных, то следует обращаться к Фреду.</p>
     <p>И не забудьте о значении программного обеспечения для коллективной работы и локальных телеконференциях в сети Usenet для обмена информацией и создания архивов вопросов и ответов.</p>
    </section>
    <section>
     <title>
      <p>Ортогональность</p>
     </title>
     <p id="_ednref45">Традиционная организация команды основана на устаревшем методе создания программного обеспечения, известного под названием "метода водопада". Отдельным членам команды назначаются роли, основанные на их должностных обязанностях. В команде имеются бизнес-аналитики, проектировщики, программисты, тестировщики, технические писатели и т. п. <a l:href="#n_45">[45]</a> В этом случае существует явная иерархия – чем ближе вы допущены к конечному пользователю, тем выше ваше положение.</p>
     <p>В стремлении довести все до крайности, некоторые объединения разработчиков диктуют строгое разграничение ответственности: тем, кто составляет программы, не разрешено общаться с теми, кто их тестирует, а им, в свою очередь, не разрешено общаться с главным архитектором и т. д. Некоторые организации еще более усложняют задачу, заставляя различные подгруппы отчитываться через отдельные цепочки управления.</p>
     <p>Ошибочным является мнение о том, что различные действия при работе над неким проектом – анализ, проектирование, написание программы и тестирование – могут происходить изолированно друг от друга. Такого не бывает. Это различные точки зрения на одну и ту же проблему, и их искусственное разделение может вызвать целый ворох проблем. Программисты, отделенные двумя или тремя уровнями от реальных пользователей написанной ими программы, скорее всего не знают о контексте, в котором используется результат их труда. Они будут не в состоянии принять обоснованные решения.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 60: Организуйте команду на основе функциональности, а не должностных обязанностей</p>
     </cite>
     <empty-line/>
     <p>Мы одобряем разбиение команды исходя из функциональных возможностей. Разделите ваших сотрудников на небольшие группы, каждая из которых будет нести ответственность за конкретный функциональный аспект конечной версии системы. Каждая группа обладает обязательствами перед другими группами, участвующими в проекте, что определено их согласованными обязательствами. Строгий набор обязательств изменяется с каждым новым проектом, как и распределение людей по группам.</p>
     <p>В данном случае функциональная возможность необязательно означает сценарий использования конечным потребителем программного продукта. Сюда относится и уровень доступа к базе данных, и справочная подсистема. Мы ищем сплоченные, в большой степени самостоятельные коллективы людей по тем же критериям, которые мы обязаны использовать при декомпозиции программы. Существуют признаки, предупреждающие о том, что организация команды неверна; классическим примером этого являются две подгруппы, работающие над одним и тем же программным модулем или классом.</p>
     <p>В чем же состоит польза от подобного функционального стиля организации? Организуя ресурсы, применяя те же методики, что и при организации программы, используя контракты (см. "Проектирование по контракту", несвязанность (см. "Несвязанность и закон Деметера") и ортогональность (раздел "Ортогональность"), мы способствуем изоляции команды в целом от влияния изменений. Если пользователь внезапно решится на замену поставщиков баз данных, то это скажется только на команде, занимающейся базами данных. Если отдел маркетинга внезапно примет решение об использовании готового средства календарного планирования, то это будет ударом только для группы разработчиков этого средства. При надлежащем исполнении подобный подход к группам может существенно снизить число пересечений в работе отдельных личностей, снизить затраты времени, повысить качество и уменьшить число дефектов. Этот подход помогает сделать команду разработчиков более сплоченной. Каждая группа знает, что только они несут ответственность за конкретную функцию.</p>
     <p>Однако этот подход работает только при наличии ответственных разработчиков и сильного руководства. Создать пул автономных групп и позволить им разбалтываться в отсутствие руководства – это кратчайший путь к катастрофе. Проекту необходимы как минимум два руководителя – один технический, другой административный. Технический руководитель определяет философию и стиль разработки, распределяет обязанности между группами и является арбитром в неизбежных «дискуссиях» между членами команды. Он также осуществляет контроль за ситуацией в целом, стараясь найти ненужную общность задач между группами, которая снижает ортогональность общих прилагаемых усилий. Административный руководитель, или руководитель проекта, намечает ресурсы, необходимые группам, контролирует ход выполнения работ, отчитывается о проделанной работе и помогает в определении приоритетов с точки зрения потребностей бизнеса. Административный руководитель может действовать и в роли полномочного представителя команды при общении с внешним миром.</p>
     <p>Команды, выполняющие большие проекты, нуждаются в дополнительных ресурсах: библиотекаре, который упорядочивает и хранит тексты программ и документацию, компоновщике инструментальных средств, обеспечивающем работоспособность обычных инструментальных средств и операционных сред, оперативную поддержку и т. д.</p>
     <p>Подобная организация команды напоминает старую концепцию "бригады главного программиста", впервые описанную в 1972 г. [Ваk72].</p>
    </section>
    <section>
     <title>
      <p>Автоматизация</p>
     </title>
     <p>Автоматизация является отличным способом обеспечить полноту и точность всего, что делает команда. Зачем компоновать текст программы вручную, если ваш редактор может делать это автоматически, пока вы набираете текст? Зачем заполнять формуляры тестирования, если процедура сборки может осуществлять тестирование автоматически?</p>
     <p>Автоматизация является существенным компонентом любой проектной команды – настолько важным для нас, что мы посвятили ей следующий раздел, целиком. Чтобы убедиться в том, что процессы автоматизированы, назначьте одного или несколько членов группы компоновщиками инструментальных средств для конструирования и развертывания средств, автоматизирующих всю тяжелую работу. Они будут создавать файлы сборки, сценарии оболочек, шаблоны редактирования, вспомогательные программы и т. п.</p>
    </section>
    <section>
     <title>
      <p>Чувствуйте момент, когда нужно остановиться</p>
     </title>
     <p>Помните, что коллективы состоят из отдельных личностей. Дайте возможность каждому сотруднику проявить себя во всем блеске. Создайте структуру, достаточную для их поддержки и выполнения проекта в соответствии с требованиями. Но затем, подобно живописцу из раздела "Приемлемые программы", не поддавайтесь искушению добавить больше краски на холст.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Энтропия в программах</p>
     <p>• Суп из камней и сварившиеся лягушки</p>
     <p>• Приемлемые программы</p>
     <p>• Общайтесь!</p>
     <p>• Пороки дублирования</p>
     <p>• Ортогональность</p>
     <p>• Проектирование по контракту</p>
     <p>• Несвязанность и закон Деметера</p>
     <p>• Вездесущая автоматизация</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Оглянитесь вокруг в поисках успешных команд, работающих вне сферы разработки программного обеспечения. Каков фактор их успеха? Применяют ли они какой-либо из процессов, описанных в данном разделе?</p>
     <p>• В следующий раз, когда вы начнете работать над проектом, постарайтесь убедить коллег в том, что проекту необходим брэнд. Дайте вашей организации время, чтобы привыкнуть к этой мысли, и затем проведите быстрый аудит, чтобы увидеть, изменило ли наличие брэнда что-нибудь как внутри команды, так и в общении с внешним миром.</p>
     <p>• Командная алгебра: В школе мы решали задачи, наподобие этой: "Если четырем рабочим требуется 6 ч на то, чтобы выкопать канаву, то сколько времени потребуется на это восьми рабочим?" Какие факторы из реальной жизни повлияют на ответ задачи: "Если четырем программистам требуется 6 месяцев на разработку приложения, то сколько времени потребуется на это восьми программистам?" Назовите число сценариев, в которых время на разработку действительно сокращается.</p>
    </section>
   </section>
   <section>
    <title>
     <p>42</p>
     <p>Вездесущая автоматизация</p>
    </title>
    <epigraph>
     <p>Прогресс цивилизации состоит в расширении сферы действий, которые мы выполняем не думая.</p>
     <text-author>Альфред Норт Уайтхед</text-author>
    </epigraph>
    <section>
     <p>На заре автомобильной эры инструкция по запуску автомобиля «Форд-Т» составляла две с лишним страницы. В современных автомобилях достаточно лишь повернуть ключ – процедура запуска является автоматической и надежной. Водитель, действующий по инструкции, может «залить» свечи зажигания, а автоматический стартер подобного не допустит.</p>
     <p>Хотя информатика все еще напоминает автопромышленность времен выпуска модели «Форд-Т», мы не можем позволить себе в обычной работе раз за разом выполнять набор инструкций, расположенный на двух страницах. Неважно, что это – процедура сборки и выпуска готовой версии, рассмотрение текста программы или же любая повторяющаяся задача, возникающая в ходе проекта, – все это должно выполняться автоматически. Возможно, нам придется изготовить стартер и топливный инжектор "с нуля", но как только это будет сделано, с этого момента будет достаточно лишь повернуть ключ зажигания.</p>
     <p>Мы хотим также гарантировать полноту и повторяемость при работе над проектом. Выполняемые вручную процедуры не гарантируют полноту; повторяемость также не гарантируется, особенно если аспекты конкретной процедуры открыты для интерпретации другими людьми.</p>
    </section>
    <section>
     <title>
      <p>Все в автоматическом режиме</p>
     </title>
     <p>Однажды мы посетили фирму-заказчик, где все разработчики использовали одну и ту же интегрированную среду разработки. Их системный администратор снабжал каждого разработчика набором инструкций по установке добавочных средств для этой среды. Эти инструкции занимали много страниц – 'щелкни мышью здесь, прокрути туда, отбуксируй это, щелкни здесь мышью два раза, повтори".</p>
     <p>Не удивительно, что компьютер у каждого разработчика загружался по-своему. Когда разные разработчики прогоняли одну и ту же программу, в поведении приложения проявлялись малозаметные отличия. Дефекты возникали на одной машине, а на других все было нормально. При прослеживании разницы в версиях любого из компонентов обычно выявлялись неожиданные вещи.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 61: Не используйте процедуры, выполняемые вручную</p>
     </cite>
     <empty-line/>
     <p>В отличие от компьютеров, люди не обладают повторяемостью в своих действиях. Мы этого от них и не ждем. Сценарий оболочки или пакетный файл выполнят те же самые инструкции, в том же порядке, раз за разом. Он может отслеживаться системой управления исходным текстом, так что возможно изучать изменения в процедуре и по прошествии времени ("но ведь она всегда работала… ").</p>
     <p>Другим излюбленным средством автоматизации является cron (или «at» в системе Windows NT). Он позволяет планировать периодический прогон задач без участия пользователя – обычно этот прогон делается ночью. Например, представленный ниже файл crontab указывает, что команда nightly, используемая в проекте, должна запускаться каждый день в 00:05, что процедура резервного копирования backup должна запускаться в 03:15 по будням и что команда expense_eports должна выполняться в полночь первого числа каждого месяца.</p>
     <image l:href="#i_017.jpg"/>
     <p>С помощью cron можно планировать процедуры резервного копирования, сопровождение web-сайтов и любых других операций, которые нужно проводить без участия пользователя, т. е. автоматически.</p>
    </section>
    <section>
     <title>
      <p>Компилирование проекта</p>
     </title>
     <p>Компилирование проекта – это работа, которая должна быть надежной и повторяемой. Обычно проекты компилируются с помощью файлов сборки даже в интегрированной среде разработчика. В использовании файлов сборки есть ряд преимуществ. Это подготовленная по сценарию автоматическая процедура. Можно добавлять специальные программные процедуры для генерации текста программы и запускать регрессионные тесты в автоматическом режиме. Интегрированные среды имеют свои преимущества, но, пользуясь только ими, бывает трудно добиться нужного уровня автоматизации. Мы хотим осуществлять проверку, сборку, тестирование и передачу программы заказчику с помощью одной-единственной команды.</p>
     <subtitle>Генерирование текста программы</subtitle>
     <p>В разделе "Пороки дублирования" мы призываем к генерированию текстов программ для получения знания из обычных источников. Для облегчения этого процесса мы можем задействовать механизм анализа зависимости в программе make. Добавление правил в файл сборки для автоматической генерации файла из некоего другого источника не представляет особой сложности. Предположим, что есть некий файл XML, из которого необходимо сгенерировать файл Java, а результат скомпилировать.</p>
     <p>.SUFFIXES: .Java .class .xml</p>
     <p>.xml.java:</p>
     <p>    perl convert.pl $&lt;&gt;$@</p>
     <p>.java.class:</p>
     <p>   $(JAVAC) $(JAVAC_FLAGS) $&lt;</p>
     <p>Наберем make test.class, и программа make автоматически найдет файл с именем test.XML, сформирует файл. Java, выполнив сценарий Perl, а затем скомпилирует этот файл, создав test.class.</p>
     <p>Можно использовать подобные правила также для автоматической генерации исходного текста, файлов заголовка или документации из иной формы (см. "Генераторы исходных текстов").</p>
     <subtitle>Регрессионные тесты</subtitle>
     <p>Можно воспользоваться файлом сборки для прогона либо регрессионных тестов, либо отдельного модуля, либо подсистемы в целом. Вы легко можете протестировать весь проект целиком при помощи одной-единственной команды на вершине исходного дерева или же протестировать отдельный модуль, воспользовавшись той же командой в единственном каталоге. Более подробно регрессионное тестирование рассматривается в разделе "Безжалостное тестирование".</p>
     <subtitle>Рекурсивная сборка</subtitle>
     <p>Многие проекты устанавливают специальные рекурсивные иерархические файлы для сборки проектов и тестирования. Но не забывайте о некоторых потенциальных проблемах.</p>
     <p>Программа make вычисляет зависимости между различными объектами, которые она должна собрать. Но она может проанализировать только зависимости, существующие в пределах одного-единственного обращения к программе make. В частности, рекурсивная программа make не обладает информацией о зависимостях, которые имеются у других обращений к программе make. Если вы будете осторожны и точны в своих действиях, то вы получите надлежащие результаты, но при этом можно проделать много лишней работы или проглядеть зависимость и не перекомпилировать ее, когда это необходимо.</p>
     <p>Кроме того, зависимости сборки могут отличаться от зависимостей тестирования и вам могут понадобиться дополнительные иерархии.</p>
    </section>
    <section>
     <title>
      <p>Автоматизация процесса сборки</p>
     </title>
     <p>Сборка представляет собой процедуру, которая использует пустой каталог (и известную среду компиляции) и формирует проект с нуля, создавая то, что вы хотели бы видеть в качестве конечного результата, отправляемого заказчику, например, эталонный лазерный диск или самораспаковывающийся архив. Обычно сборка проекта включает следующие этапы:</p>
     <p>1. Исходный текст программы извлекается из архива.</p>
     <p>2. Проект формируется с нуля, обычно из файла сборки верхнего уровня. Каждая сборка помечается определенным номером выпуска/версии или отметкой даты.</p>
     <p id="_ednref46">3. Создается копия для распространения. Эта процедура может повлечь за собой фиксирование права собственности на файл и разрешения на его использование, создание всех примеров, документации, файлов README и всего того, что будет отправлено вместе с готовым продуктом именно в том формате, который требуется при передаче заказчику <a l:href="#n_46">[46]</a>.</p>
     <p>4. Проведите указанные тесты (процедура make test).</p>
     <p>Для большинства проектов этот этап сборки осуществляется автоматически каждую ночь. «Ночная» сборка обычно выполняет больше полных тестов, чем отдельный сотрудник при сборке определенной части проекта. Важным моментом является то, что при полной сборке должны запускаться все тесты, имеющиеся в наличии. Вы хотите убедиться в том, что программа не прошла регрессионный тест вследствие изменений, которые были сделаны в программе сегодня. Идентифицируя проблему ближе к источнику, вы с большей вероятностью сможете отыскать и устранить существующую проблему.</p>
     <p>Если вы не проводите регулярное тестирование, то можете обнаружить, что приложение не работает вследствие изменения, внесенного три месяца назад. Удачи вам – в поиске этого изменения.</p>
     <subtitle>Окончательные сборки</subtitle>
     <p>Окончательные сборки, которые вы намереваетесь отправить заказчику в виде готовых продуктов, могут предъявлять требования, отличающиеся от регулярной «ночной» сборки. Окончательная сборка может требовать, чтобы библиотека исходных файлов была заблокирована или снабжена номером выпуска, чтобы флаги оптимизации и отладки были установлены по-другому и т. д. Мы предпочитаем использовать отдельный рабочий файл make (типа make final), который устанавливает все эти параметры сразу.</p>
     <p>Помните, что если компиляция продукта отличается от компиляции предыдущей версии, то вы обязаны провести тестирование согласно этой версии заново.</p>
    </section>
    <section>
     <title>
      <p>Автоматические административные процедуры</p>
     </title>
     <p>Наверное, было бы недурно, если бы программисты могли реально посвящать все свое время программированию. К сожалению, это бывает очень редко. Нужно отвечать на сообщения электронной почты, выполнять бумажную работу, помещать документы в Интернет и т. д. Вы можете решиться на создание сценария оболочки, который будет делать всю грязную работу, но не забывайте запускать этот сценарий, когда необходимо.</p>
     <p id="_ednref47">Поскольку память – это вторая по счету вещь, которую мы теряем с возрастом <a l:href="#n_47">[47]</a>, мы не хотим полагаться на нее слишком сильно. Мы можем запускать сценарии, которые будут выполнять для нас процедуры в автоматическом режиме, основываясь на содержимом исходного текста программы и документов. Наша цель состоит в том, чтобы поддерживать автоматическую, не требующую вмешательства пользователя последовательность операций содержательного характера.</p>
     <subtitle>Генерирование web-сайта</subtitle>
     <p>Многие команды разработчиков используют внутренний web-сайт для обмена информацией в ходе выполнения проекта, и мы полагаем, что это прекрасная идея. Но мы не хотим тратить много времени на поддержку web-сайта и не желаем, чтобы информация, содержащаяся на нем, устаревала. Информация, вводящая в заблуждение, хуже, чем отсутствие какой бы то ни было информации вообще.</p>
     <p>Документация, извлекаемая из программы, анализа требований, проектных документов и любых чертежей, графиков или диаграмм, должна регулярно публиковаться на web-сайте. Мы предпочитаем публиковать эти документы автоматически – это является частью ночной процедуры сборки или добавочным блоком в процедуре возвращения исходного текста программы в библиотеку.</p>
     <p>Однако если это сделано, содержание web-сайта должно генерироваться автоматически из информации, хранящейся в централизованной библиотеке, и публиковаться без вмешательства человека. На самом деле это еще одно применение принципа DRY: информация существует в одной форме – в виде исходного текста и документов в библиотеке. При просмотре с помощью web-браузера они так и выглядят – просто визуальное представление. Вам не придется поддерживать это представление вручную.</p>
     <p>Любая информация, сгенерированная в процессе ночной сборки, должна быть доступна на web-сайте разработчиков: результаты самой сборки (они могут быть представлены в виде краткого отчета на одной странице, содержащего предупреждения компилятора, ошибки и текущее состояние), регрессионные тесты, рабочая статистика, программные метрики, а также любые другие результаты статического анализа и т. д.</p>
     <subtitle>Административные процедуры утверждения</subtitle>
     <p>Некоторые проекты участвуют в административном документообороте, требования которого необходимо соблюдать. Например, рассмотрение проекта или текста программы должно быть спланировано и доведено до конца, документы необходимо утверждать и т. д. Можно использовать автоматизацию и – особенно это касается web-сайта – облегчить бремя, налагаемое бумажной работой.</p>
     <p>Предположим, что вы хотели автоматизировать планирование рассмотрения и процедуру утверждения текста программы. В каждый файл с исходным текстом вы могли бы поместить специальный маркер:</p>
     <p>/* Status: needs_review */</p>
     <p>Простой сценарий должен пройти весь исходный текст до конца и провести поиск всех файлов, находившихся в состоянии needs_review, которое указывало на их готовность к рассмотрению. Затем вы могли бы поместить список этих файлов в виде web-страницы, автоматически послать электронную почту соответствующим адресатам или даже назначить встречу, используя программу календарного планирования.</p>
     <p>Вы можете организовать некую форму на web-странице, чтобы рецензенты регистрировали свое утверждение или несогласие. После рассмотрения состояние может быть автоматически изменено на reviewed. Использовать или не использовать сквозной контроль текста программы всеми участниками – это зависит от вас; всю бумажную работу вы можете проделывать автоматически независимо от этого. (В своей статье в журнале САСМ (апрель 1999 г.) Роберт Гласе обобщает результаты исследования, которое, похоже, указывает на то, что критическое рассмотрение текста программы отличается эффективностью, в отличие от рассмотрения в ходе собраний [Gla99a].)</p>
    </section>
    <section>
     <title>
      <p>Дети сапожника</p>
     </title>
     <p>Дети сапожника всегда без сапог. Зачастую те, кто занимается разработкой программ, используют наихудшие инструментальные средства для выполнения своей работы.</p>
     <p>Но у нас имеются все исходные материалы для того, чтобы создать лучшие инструменты. У нас есть программа cron. У нас есть программа make для платформ Windows и Unix. У нас есть и Perl, а также другие языки сценариев высокого уровня для быстрой разработки заказных инструментальных средств, генераторов web-страниц, исходных тестов программ, тестовых стендов и т. д.</p>
     <p>Пусть компьютер делает скучную земную работу – он сделает это лучше, чем мы. У нас есть задачи поважнее и потруднее.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Мой исходный текст съел кот Мурзик</p>
     <p>• Пороки дублирования</p>
     <p>• Сила простого текста</p>
     <p>• Игры с оболочками</p>
     <p>• Отладка</p>
     <p>• Генераторы исходных текстов</p>
     <p>• Команды прагматиков</p>
     <p>• Безжалостное тестирование</p>
     <p>• Все эти сочинения</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Посмотрите на свои ежедневные действия. Есть ли у вас повторяющиеся задачи? Набираете ли вы одну и туже последовательность команд раз за разом? Попробуйте написать несколько сценариев оболочки для автоматизации процесса. Всегда ли вы щелкаете мышью по определенной последовательности пиктограмм, повторяя эту операцию снова и снова? Можете ли вы создать макрокоманду, которая будет это делать за вас?</p>
     <p id="_ednref48">• Какая часть вашей бумажной работы, связанной с проектом, может быть автоматизирована? Учитывая большие расходы на содержание штата программистов <a l:href="#n_48">[48]</a>, определите, какая часть проектного бюджета тратится впустую на административные процедуры. Можете ли вы обосновать временные затраты на создание автоматизированного решения, основываясь на общей экономии затрат, которая достигается при его внедрении?</p>
    </section>
   </section>
   <section>
    <title>
     <p>43</p>
     <p>Безжалостное тестирование</p>
    </title>
    <section>
     <p>Большинство разработчиков ненавидят тестирование. Они стремятся тестировать осторожно, подсознательно ощущая, в каком месте программа может сбоить, и избегая слабых мест. Но прагматики ведут себя по-другому. Мы обладаем мотивацией к отысканию дефектов именно сейчас, чтобы нам не пришлось испытывать позор, когда кто-то другой найдет наши ошибки позже.</p>
     <p>Поиск дефектов можно уподобить ловле рыбы с помощью сети. Мы используем мелкие, небольшие сети (модульные тесты) для ловли пескарей и большие, крупные сети (комплексные тесты) для ловли акул-убийц. Иногда рыбе удается выскользнуть, поэтому мы заделываем все найденные дыры в надежде поймать как можно больше скользких дефектов, плавающих в бассейне нашего проекта.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 62: Тестируйте раньше. Тестируйте часто. Тестируйте автоматически</p>
     </cite>
     <empty-line/>
     <p>Как только у нас появляется текст программы, мы сразу хотим начать его тестирование. Крошечные пескарики имеют отвратительную привычку быстро становиться огромными акулами-людоедами, а поймать акулу намного сложнее. Но мы не хотим осуществлять все это тестирование вручную.</p>
     <p>Многие команды разрабатывают сложные планы тестирования своих проектов. Иногда они даже их используют. Но мы обнаружили, что команды, использующие автоматизированные процедуры тестирования, имеют больше шансов на успех. Тесты, запускающиеся в ходе каждого процесса сборки, являются более эффективными по сравнению с планами тестирования, которые лежат на полке.</p>
     <p id="_ednref49">Чем раньше обнаружен дефект, тем дешевле обходится его устранение. "Чуть-чуть напишешь, чуть-чуть проверишь" – популярное изречение в мире Smalltalk <a l:href="#n_49">[49]</a>, и мы можем принять эту мантру как нашу личную, создавая одновременно (или даже раньше) с написанием рабочей программы программу ее тестирования.</p>
     <p>На самом деле удачный проект содержит больше программ тестирования, чем рабочих программ. Временные затраты на написание тестовой программы себя оправдывают. В конечном счете это оказывается намного дешевле, и вы действительно имеете возможность создания практически бездефектного продукта.</p>
     <p>Кроме того, осознание, что вы прошли тест, дает вам большую степень уверенности в том, что этот фрагмент программы "готов".</p>
     <empty-line/>
     <cite>
      <p>Подсказка 63: Программа не считается написанной, пока не пройдет тестирование</p>
     </cite>
     <empty-line/>
     <p>Тот факт, что вы закончили работу с фрагментом программы, вовсе не означает, что можно идти к шефу или заказчику, чтобы сообщить ему о «готовности». Фрагмент не готов. Прежде всего, программа в реальности никогда не бывает готовой. И, что более важно, пока она не пройдет все имеющиеся тесты, вы не можете утверждать, что она может использоваться кем бы то ни было.</p>
     <p>Необходимо рассмотреть три основных аспекта тестирования в масштабе всего проекта: что тестировать, как тестировать и когда тестировать.</p>
    </section>
    <section>
     <title>
      <p>Что тестировать</p>
     </title>
     <p>Существует несколько видов процедур тестирования программного обеспечения, которые вам приходится выполнять:</p>
     <p>• Модульное тестирование</p>
     <p>• Комплексное тестирование</p>
     <p>• Подтверждение правильности и верификация</p>
     <p>• Тестирование в условиях нехватки ресурсов, ошибки и их исправление</p>
     <p>• Тестирование производительности</p>
     <p>• Тестирование удобства использования</p>
     <p>Этот перечень ни в коей мере не является полным, и в некоторых специализированных проектах потребуются другие виды процедур тестирования. Но это дает нам хорошую отправную точку.</p>
     <subtitle>Модульное тестирование</subtitle>
     <p>Модульный тест представляет собой программу, занимающуюся тестированием некоего модуля. Эта тема освещена в разделе "Программа, которую легко тестировать". Модульное тестирование является основой для всех других видов тестирования, которые обсуждаются в данном разделе. Если части не работают по отдельности, то скорее всего они не будут хорошо работать и вместе. Все используемые модули обязаны пройти собственное модульное тестирование перед тем как продолжать работу.</p>
     <p>Как только все соответствующие модули прошли индивидуальное тестирование, вы готовы к новому этапу. Вам придется проверить, как модули используют друг друга и взаимодействуют между собой по всей системе.</p>
     <subtitle>Комплексное тестирование</subtitle>
     <p>Комплексное тестирование показывает, что основные подсистемы, из которых состоит проект, работают и нормально взаимодействуют друг с другом. При наличии удачных и хорошо проверенных контрактов обнаружить любые проблемы интеграции не составляет особого труда. В противном случае интеграция становится благодатной почвой для размножения дефектов. Фактически в многих случаях она является единственным и самым крупным источником дефектов в системе.</p>
     <p>В реальности комплексное тестирование является продолжением модульного тестирования, описанного выше, с той лишь разницей, что теперь вы проверяете, как целые подсистемы соблюдают свои контракты.</p>
     <subtitle>Подтверждение правильности и верификация</subtitle>
     <p>Как только в вашем распоряжении появляется рабочий пользовательский интерфейс или прототип, вам приходится отвечать на существенный вопрос: пользователи сказали вам, что они хотели бы увидеть, но то ли это на самом деле?</p>
     <p>Отвечает ли продукт функциональным требованиям системы? Это также нуждается в тестировании. Бездефектная система, которая отвечает на неправильные вопросы, не приносит пользы. Необходимо осознавать схемы доступа конечного пользователя и их отличие от тестовых данных разработчика (в качестве примера обратите внимание на историю о рисовании кистью из раздела "Отладка")</p>
     <subtitle>Тестирование в условиях нехватки ресурсов, ошибки и их исправление.</subtitle>
     <p>Теперь вы понимаете, что система будет вести себя корректно в идеальных условиях, вам придется испытать, как она ведет себя в реальных условиях. В реальном мире ресурсы ваших программ не безграничны – они исчерпываются. Ваша программа может столкнуться со следующими ограничениями:</p>
     <p>• Объем памяти</p>
     <p>• Объем дискового пространства</p>
     <p>• Мощность процессора</p>
     <p>• Тактовая частота</p>
     <p>• Скорость дискового обмена</p>
     <p>• Пропускная способность сети</p>
     <p>• Цветовая палитра</p>
     <p>• Разрешающая способность экрана</p>
     <p>Вы можете реально проверить нехватку дискового пространства или объема памяти, но как часто вы проверяете другие ограничения? Будет ли ваше приложение работать на экране с разрешением 640*480 и 256 цветами? Может ли оно выполняться на экране с разрешением 1600*1280 с 24-битным цветом и при этом не быть размером с почтовую марку? Завершится ли пакетное задание до момента запуска программы архивации?</p>
     <p>Вы можете обнаружить наличие ограничений в операционной среде, таких как спецификация видеоподсистемы, и приспособиться к ним соответствующим образом. Однако не все сбои можно восстановить. Если программа обнаруживает нехватку памяти, то вы ограничены в своих действиях: вам не хватит ресурсов, чтобы завершить программу способом, отличным от аварийного завершения.</p>
     <p id="_ednref50">Когда система выходит из строя <a l:href="#n_50">[50]</a>, будет ли это делаться изящно? Постарается ли она сделать лучшее, на что она способна в данной ситуации, – сохранить свое состояние и предотвратить потерю данных? Или она выдаст пользователю сообщения типа "Общая ошибка защиты" или "core dump" (отключение ядра системы)?</p>
     <subtitle>Тестирование производительности</subtitle>
     <p>Тестирование производительности, нагрузочное тестирование или тестирование в реальных условиях эксплуатации может также оказаться важным аспектом проекта.</p>
     <p>Задайте себе вопрос, отвечает ли программа требованиям производительности в условиях реального мира – с ожидаемым числом пользователей, подключений или транзакций в единицу времени. Является ли она масштабируемой?</p>
     <p>При работе с некоторыми приложениями вам могут понадобиться специализированные тестовая аппаратура или программное обеспечение для реалистичной имитации нагрузок.</p>
     <subtitle>Тестирование удобства использования</subtitle>
     <p>Тестирование удобства использования отличается от процедур тестирования, обсужденных выше. Оно осуществляется с реальными пользователями в реальных условиях окружающей среды.</p>
     <p>Рассмотрим удобство использования с точки зрения человеческого фактора. Имелись ли какие-либо недоразумения в ходе анализа требований, на которые необходимо обратить внимание? Подходит ли программное обеспечение пользователю, становясь продолжением его рук? (Мы хотим, чтобы не только наши собственные инструменты были изготовлены по руке, но чтобы и те, которые мы создаем для пользователей, подходили им.)</p>
     <p>Как и при подтверждении правильности и верификации, вам приходится осуществлять тестирование удобства использования как можно раньше, пока есть время на внесение изменений. Для крупномасштабных проектов вы можете привлечь специалистов в области человеческого фактора.</p>
     <p>Несоответствие критериям удобства использования является дефектом такого же порядка, как деление на ноль.</p>
    </section>
    <section>
     <title>
      <p>Как проводить тестирование</p>
     </title>
     <p>Мы рассмотрели то, что подлежит тестированию. Теперь мы обратим внимание на то, как это делается, включая следующее:</p>
     <p>• Регрессионное тестирование</p>
     <p>• Тестовые данные</p>
     <p>• Тестирование систем с графическим интерфейсом</p>
     <p>• Тестирование самих тестов</p>
     <p>• Исчерпывающее тестирование</p>
     <subtitle>Тестирование проектных решений/методологии</subtitle>
     <p>Можете ли вы провести тестирование проектных решений в самой программе и методологии, которую вы использовали при сборке программного обеспечения? Некоторым образом можете. Вы делаете это, анализируя метрики – измерения различных аспектов программы. Самой простой метрикой (и чаще всего, наименее интересной) является число строк кода – насколько велика сама программа?</p>
     <p>Существует большое количество других метрик, которые вы можете использовать для исследования программы:</p>
     <p>• Показатель цикломатической сложности Маккейба (измеряет сложность структуры решений)</p>
     <p>• Коэффициент разветвления по входу при наследовании (количество базовых классов) и по выходу (количество производных модулей; используется в качестве родителя)</p>
     <p>• Набор откликов (см. раздел "Несвязанность и закон Деметера")</p>
     <p>• Отношения связывания класса (см. [URL 48])</p>
     <p>Некоторые метрики предназначены для того, чтобы дать вам "проходной балл", тогда как другие полезны только в сравнении. Это означает, что вы вычисляете метрики для каждого модуля в системе и смотрите, как конкретный модуль относится к своим братьям. Здесь обычно используются стандартные статистические методики.</p>
     <p>Если вы обнаруживаете модуль, чья метрика значительно отличается от всех остальных, вам необходимо задать вопрос, приемлемо ли это. Для некоторых модулей "нарушение хода кривой" может быть вполне нормально. Но для тех, у которых нет хорошего оправдания, это может свидетельствовать о потенциальных проблемах.</p>
     <subtitle>Регрессионное тестирование</subtitle>
     <p>Регрессионное тестирование сравнивает выходные данные текущего теста с результатами (или известными значениями) предыдущих. Мы можем гарантировать, что дефекты, устраненные сегодня, не нарушат ничего из того, над чем мы работали вчера. Это важное средство страховки, и оно сокращает число неприятных сюрпризов.</p>
     <p>Все тесты, о которых мы говорили до настоящего момента, могут запускаться как регрессионные тесты с гарантией, что мы не откатываемся назад, когда разрабатываем новую программу. Мы можем запускать регрессии для тестирования производительности, контрактов, достоверности и т. д.</p>
     <subtitle>Тестовые данные</subtitle>
     <p>Где мы достаем данные для запуска всех этих тестов? Существует только два типа данных: реальные и синтезированные данные. В действительности нам необходимо использовать оба типа, поскольку их различная природа будет способствовать выявлению разных дефектов в программном обеспечении.</p>
     <p>Реальные данные исходят из некоего реального источника. Возможно, они были получены из существующей системы, конкурирующей системы или некоего прототипа. Они представляют типичные пользовательские данные. Большие сюрпризы возникают, как только вы открываете значение термина «типичный». При этом скорее всего являются дефекты и недоразумения в анализе требований.</p>
     <p>Синтезированные данные генерируются искусственно, возможно, с определенными статистическими ограничениями. Вам могут понадобиться синтезированные данные по одной из следующих причин:</p>
     <p>• Вам необходимо много данных, возможно, больше, чем содержится в любом из имеющихся образцов. Вы сможете использовать реальные данные в качестве «саженца» душ генерации большего набора данных и добиться уникальности определенных полей.</p>
     <p>• Вам необходимы данные для того, чтобы выделить определенные граничные условия. Эти данные могут быть полностью синтезированными: поля, содержащие дату 29 февраля 1999 г., огромные размеры записей или адреса с иностранными почтовыми индексами.</p>
     <p>• Вам необходимы данные, которые демонстрируют определенные статистические свойства. Вы хотите увидеть, что случается, если сбой происходит с каждой третьей транзакцией? Вспомните алгоритм сортировки, который замедляется и ползет, когда обрабатывает предварительно отсортированные данные. Чтобы продемонстрировать эту слабость, вы можете представить данные в случайном или упорядоченном виде.</p>
     <subtitle>Тестирование систем с графическим интерфейсом</subtitle>
     <p>Тестирование систем, насыщенных графическими интерфейсами, часто требует наличия специализированных инструментальных средств. Эти средства могут основываться на простой модели захвата/воспроизведения данных или могут потребовать специально для этой цели написанных сценариев для управления графическим интерфейсом. Некоторые системы объединяют элементы обеих моделей.</p>
     <p>Менее сложные инструментальные средства предписывают высокую степень связывания тестируемой версии программы и самого тестового сценария: если вы перемещаете диалоговое окно или уменьшаете размер экранной кнопки, процедура тестирования может не найти всего этого и оказаться неудачной. Большинство современных инструментальных средств тестирования графических интерфейсов используют ряд методик, чтобы обойти эту проблему и попытаться приспособиться к незначительным различиям в компоновке.</p>
     <p>Однако вы не можете автоматизировать все. Энди работал над графической системой, которая позволяла пользователю создавать и отображать недетерминированные визуальные эффекты, моделирующие различные природные явления. К сожалению, в ходе тестирования нельзя просто захватить растровое изображение и сравнить с предыдущим прогоном, потому что приложение было спроектировано так, что каждый раз оно выполнялось по-разному. В подобных ситуациях у вас может не быть выбора, кроме как положиться на ручную интерпретацию результатов теста.</p>
     <p>Одним из преимуществ, возникающих при написании несвязанной программы (см. "Несвязанность и закон Деметера") является большая доля модульного тестирования. Например, для приложений, занимающихся обработкой данных, которые имеют внешний графический интерфейс, конструкция должна быть несвязанной в достаточной степени, чтобы можно было тестировать логику приложения в отсутствии графического интерфейса. Эта идея аналогична необходимости тестировать компоненты в числе первых. Как только достоверность логики приложения подтверждается, задача по поиску дефектов, которые выявляются при наличии пользовательского интерфейса, не представляет труда (скорее всего, эти дефекты были созданы программой интерфейса пользователя).</p>
     <subtitle>Тестирование самих тестов</subtitle>
     <p>Поскольку мы не можем писать совершенные программы, то из этого следует, что мы не можем написать и совершенные программы для тестирования. Нам необходимо тестировать сами тесты.</p>
     <p>Рассматривайте набор тестовых пакетов как сложную систему безопасности, предназначенную для подачи звукового сигнала тревоги при выявлении дефекта. Ведь нет лучшего способа проверки безопасности системы, как попытаться вломиться в нее?</p>
     <p>После того как вы написали тест для обнаружения конкретного дефекта, вызовите этот дефект преднамеренно и удостоверьтесь, что тест его обнаружил. Это гарантия того, что тест обязательно выловит этот дефект в реальных условиях.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 64: Используйте диверсантов для тестирования самих тестов</p>
     </cite>
     <empty-line/>
     <p>Если вы серьезно относитесь к тестированию, то вы должны нанять диверсанта проекта, чья роль состоит в том, чтобы воспользоваться отдельной копией исходного дерева, преднамеренно внести дефекты и проверить, что при тестировании они будут выловлены.</p>
     <p>При написании тестов убедитесь, что сигналы тревоги раздаются тогда, когда они обязаны раздаваться.</p>
     <subtitle>Исчерпывающее тестирование</subtitle>
     <p>Вы уверены в том, что ваши тесты являются корректными и обнаруживают созданные вами дефекты. Но как вы узнаете о том, насколько исчерпывающе вы провели тестирование ядра программы?</p>
     <p>Ответ здесь краток: «никак», вы никогда это не узнаете. Но на программном рынке есть продукты, которые могут вам помочь. Эти средства анализа степени покрытия отслеживают программу при тестировании и регистрируют, какие строки были выполнены, а какие нет. Эти средства дают общее представление о том, насколько исчерпывающей является процедура тестирования, но не стоит ожидать, что степень покрытия составит 100 %.</p>
     <p>Даже если выполненными окажутся все строки программы, это еще не все. Важно то число состояний, в которых может находиться программа. Состояния не являются эквивалентом строк программы. Предположим, что есть функция, обрабатывающая два целых числа, каждое из которых может принимать значения от 0 до 999.</p>
     <p>int test(int a, int b) {</p>
     <p>   return a / (a + b)</p>
     <p>}</p>
     <p>Теоретически эта функция, состоящая из трех строк, имеет 1000000 логических состояний, 999999 из которых будут работать правильно, а одно – неправильно (когда а + b равно нулю). Если вам известно лишь то, что данная строка программы выполнена, то вам придется идентифицировать все возможные состояния программы. К сожалению, это очень сложная проблема. Настолько сложная, что "пока вы ее решите, солнце превратится в холодную глыбу".</p>
     <empty-line/>
     <cite>
      <p>Подсказка 65: Тестируйте степень покрытия состояний, а не строк текста программы</p>
     </cite>
     <empty-line/>
     <p>Даже при высокой степени покрытия программы данные, используемые вами в процедуре тестирования, все еще оказывают огромное влияние, и, что более важно, порядок, в котором вы выполняете программу, может оказать самое сильное воздействие.</p>
    </section>
    <section>
     <title>
      <p>Когда тестировать</p>
     </title>
     <p id="_ednref51">Многие проекты стремятся отложить процедуру тестирование на последний момент – тот, где оно будет срезано в преддверии контрольного срока <a l:href="#n_51">[51]</a>. Нужно начать тестирование намного раньше наступления этого срока. Как только появится какая-либо рабочая программа, ее необходимо протестировать.</p>
     <p>Большинство процедур тестирования должно выполняться автоматически. Важно заметить, что под термином «автоматически» мы имеем в виду и автоматическую интерпретацию результатов теста. Более подробно этот аспект рассматривается в разделе "Вездесущая автоматизация".</p>
     <p>Мы предпочитаем проводить тестирование как можно чаще и всегда делаем это перед возвращением исходного текста в библиотеку. Некоторые системы управления исходным текстом, наподобие Aegis, могут осуществлять это автоматически. В других случаях мы просто набираем</p>
     <p>% make test</p>
     <p>Обычно не представляет труда запускать регрессии на всех отдельных модульных и комплексных тестах и проделывать это так часто, как это необходимо.</p>
     <p>Но для ряда тестов частый прогон может представлять сложность. Для проведения нагрузочного тестирования могут потребоваться специальные настройки или оборудование и некоторая часть ручной работы. Эти тесты могут проводиться с меньшей частотой – возможно, еженедельно или ежемесячно. Но важно то, что они прогоняются на регулярной, запланированной основе. Если это нельзя сделать автоматически, то удостоверьтесь, что тесты включены в план вместе со всеми ресурсами, назначенными для данной задачи.</p>
    </section>
    <section>
     <title>
      <p>Кольцо сжимается</p>
     </title>
     <p>И наконец, мы хотели бы раскрыть единственный и самый важный принцип тестирования. Он очевиден, и практически в каждом учебнике говорится о том, что это нужно делать именно так. Но в силу некоторых причин в большинстве проектов этого все еще не делается.</p>
     <p>Если дефект проскальзывает через сеть существующих тестов, вам необходимо добавить новый тест, чтобы поймать его в следующий раз.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 66: Дефект должен обнаруживаться единожды</p>
     </cite>
     <empty-line/>
     <p>Если тестировщик обнаруживает дефект, это должно быть в первый и последний раз – обнаружение дефекта человеком. Автоматизированные тесты должны быть модифицированы для проверки наличия этого дефекта, начиная с момента его первоначального обнаружения, всякий раз, без каких-либо исключений, не обращая внимания на степень тривиальности, жалобы разработчика и его фразу "Этого больше не случится".</p>
     <p>Потому что это снова случится. А у нас просто нет времени гоняться за дефектами, которые автоматизированные тесты не могли обнаружить. И нам придется тратить время на написание новой программы – с новыми дефектами.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Мой исходный текст съел кот Мурзик</p>
     <p>• Отладка</p>
     <p>• Несвязанность и закон Деметера</p>
     <p>• Реорганизация</p>
     <p>• Программа, которую легко тестировать</p>
     <p>• Вездесущая автоматизация</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Можете ли вы осуществить автоматическое тестирование вашего проекта? Многие команды вынуждены дать отрицательный ответ. Почему? Слишком сложно определить приемлемые результаты? Не приведет ли к затруднениям попытка доказать спонсорам, что проект "сделан"?</p>
     <p>Сложно ли проверить логику приложения независимо от графического интерфейса? Что можно сказать о графическом интерфейсе? О связывании?</p>
    </section>
   </section>
   <section>
    <title>
     <p>44</p>
     <p>Все эти сочинения</p>
    </title>
    <epigraph>
     <p>Лучше выцветшие чернила, чем отличная память.</p>
     <text-author>Китайская пословица</text-author>
    </epigraph>
    <section>
     <p>Как правило, разработчики не размышляют над документацией слишком долго. В лучшем случае она является для них досадной необходимостью; в худшем случае она считается задачей с низким приоритетом в надежде на то, что руководство забудет о ней в конце работы над проектом.</p>
     <p>Прагматики воспринимают документацию как неотъемлемую часть общего процесса разработки. Написание документации может быть облегчено, если вы не дублируете усилия, не теряете времени попусту и держите документацию под рукой, а если это возможно, – то в самой программе.</p>
     <p>Эти мысли не отличаются оригинальностью и новизной; идея о брачном союзе программы и документации к ней появляется уже в работе Доналда Кнута о грамотном программировании и в утилите JavaDoc фирмы Sun. Мы хотим уменьшить противоречие между программой и документацией и вместо этого считать их двумя визуальными представлениями одной и той же модели (см. "Всего лишь визуальное представление"). На самом деле мы хотим пойти немножко дальше и применить все наши прагматические принципы к документации так, как мы применяем их к программам.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 67: Считайте естественный язык одним из языков программирования</p>
     </cite>
     <empty-line/>
     <p>Существует два основных вида документации, которая готовится для проекта: внутренняя и внешняя. Внутренняя документация включает комментарии исходных текстов, документы, касающиеся проектирования и тестирования, и т. д. Внешняя документация – это то, что отправляется заказчику или публикуется для внешнего мира, например, руководство пользователя. Но вне зависимости от целевой аудитории или роли автора (разработчик он или технический писатель), вся документация является отражением программы. При наличии несоответствий программа – это то, что имеет значение.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 68: Встраивайте документацию в проект, а не накручивайте ее сверху</p>
     </cite>
     <empty-line/>
     <p>Начнем с внутренней документации.</p>
    </section>
    <section>
     <title>
      <p>Комментарии в программе</p>
     </title>
     <p>Создать форматированные документы из комментариев и объявлений в исходном тексте довольно просто, но вначале нужно убедиться, в тексте программы действительно есть комментарии. Программа должна иметь комментарии, но слишком большое их количество может быть так же плохо, как и малое.</p>
     <p>В общем, комментарии должны обсуждать, почему выполняется та или иная операция, ее задачу и ее цель. Программа всегда демонстрирует, как это делается, поэтому комментирование – избыточная информация и нарушение принципа DRY.</p>
     <p>Создание комментариев в тексте исходной программы дает отличную возможность документировать неуловимые фрагменты проекта, которые не могут документироваться где-либо еще: технические компромиссы, почему было принято то или иное решение, какие альтернативные варианты были отвергнуты и т. д.</p>
     <p>Мы предпочитаем увидеть простой комментарий в заголовке (на уровне модуля), комментарии к существенным данным и объявлениям типов и краткие заголовки для каждого из классов и методов, описывающие, как используется именно эта функция и все ее неочевидные действия.</p>
     <p>Имена переменных должны выбираться четко и со смыслом. Например, имя foo, не имеет смысла, так же как doit или manager, или stuff. «Венгерский» стиль именования (в котором вы кодируете информацию о типе переменной в самом ее имени) крайне нежелателен в объектно-ориентированных системах. Не забывайте, что вы (и те, кто идет за вами) будут читать текст программы много сотен раз, но писать ее будут лишь несколько раз. Не торопитесь, и напишите connectionPool вместо ср.</p>
     <p>Имена, вводящие в заблуждение, еще хуже, чем бессмысленные. Приходилось ли вам слышать, как кто-нибудь объясняет несоответствия в унаследованном тексте программы типа: "Подпрограмма с именем getData на самом деле записывает данные на диск"? Человеческий мозг будет периодически все путать – это называется эффектом Струпа [Str35]. Вы можете поставить на себе следующий эксперимент, чтобы увидеть эффект подобных помех. Возьмите несколько цветных ручек и напишите ими названия цветов спектра. Но при этом название цвета должно быть написано только ручкой другого цвета. Вы может написать слово «синий» зеленым цветом, слово «коричневый» – красным и т. д. (В качестве альтернативы имеется набор цветов спектра, уже помещенный на наш web-сайт www.pragmaticprogrammer.com.) Как только вы написали названия цветов, постарайтесь как можно быстрее произнести вслух название цвета, которым написано каждое слово. В определенный момент вы собьетесь и станете читать названия цветов, а не сами цвета. Имена очень важны для восприятия, а имена, вводящие в заблуждение, вносят беспорядок в программу.</p>
     <p>Вы можете документировать параметры, но задайте себе вопрос, а нужно ли это делать во всех случаях. Уровень комментариев, предлагаемый средством JavaDoc, кажется весьма приемлемым:</p>
     <p>/**</p>
     <p>* Найти пиковое (наивысшее) значение в указанном интервале дат</p>
     <p>* @param aRange Range of dates to search for data.</p>
     <p>* @param aThreshold Minimum value to consider.</p>
     <p>* @return the value, or &lt;code&gt;null&lt;code&gt; if no value found</p>
     <p>* greater than or equal to the threshold.</p>
     <p>*/</p>
     <p>public Sample findPeak(Date Range aRange, double aThreshold);</p>
     <empty-line/>
     <p>Вот перечень того, чего не должно быть в комментариях к исходному тексту программы.</p>
     <p>• <strong>Перечень функций, экспортируемых программой в файл.</strong> Существуют программы, которые анализируют исходный текст. Воспользуйтесь ими, и этот перечень никогда не устареет.</p>
     <p id="_ednref52">• <strong>Хронология изменений.</strong> Для этого предназначены системы управления исходным текстом программы (см. "Управление исходным текстом"). Однако, будет полезно включить информацию о дате последнего изменения и сотруднике, который внес это изменение <a l:href="#n_52">[52]</a>.</p>
     <p>• <strong>Список файлов, используемых данным файлом.</strong> Это можно более точно определить при помощи автоматических инструментальных средств.</p>
     <p>• <strong>Имя файла.</strong> Если оно должно указываться в файле, не поддерживайте его вручную. Система RCS и ей подобные могут обновлять эту информацию автоматически. При перемещении и удалении файла вам не хочется вспоминать о необходимости редактирования заголовка.</p>
     <p>Одним из наиболее важных фрагментов информации, который обязан появиться в исходном файле, – это имя автора, не обязательно того, кто осуществлял последнюю редакцию, но имя владельца. Приложение обязательств и ответственности к исходному тексту программы творит чудеса, сохраняя людей честными (см. "Гордость и предубеждение").</p>
     <p>Проект также может потребовать наличия определенных ссылок на авторские права или других юридических стереотипов в каждом исходном файле. Сделайте так, чтобы программа редактирования вставляла эти элементы автоматически.</p>
     <p>При наличии обширных комментариев инструментальные средства, подобные JavaDoc [URL 7] и DOC++ [URL 21], могут извлекать и форматировать их для автоматического создания документации на уровне API. Это является одним из конкретных примеров более универсальной методики, которой мы пользуемся, – исполняемые документы.</p>
    </section>
    <section>
     <title>
      <p>Исполняемые документы</p>
     </title>
     <p>Предположим, что есть спецификация, которая перечисляет столбцы в таблице базы данных. Тогда мы получим отдельный набор команд SQL для создания реальной таблицы в базе данных и, по всей вероятности, некую структуру записи на языке программирования для хранения содержимого строки в таблице. Одна и та же информация повторяется три раза. Стоит изменить один из этих трех источников – и два других немедленно устареют. Это явное нарушение принципа DRY.</p>
     <p id="_ednref53">Для решения этой проблемы необходимо выбрать авторитетный источник информации. Это может быть спецификация, инструментальное средство для построения схем баз данных или некий третий источник. Выберем в качестве источника спецификацию. Теперь она является моделью нашего процесса. Нам необходим способ экспортирования информации, содержащейся в ней, в виде различных визуальных представлений, например, в виде схемы базы данных и записи на языке программирования высокого уровня <a l:href="#n_53">[53]</a>.</p>
     <p>Если документ хранится в виде простого текста вместе с командами описания документов (например, в виде HTML, LATeX. или troff), то в этом случае можно использовать такие инструментальные средства, как Perl, для извлечения схемы и ее автоматического переформатирования. Если документ хранится в двоичном формате текстового процессора, то ознакомьтесь с некоторыми вариантами действий, приведенных во врезке, данной ниже.</p>
     <p>Теперь документ – неотъемлемая часть разработки проекта. Единственным способом изменения схемы является изменение документа. Вы гарантируете, что спецификация, схема и программа находятся в согласии. Вы сводите к минимум работу, которую необходимо выполнить для внесения каждого изменения, и можете обновлять визуальные представления изменений автоматически.</p>
     <subtitle>Как быть, если мой документ не хранится в формате простого текста!</subtitle>
     <p>К сожалению, в настоящее время все больше проектной документации составляется с помощью текстовых процессоров, сохраняющих файл на диске в некоем определенном формате. Мы говорим "к сожалению", потому что это существенно ограничивает возможности автоматической обработки документа. Но у вас в запасе имеется еще два варианта:</p>
     <p>• <strong>Создавайте макрокоманды.</strong> Сейчас большинство многофункциональных текстовых процессоров содержит встроенные макроязыки. Затратив некоторое усилие, вы можете запрограммировать их таким образом, чтобы экспортировать отмеченные разделы документов в альтернативные формы, которые вам необходимы. Если программирование на таком уровне является для вас болезненной процедурой, вы всегда можете экспортировать соответствующий раздел в файл, имеющий стандартный формат простого текста, а затем воспользоваться инструментальным средством наподобие Perl для преобразования его в окончательную форму.</p>
     <p>• <strong>Сделайте документ подчиненным.</strong> Вместо того, чтобы использовать документ в качестве определяющего источника, возьмите другое представление. В примере с базой данных вы хотели бы использовать схему в качестве авторитетной информации. Тогда создайте средство, которое экспортирует эту информацию в ту форму, которую документ может импортировать. Однако при этом будьте внимательны. Вы должны быть уверены, что эта информация импортируется всякий раз, когда документ выводится на печать, а не единожды, при создании этого документа.</p>
     <empty-line/>
     <p>Аналогичным образом можно генерировать документацию на уровне API из исходного текста программы, пользуясь инструментальными средствами, такими как JavaDoc и DOC++. Моделью является исходный текст программы: компилироваться может одно визуальное представление модели; другие представления предназначены для вывода на печать или просмотра на web-странице. Наша цель – работа над моделью (неважно, является ли эта модель самой программой или же каким-либо иным документом), и мы должны добиться того, чтобы все эти представления обновлялись автоматически (см. "Вездесущая автоматизация").</p>
     <p>Внезапно документация оказывается не столь уж плохой.</p>
    </section>
    <section>
     <title>
      <p>Технические писатели</p>
     </title>
     <p>До этого момента мы говорили лишь о внутренней документации, той которую составляют сами программисты. Но что происходит, если в вашем проекте участвуют профессиональные технические писатели? Слишком часто программисты просто «перекидывают» материал техническим писателям и дают им возможность заработать себе на жизнь, создавая руководства пользователей, рекламные материалы и т. д.</p>
     <p>Это является ошибкой. То, что программисты не составляют такие документы, вовсе не означает, что мы можем поступиться прагматическими принципами. Мы хотим, чтобы писатели восприняли те же основные принципы, что и прагматики, – соблюдали принципы DRY, ортогональности, а также концепцию "модель-визуальное представление", применяли автоматизацию и сценарии.</p>
    </section>
    <section>
     <title>
      <p>Печатать документ или ткать его на холсте?</p>
     </title>
     <p>Издаваемой бумажной документации присуща одна проблема: она может устареть, пока будет напечатана. Документация в любой ее форме – лишь моментальный снимок.</p>
     <p>Поэтому мы стараемся создавать всю документацию в форме, которая может быть помещена в информационную сеть, на web-страницу вместе с гиперссылками. Такое представление документации легче сохранять в обновленном виде, чем отслеживать все существующие бумажные экземпляры, уничтожать их и распространять обновленные версии. Это также является лучшим способом обращения к нуждам широкой аудитории. Однако не забывайте помещать дату или номер версии на каждой web-странице. В этом случае читатель сможет разобраться, что соответствует текущему моменту, что изменилось недавно, а что осталось неизменным.</p>
     <p>Во многих случаях вам приходится представлять одну и ту же документацию в различных форматах: в печатном, в виде web-страницы, экранной справки, а может быть, и как слайд-шоу. Обычное решение в большой степени полагается на технологию "вырезать и вставить" на и создание нескольких независимых документов из одного оригинала. Это неудачная идея: представление документа не должно зависеть от его содержания.</p>
     <p>Если вы пользуетесь системой описания документов, то обладаете гибкостью, чтобы реализовать столько различных выходных форматов, сколько вам нужно. Вы можете использовать</p>
     <p><emphasis>&lt;H1&gt;Chapter Title&lt;/Н1&gt;</emphasis></p>
     <p id="_ednref54">для генерации новой главы в отчетной версии документа и названия нового слайда в слайд-шоу. Можно воспользоваться технологиями типа XSL и CSS <a l:href="#n_54">[54]</a> для генерирования множественных выходных форматов из этого описания.</p>
     <p>Если вы используете текстовый процессор, то, по всей вероятности, будете располагать аналогичными возможностями. Если не забывали использовать стили для идентификации различных элементов документа, то, применяя различные таблицы стилей, вы можете существенным образом изменить внешний вид окончательного результата. Большинство современных текстовых процессоров позволяет конвертировать документы в форматы типа HTML для публикации на web-сайтах.</p>
    </section>
    <section>
     <title>
      <p>Языки разметки</p>
     </title>
     <p>Мы рекомендуем рассмотреть некоторые из современных схем описания документации для крупномасштабных проектов по документированию.</p>
     <p>Многие авторы, пишущие на технические темы, используют в настоящее время средство DocBook для описания своих документов. DocBook представляет собой стандарт описания документов на основе SGML, который тщательно идентифицирует каждый компонент в документе. Документ можно обрабатывать процессором DSSSL для его преобразования в любое число различных форматов. Проект документации Linux использует DocBook для представления информации в форматах RTF, ТеХ, info, PostScript и HTML.</p>
     <p>Пока ваше первоначальное описание достаточно насыщено, чтобы выразить все необходимые концепции (включая гиперссылки), перевод публикации в любую другой форму не составит труда и будет выполняться автоматически. Вы можете создавать интерактивную справку, руководства, описание основных свойств продукта для помещения на web-сайт и даже календарь с ежедневными советами – все из одного и того же источника, который находится в системе управления исходным текстом и собирается в ходе процедуры ночной сборки основной программы (см. "Вездесущая автоматизация").</p>
     <p>Документация и программа – это различные визуальные представления одной и той же основополагающей модели, но лишь визуальные представления имеют право разниться. Не позволяйте документации превращаться в гражданина второго сорта, которому запрещено участвовать в основном документообороте проекта. Обращайтесь с документацией так же бережно, как вы обращаетесь с программой, и пользователи (а также сотрудники службы сопровождения) будут петь вам осанну.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Пороки дублирования</p>
     <p>• Ортогональность</p>
     <p>• Преимущества простого текста</p>
     <p>• Управление исходным текстом</p>
     <p>• Всего лишь визуальное представление</p>
     <p>• Программирование в расчете на стечение обстоятельств</p>
     <p>• Карьер для добычи требований</p>
     <p>• Вездесущая автоматизация</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Приходилось ли вам писать пояснительный комментарий для исходного текста программы, который вы только записали? Почему нет? Не было времени? Не уверены, что программа действительно работает – пробуете некую идею в виде прототипа? Впоследствии вы выбросите эту программу, не правда ли? Ведь при этом она не попадет в проект без комментариев и в экспериментальном виде, не так ли?</p>
     <p>• Иногда неудобно документировать проектное решение исходного текста программы, поскольку это решение вам не совсем ясно – оно еще на стадии развития. Вы полагаете, что не должны тратить свои усилия впустую, описывая, как работает что-то, еще до того, как оно действительно начинает работать. Не похоже ли это на программирование в расчете на стечение обстоятельств? (См. одноименный раздел.)</p>
    </section>
   </section>
   <section>
    <title>
     <p>45</p>
     <p>Большие надежды</p>
    </title>
    <epigraph>
     <p>Подивитесь сему, небеса, и содрогнитесь, и ужаснитесь, говорит Господь.</p>
     <text-author>Иеремия (2,12)</text-author>
    </epigraph>
    <section>
     <p>Компания объявляет о рекордной прибыли, а цена на ее акции падает на 20 %. Вечерняя телепрограмма финансовых новостей объясняет, что компании не удалось оправдать надежды аналитиков. Ребенок открывает дорогой рождественский подарок – и в слезы: там нет дешевой куклы, на которую он так надеялся. Проектная команда творит чудеса, реализуя феноменально сложное приложение, и лишь для того, чтобы получить ушат воды со стороны пользователей, поскольку в системе отсутствует справка.</p>
     <p>В абстрактном смысле приложение успешно, если оно корректно реализует свои спецификации. К сожалению, это и оплачивается лишь абстрактно.</p>
     <p>В действительности успех проекта измеряется тем, насколько он соответствует надеждам своих пользователей. Проект, не оправдавший их надежд, обречен на неудачу, неважно, насколько хорошо он соответствовал срокам. Однако, подобно родителям ребенка, ожидающего дешевую куклу, вы заходите слишком далеко и терпите неудачу.</p>
     <empty-line/>
     <cite>
      <p>Подсказка 69: Слегка превышайте надежды ваших пользователей</p>
     </cite>
     <empty-line/>
     <p>Однако выполнение этой подсказки требует некоторых усилий.</p>
    </section>
    <section>
     <title>
      <p>Передача надежд</p>
     </title>
     <p>Пользователи обычно приходят к вам с некоторым видением того, что они хотят. Оно может быть неполным, противоречивым или технически невыполнимым, но оно принадлежит пользователям, и, подобно ребенку в Рождество, они вкладывают в него некоторые эмоции. Вы не можете просто проигнорировать их видение.</p>
     <p>По мере того как вы осознаете потребности пользователей, вы обнаруживаете области, в которых не сможете удовлетворить их требования, или области, где их требования слишком консервативны. Ваша роль частично заключается в передаче этого состояния. Работайте со своими пользователями так, чтобы их понимание того, что вы им поставляете, было точным. Этим необходимо заниматься на протяжении всего процесса разработки. Никогда не теряйте из виду те бизнес-задачи, которые предполагается решать с помощью вашей программы.</p>
     <p>Некоторые консультанты называют этот процесс "управление ожиданиями" – активное управление тем, что пользователи надеются получить от их систем. Мы полагаем, что это несколько высокомерная позиция. Наша роль заключается не в том, чтобы управлять надеждами наших пользователей. Необходимо работать с ними, чтобы прийти к общему пониманию процесса разработки и конечного результата, наряду с теми ожиданиями, которые еще не выражены словами. Если команда свободно общается с внешним миром, то этот процесс практически автоматизирован; все должны понять, что ожидается и как это будет построено.</p>
     <p>Существует ряд методик, которые могут использоваться для облегчения этого процесса. Из них наиболее важными являются "Стрельба трассирующими" и "Прототипы и памятные записки". Обе методики позволяют команде конструировать то, что может увидеть пользователь. Обе являются идеальными способами передать ваше понимание требований пользователей, обедают возможность вам и вашим пользователям практиковаться в общении друг с другом.</p>
    </section>
    <section>
     <title>
      <p>Небольшой довесок</p>
     </title>
     <p>Если вы работаете в тесном взаимодействии с вашими пользователями, разделяя их надежды и сообщая им о том, что вы делаете, то при завершении проекта практически не возникнет сюрпризов.</p>
     <p>ЭТО ПЛОХО. Постарайтесь удивить ваших пользователей. Заметьте, их не надо пугать, их надо восхищать.</p>
     <p>Дайте им немного больше, чем они ожидают. Небольшое усилие, которое потребуется, чтобы добавить в систему некое средство, ориентированное на пользователя, окупится доброжелательностью не один раз.</p>
     <p>Прислушивайтесь к вашим пользователям в ходе работы над проектом, чтобы получить намеки на те средства, которые действительно могут их восхитить. Вот некоторые средства, добавляемые без особого труда, которые порадуют среднего пользователя:</p>
     <p>• Всплывающая подсказка</p>
     <p>• «Горячие» комбинации клавиш</p>
     <p>• Краткое справочное руководство в качестве дополнения к руководству пользователя</p>
     <p>• Расцвечивание</p>
     <p>• Анализаторы журнала регистрации</p>
     <p>• Автоматическая инсталляция</p>
     <p>• Инструментальные средства проверки целостности системы</p>
     <p>• Возможность запускать несколько версий системы в целях тренировки</p>
     <p>• Экран-заставка, настроенный для фирмы-заказчика</p>
     <p>Все эти вещи относительно поверхностны и особо не нагружают систему. Однако каждый из этих «довесков» говорит пользователям о том, что команда разработчиков позаботилась о создании отличной системы, предназначенной для использования в реальной жизни. Просто не забывайте о том, что работа системы не должна быть расстроена этими нововведениями.</p>
     <subtitle>Другие разделы, относящиеся к данной теме:</subtitle>
     <p>• Неплохие программы</p>
     <p>• Стрельба трассирующими</p>
     <p>• Прототипы и памятные записки</p>
     <p>• Карьер для добычи требований</p>
     <subtitle>Вопросы для обсуждения</subtitle>
     <p>• Иногда самыми жесткими критиками проекта являются те, кто над ним работал. Случалось ли вам испытывать разочарование, когда ваши собственные надежды не были оправданы тем, что вы создали? Как это могло произойти? Может быть здесь присутствует нечто большее, чем логика.</p>
     <p>• Что говорят ваши пользователи, когда вы поставляете им готовую программу? Пропорционально ли их внимание к различным аспектам данной программы усилиям, которые вы в эти аспекты вложили? Что их восхищает?</p>
    </section>
   </section>
   <section>
    <title>
     <p>46</p>
     <p>Гордость и предубеждение</p>
    </title>
    <epigraph>
     <p>Вы восхищали нас довольно долго.</p>
     <text-author>Джейн Остин, Гордость и предубеждение</text-author>
    </epigraph>
    <p>Программисты-прагматики не уклоняются от ответственности. Вместо этого они испытывают радость, принимая вызовы и распространяя свой опыт. Если мы несем ответственность за проектное решение или фрагмент программы, мы делаем работу, которой можем гордиться.</p>
    <empty-line/>
    <cite>
     <p>Подсказка 70: Ставьте вашу подпись под работой</p>
    </cite>
    <empty-line/>
    <p>В прошлом мастеровые гордились, подписывая свою работу. Вы должны следовать их примеру.</p>
    <p>Проектные команды все еще состоят из людей, и это вызывает сложности. В некоторых проектах идея монопольных прав на программу может вызывать трения. Люди могут начать обособляться или не выказывать желания работать над общими фундаментальными элементами. Проект может закончиться феодальной раздробленностью. У вас возникнут предубеждения относительно и вашей программы, и ваших коллег.</p>
    <p>Этого-то мы и не хотим. Вы не должны ревниво защищать свою программу от тех, кто вторгается в ее пределы; вы должны платить людям той же монетой и относиться к программам других разработчиков с уважением. Золотое правило ("Поступай с другими так, как бы ты хотел, чтобы они поступали с тобой") и взаимоуважение среди разработчиков является важным для действия подсказки, приведенной выше.</p>
    <p>Анонимность, особенно при работе с крупномасштабными проектами, может оказаться благодатной почвой для небрежности, ошибок, лени и неудачных программ. Слишком легко рассматривать себя лишь в качестве винтика в большой машине, высказывая неубедительные извинения в бесконечных отчетах о состоянии, а не просто создавая хорошие программы.</p>
    <p>У программы должен быть владелец, но он не обязательно является физическим лицом. Успешный метод eXtreme Programming [URL 45], разработанный Кентом Беком, рекомендует коллективную собственность на программу (но это требует дополнительных процедур типа парного программирования в целях защиты от анонимности).</p>
    <p>Мы хотим, чтобы вы гордились правом собственности. "Я это написал, и я стою за своей работой". Ваша подпись должна стать признанным знаком качества. Люди должны увидеть ваше имя в заголовке программы и рассчитывать на то, что она будет солидной, хорошо составленной, проверенной и документированной. Эта должна быть поистине профессиональная работа. Написанная настоящим профессионалом.</p>
    <p>Прагматиком-программистом.</p>
   </section>
  </section>
  <section>
   <title>
    <p>Приложение А</p>
    <p>Информационные ресурсы</p>
   </title>
   <section>
    <p>Авторы затронули в книге весьма широкий круг вопросов программирования, и этому есть объяснение: вопросы рассматривались с высоты птичьего полета. Но если бы им было уделено то внимание, которого они заслуживают, то объем книги стал бы больше на порядок.</p>
    <p>Книга начинается с утверждения, что программисты-прагматики должны постоянно учиться. В данном приложении приводится перечень источников информации, которые могут им в этом поспособствовать.</p>
    <p>В разделе "Профессиональные общества" приведены координаты IEEE (Institute of Electrical and Electronical Engineers – Институт инженеров по электротехнике и радиоэлектронике) и ACM (Association of Computing Machinery – Ассоциация по вычислительной технике). Мы рекомендуем программисту-прагматику вступить в ряды одного (или обоих) из этих обществ. Ниже в разделе "Собираем библиотеку" указаны периодические издания, книги и интернет-сайты, которые содержат высококачественную и ценную информацию (или просто-напросто забавны по своему содержанию).</p>
    <p>В книге содержится много ссылок на программные ресурсы, доступные через Интернет. В разделе «Интернет-ресурсы» приводятся их адреса (URL) с кратким описанием. Но в силу природы Интернета многие из этих адресов могут устареть к моменту выхода книги в свет. Для того чтобы найти более свежие ссылки, можно воспользоваться одной из поисковых систем или же посетить наш интернет-сайт: www.pragmaticprogrammer.com и просмотреть соответствующий раздел.</p>
    <p>И наконец, в приложении содержится библиографический список.</p>
   </section>
   <section>
    <title>
     <p>Профессиональные общества</p>
    </title>
    <p id="_ednref55">У программистов существует два профессиональных объединения мирового уровня. Association of Computing Machinery – ACM <a l:href="#n_55">[55]</a> (Ассоциация по вычислительной технике) и Institute of Electrical and Electronical Engineers – IEEE <a l:href="#n_56">[56]</a> (Компьютерное общество института инженеров по электротехнике и радиоэлектронике). Всем программистам рекомендуется вступить в одно (или оба) из этих обществ. Кроме того, разработчики, проживающие вне США, могут вступить в соответствующие национальные объединения (примером может служить British Computer Society – BCS – Британское компьютерное общество).</p>
    <p>Члены профессиональных обществ пользуются рядом преимуществ. Конференции и собрания дают возможность общения людям с общими интересами, а специальные секции и технические комитеты позволяют участвовать в выработке стандартов и рекомендаций, используемых во всем мире. Многое можно почерпнуть из их публикаций, в которых ведутся «высоколобые» дискуссии по практическим вопросам и «приземленные» разговоры по компьютерной теории.</p>
   </section>
   <section>
    <title>
     <p>Собираем библиотеку</p>
    </title>
    <p>Мы серьезно относимся к чтению книг. Как было замечено в разделе "Портфель знаний", хороший программист учится постоянно. Постоянное нахождение программиста в курсе выходящих книг и периодики способствует такому обучению.</p>
    <subtitle>Периодические издания</subtitle>
    <p>Люди, подобные авторам книги, хранят старые журналы и периодику до тех пор, пока вес стопки не будет достаточен для превращения нижних экземпляров в алмаз. Вот некоторые периодические издания, рекомендуемые авторами.</p>
    <p>• <strong>IEEE Computer.</strong> Рассылается по подписке членам Компьютерного общества Института инженеров по электротехнике и радиоэлектронике. Этот журнал сосредоточен на практических аспектах, но не чужд и теории. Некоторые номера посвящены конкретной тематике, другие же представляют собой просто сборники интересных статей. Говоря языком связистов, журнал обладает хорошим соотношением "сигнал-шум".</p>
    <p>• <strong>IEEE Software.</strong> Не менее ценная публикация Компьютерного общества Института инженеров по электротехнике и радиоэлектронике, издаваемая раз в два месяца и нацеленная на программистов-практиков.</p>
    <p>• <strong>Communications of the ACM.</strong> Основной журнал, получаемый всеми членами Ассоциации по вычислительной технике; на протяжении десятилетий является отраслевым стандартом и опубликовал больше основополагающих статей, чем любой другой источник.</p>
    <p>• <strong>SIGPLAIM.</strong> Журнал выпускается секцией языков программирования, входящей в ассоциацию АСМ, распространяется среди членов АСМ. В нем часто публикуются спецификации языков программирования, наряду с тематическими статьями для всех, кто любит "копать вглубь".</p>
    <p>• <strong>Dr. Dobbs Journal.</strong> Ежемесячный журнал, распространяемый по подписке и продающийся в киосках. Этот журнал непрост для восприятия, но его статьи охватывают как практические аспекты, так и чистую теорию.</p>
    <p>• <strong>The Perl Journal.</strong> Поклонникам Perl стоит подписаться на этот журнал (www.tpj.com).</p>
    <p>• <strong>Software Development Magazine.</strong> Ежемесячный журнал, посвященный общим вопросам управления проектами и разработки программного обеспечения.</p>
    <subtitle>Еженедельные профессиональные издания</subtitle>
    <p>Существует несколько еженедельных газет для разработчиков и менеджеров. Эти газеты в основном представляют собой сборники фирменных пресс-релизов, перекроенных в статьи. Тем не менее, их содержание представляет ценность – оно позволяет быть в курсе событий, не отставать от объявлений о выходе новых продуктов и следить за возникновением и распадом отраслевых альянсов. Но от них не стоит ожидать наличия глубоко проработанных технических материалов.</p>
    <subtitle>Книги</subtitle>
    <p>Книги по компьютерной тематике весьма дороги, но при тщательном выборе они становятся хорошим вложением денег. Вот некоторые из них, понравившиеся авторам:</p>
    <subtitle>Анализ и проектирование</subtitle>
    <p>• <strong>Object-Oriented Software Construction, второе издание.</strong> Эпическое произведение Бертрана Мейера, посвященное основам объектно-ориентированного программирования, общим объемом 1300 страниц [Меу97Ь].</p>
    <p>• <strong>Design Patterns.</strong> Конструктивный шаблон описывает метод решения конкретного класса задач на более высоком уровне по сравнению с фразеологизмом на языке программирования. Эта неоклассическая книга [GHJV95], написанная "бандой четырех" (группа авторов Erich Gamma, Richard Helm, Ralph Johnson и John Vlissides. – Прим. пер.), содержит описание 23 базовых конструктивных шаблонов, включая Proxy, Visitor и Singleton.</p>
    <p>• <strong>Analysis Patterns.</strong> Сокровищница высококлассных архитектурных шаблонов, выбранных из множества реальных проектов и переработанных в виде книги. Относительно быстрый способ перенимания опыта моделирования, полученного в течение многих лет [Fow96].</p>
    <subtitle>Команды и проекты</subtitle>
    <p>• <strong>The Mythical Man Month.</strong> Классическое произведение (не так давно переработанное) Фреда Брукса, о "подводных камнях", появляющихся в ходе организации команд разработчиков [Вго95].</p>
    <p>• <strong>Dynamics of Software Development.</strong> Серия коротких очерков о разработке программного обеспечения в больших командах, сосредоточенных на динамике взаимодействия членов команды между собой, а также между самой командой и внешним миром [МсС95].</p>
    <p>• <strong>Surviving Object-Oriented Projects: A Manager's Guide.</strong> "Вести с переднего края", сообщенные Алистером Кокбэрном, иллюстрируют многие опасности и ловушки, подстерегающие вас при управлении объектно-ориентированным проектом, особенно если это ваш первый проект. Г-н Кокбэрн дает подсказки и методики, позволяющие читателю решать наиболее общие проблемы [Сос97Ь].</p>
    <subtitle>Среды программирования</subtitle>
    <p>• <strong>Unix.</strong> У.Р. Стивенс написал несколько прекрасных книг, включая "Advanced Programming in the Unix Environment" и "Unix Network Programming" [Ste92, Ste98, Ste99].</p>
    <p>• <strong>Windows.</strong> Книга Маршалла Брэйна "Win32 System Services" [Bra95] является кратким справочником по низкоуровневым интерфейсам прикладных программ. Труд Чарльза Петцольда "Programming Windows" [Pet98] стал своего рода Библией для разработчиков графических сред пользователя Windows.</p>
    <p>• <strong>С++.</strong> Получив проект на языке С++, нужно бежать (а не идти) в книжный магазин и хватать книгу Скотта Мейера под названием "Effective С++" и к ней, возможно, книгу "More Effective С++" [Меу97а, Меу96]. При построении систем существенных размеров может понадобиться книга Джона Лакоса "Large-Scale С++ Software Design" [Lak96]. В поисках более сложных методик стоит обратиться к труду Джима Коплина под названием "Advanced С++ Programming Styles and Idioms" [Сор92].</p>
    <p>Кроме того, книги из серии Nutshell издательства O'Reilly (<a l:href="http://www.ora.com/">www.ora.com</a>) дают оперативное и всестороннее освещение разнообразных тем и языков, таких как perl, уасс, sendmail, внутренней организации Windows и регулярных выражений.</p>
    <subtitle>Интернет</subtitle>
    <p>Найти в Интернете нужную информацию трудно. Вот несколько ссылок, которые проверяются авторами как минимум раз в неделю.</p>
    <p>• <strong>Slashdot.</strong> Под заголовком "News for nerds. Stuff that matters" (Новости для дебилов. Материал со значением) скрывается один из крупнейших сайтов сообщества Linux. Помимо регулярно обновляемых новостей из мира Linux сайт предлагает информацию по модным технологиям и проблемам, которые волнуют разработчиков.</p>
    <p><a l:href="http://www.slashdot.org/">www.slashdot.org</a></p>
    <p>• <strong>Cetus Links.</strong> Тысячи ссылок на тему объектно-ориентированного программирования.</p>
    <p><a l:href="http://www.cetus-links.org/">www.cetus-links.org</a></p>
    <p>• <strong>WikiWikiWeb.</strong> Центральная база данных шаблонов и обсуждение шаблонов (в Портленде, США). Не являясь особо выдающимся ресурсом, данный сайт представляет собой интересный эксперимент по коллективному редактированию идей.</p>
    <p><a l:href="http://www.c2.com/">www.c2.com</a></p>
   </section>
   <section>
    <title>
     <p>Интернет-ресурсы</p>
    </title>
    <p>Приведенные ниже ссылки на ресурсы, доступные в Интернете, были действительны во время работы над книгой, но (Сеть есть Сеть!) к моменту выхода ее в свет могут сильно устареть. В этом случае можно попробовать общий поиск по именам файлов или же зайти на сайт Pragmatic Programmer (www.pragmaticprogrammer.com) и проверить имеющиеся на нем ссылки.</p>
    <subtitle>Текстовые редокторы</subtitle>
    <p>Emacs и vi – не единственные межплатформенные редакторы, но они распространяются бесплатно и находят широкое применение. Пролистав любой специализированный журнал (например Dr. Dobbs), можно найти ряд коммерческих альтернатив вышеуказанным редакторам.</p>
    <subtitle>Редактор Emacs</subtitle>
    <p>Редакторы Emacs и XEmacs имеют версии как для платформы Unix, так и для Windows.</p>
    <p>[URL 1] Редактор Emacs</p>
    <p><a l:href="http://www.gnu.org/">www.gnu.org</a></p>
    <p>Новейший «крупнокалиберный» редактор, обладающий всеми возможностями своих предшественников. Кривая обучения Emacs почти вертикальна, но вас ждет щедрое вознаграждение по мере овладения тонкостями работы. Редактор также содержит отличную программу чтения почты и новостей, адресную книгу, календарь и дневник, приключенческую игру…</p>
    <p>[URL 2] Редактор XEmacs</p>
    <p><a l:href="http://www.xemacs.org/">www.xemacs.org</a></p>
    <p>Отпочковавшись от классического редактора Emacs несколько лет назад, XEmacs отличается более корректными внутренними командами и более изящным интерфейсом.</p>
    <subtitle>Редактор vi</subtitle>
    <p>Существует как минимум 15 различных клонов редактора vi. Редактор vim переносится на большинство платформ и является хорошим выбором при работе в различных программных средах.</p>
    <p>[URL 3]The Vim Editor</p>
    <p><a l:href="ftp://ftp.fu-berlin.de/misc/editors/vim">ftp://ftp.fu-berlin.de/misc/editors/vim</a></p>
    <p>Цитата из документации: "Редактор vi содержит большое количество усовершенствований: многоуровневая отмена команд, многооконный интерфейс с буферами, выделение синтаксиса, редактирование в командной строке, дополнение имен файлов, экранная справка, визуальный выбор объектов, и т. д."</p>
    <p>[URL 4] Редактор elvis</p>
    <p><a l:href="http://www.fh-wedel.de/elvis">www.fh-wedel.de/elvis</a></p>
    <p>Усовершенствованный клон редактора vi с поддержкой X.</p>
    <p>[URL 5] Emacs Viper Mode</p>
    <p><a l:href="http://www.cs.sunysb.edu./&quot;kifer/emacs.html">http://www.cs.sunysb.edu./"kifer/emacs.html</a></p>
    <p>Viper представляет собой набор макрокоманд, которые придают редактору Emacs внешнее сходство с редактором vi. Некоторые могут поставить под сомнение разумность шага, заключающегося в расширении самого большого редактора в мире с целью эмулирования другого редактора, характерной чертой которого является компактность. Другие, напротив, считают, что он объединяет в себе лучшее из двух цивилизаций – Emacs и vi.</p>
    <subtitle>Компиляторы, языки программирования и средства разработки</subtitle>
    <p>[URL 6] The GNU C/C++ Compiler =» www.fsf.org/software/gcc/gcc.html</p>
    <p>Один из наиболее популярных в мире компиляторов С и С++. Он также работает с Objective-C. (Во время работы над книгой проект egcs, который вначале отпочковался от gcc. находился в процессе воссоединения с последним.)</p>
    <p>[URL 7] The Java Language from Sun</p>
    <p>java.sun.com</p>
    <p>Домашняя страница Java, включающая загружаемые SDK, документацию, средства обучения, новости и т. д.</p>
    <p>[URL 8] Perl Language Home Page</p>
    <p><a l:href="http://www.perl.com/">www.perl.com</a></p>
    <p>Эти ресурсы, относящиеся к языку Perl, предоставляются фирмой O'Reilly.</p>
    <p>[URL 9] The Python Language</p>
    <p><a l:href="http://www.python.com/">www.python.com</a></p>
    <p>Объектно-ориентированный язык программирования Python является интерпретируемым и интерактивным, обладает хитроумным синтаксисом и большим количеством верных поклонников.</p>
    <p>[URL 10) SmallEiffel</p>
    <p>SmallEiffel.loria.fr</p>
    <p>Компилятор GNU Eiffel работает на любом компьютере, снабженном компилятором ANSI С и средой выполнения Posix.</p>
    <p>[URL 11] ISE Eiffel</p>
    <p><a l:href="http://www.eiffel.com/">www.eiffel.com</a></p>
    <p>Фирме Interactive Software Engineering принадлежит авторство программы Design by Contract; она реализует на коммерческой основе компилятор Eiffel и сопутствующие инструментальные средства.</p>
    <p>[URL 12] Sather</p>
    <p><a l:href="http://www.icsi.berkeley.edu/'sather">www.icsi.berkeley.edu/'sather</a></p>
    <p>Sather является экспериментальным языком программирования, ведущим свое происхождение от Eiffel. Его задача – поддерживать функции высшего порядка и итерационной абстракции, а также Common Lisp, CLU или Scheme и быть таким же эффективным, как С, С++ или Fortran.</p>
    <p>[URL 13] Visual Works</p>
    <p>www.objectshare.com</p>
    <p>Основной ресурс для среды VisualWorks Smalltalk. Некоммерческие версии для Windows и Linux распространяются бесплатно.</p>
    <p>[URL 14] The Squeak Language Environment</p>
    <p>www.squeak.cs.uiuc.edu</p>
    <p>Squeak представляет собой бесплатно распространяемую и переносимую реализацию – Sma!ltalk-80, написанную на Squeak; может генерировать код на С для повышения производительности.</p>
    <p>[URL 15] The ТОМ Programming Language</p>
    <p><a l:href="http://www.gerbil.org/tom">www.gerbil.org/tom</a></p>
    <p>Весьма динамичный язык, ведущий свое начало от Objective-С.</p>
    <p>[URL 16] The Beowulf Project</p>
    <p><a l:href="http://www.beowulf.org/">www.beowulf.org</a></p>
    <p>Проект посвящен построению высокопроизводительных компьютеров из сетевых кластеров, состоящих из недорогих Linux-блоков.</p>
    <p>[URL 17] iContract – Design by Contract Tool For Java</p>
    <p><a l:href="http://www.reliable-systems.com/">www.reliable-systems.com</a></p>
    <p>Данное инструментальное средство использует формализм предварительных условий, выходных условий и инвариантов, реализовано в виде препроцессора для Java. Использует наследование, реализует кванторы существования и многое другое.</p>
    <p>[URL 18] Nana – Logging and Assertions for С and С++</p>
    <p><a l:href="http://www.cs.ntu.edu.au/homepages/pjm/nana-home/index.html">www.cs.ntu.edu.au/homepages/pjm/nana-home/index.html</a></p>
    <p>Улучшенная поддержка проверки утверждений и регистрации в С и С++. Nana также обеспечивает некоторую поддержку для программы Design by Contract.</p>
    <p>[URL 19] DDD – Data Display Debugger</p>
    <p>www cs.tu-bs.de/softech/ddd</p>
    <p>Бесплатный графический интерфейс конечного пользователя для отладчиков Unix.</p>
    <p>[URL 20] John Brant's Refactoring Browser</p>
    <p><a l:href="http://www.cs.uiuc.edu/users/brant/Refactory">www.cs.uiuc.edu/users/brant/Refactory</a></p>
    <p>Популярный браузер, применяемый при реорганизации (язык Smalltalk).</p>
    <p>[URL 21] DOC++ Documentation Generator</p>
    <p> <a l:href="http://www.zib.de/Visual/software/doc++/index.html">www.zib.de/Visual/software/doc++/index.html</a></p>
    <p>DOC++ представляет собой систему документирования для C/C+ + и Java, которая генерирует выходные файлы в форматах LATEX и HTML для просмотра документации непосредственно из заголовка С++ или файлов класса Java.</p>
    <p>[URL 22] xUnit – Unit Testing Framework</p>
    <p> <a l:href="http://www.xprogramming.com/">www.Xprogramming.com</a></p>
    <p>Представляет простую, но мощную концепцию; модуль тестирования структур xUnit является полной платформой для тестирования программного обеспечения, написанного на нескольких языках.</p>
    <p>[URL 23] The Tel Language</p>
    <p> <a l:href="http://www.scriptics.com/">www.scriptics.com</a></p>
    <p>Язык Tel (Tool Command Language) является языком сценариев, разработанным для упрощения процедуры встраивания в приложение.</p>
    <p>[URL 24] Expect – Automate Interaction with Programs</p>
    <p><a l:href="http://www.expect.nist.gov/">www.expect.nist.gov</a></p>
    <p>Расширение expect, построенное на языке Tel [URL 23], позволяет создавать сценарии взаимодействия с программами. Помимо помощи при составлении командных файлов, которые, например, осуществляют вызов файлов с удаленных серверов или расширяют возможности оболочки, expect приносит пользу и при регрессионном тестировании. Графическая версия expectk позволяет оборачивать приложения пользователя с графическим интерфейсом в оконный интерфейс.</p>
    <p>[URL 25] Т Spaces</p>
    <p><a l:href="http://www.almaden.ibm.com.cs/TSpaces">www.almaden.ibm.com.cs/TSpaces</a></p>
    <p>Цитата с web-страницы: "Т Spaces представляет собой сетевой коммуникационный буфер с функциональными возможностями баз данных. Он осуществляет связь между приложениями и устройствами в сети с гетерогенными компьютерами и операционными системами. Т Spaces обеспечивает следующие средства: коллективной связи, работы с базами данных, переноса файлов (основанные на URL) и оповещения о событиях".</p>
    <p>[URL 26] javaCC – Java Compiler-Compiler</p>
    <p><a l:href="http://www.suntest.com/">www.suntest.com</a></p>
    <p>Генератор грамматического разбора, связанный с языком Java.</p>
    <p>[URL 27] The bison Parser Generator</p>
    <p><a l:href="http://www.gnu.org/software/bison/bison.html">www.gnu.org/software/bison/bison.html</a></p>
    <p>Генератор bison получает на входе описание грамматики и генерирует из него исходный текст соответствующей программы грамматического разбора на языке С.</p>
    <p>[URL 28] SWIG – Simplified Wrapper and Interface Generator</p>
    <p><a l:href="http://www.swig.org/">www.swig.org</a></p>
    <p>SWIG представляет собой инструментальное средство разработки, стыкующее между собой программы, написанные на языках С, С++ и Objective-C, с языками высокого уровня, такими как Perl, Python, Tcl/Tk, а также Java, Eiffel и Guile.</p>
    <p>[URL 29] The Object Management Group, Inc.</p>
    <p><a l:href="http://www.omg.org/">www.omg.org</a></p>
    <p>Фирма Object Management Group, Inc. является «распорядителем» различных спецификаций для разработки распределенных объектно-базирующихся систем. К числу работ этой фирмы относятся CORBA (обобщенная архитектура брокера объектных запросов) и ПОР (протокол передачи сообщений между сетевыми объектами через Интернет). Сочетание этих спецификаций дает возможность объектам связываться друг с другом, даже если они написаны на разных языках и выполняются на компьютерах различных типов.</p>
    <subtitle>Инструментальные средство UNIX, работающие в среде DOS</subtitle>
    <p>[URL 30] The UWIN Development Tools</p>
    <p><a l:href="http://www.gtlinc.com/Products/Uwin/uwin.html">www.gtlinc.com/Products/Uwin/uwin.html</a></p>
    <p>Фирма Global Technologies, Inc., Old Bridge, NJ</p>
    <p>Пакет UWIN предоставляет библиотеки динамической компоновки (DLL) Windows, которые эмулируют большую часть библиотечного интерфейса уровня Unix С. Используя данный интерфейс, фирма Global Technologies, Inc. перенесла большое число инструментальных средств из командной строки Unix в систему Windows. См. также [URL 31].</p>
    <p>[URL 31] The Cygnus Cygwin Tools</p>
    <p><a l:href="http://www.sourceware.cygnus.com/cygwin/">www.sourceware.cygnus.com/cygwin/ </a></p>
    <p>Фирма Cygnus Solutions, Sunnyvale, CA</p>
    <p>Пакет Cygnus также эмулирует интерфейс библиотеки Unix С и предоставляет большой набор инструментальных средств, работающих в режиме командной строки Unix, при работе в операционной системе Windows.</p>
    <p>[URL 32] Perl Power Tools</p>
    <p><a l:href="http://www.perl.com/language/ppt/">www.perl.com/language/ppt/</a></p>
    <p>Данный проект посвящен повторной реализации классического набора команд Unix на языке Perl, что дает возможность их использования при работе со всеми платформами, поддерживающими Perl (их довольно много).</p>
    <p>Средствауправленияисходнымтекстомпрограмм</p>
    <p>[URL 33] RCS – Revision Control System</p>
    <p><a l:href="http://www.cyclic.com/">www.cyclic.com</a></p>
    <p>Система управления исходным текстом программ GNU для Unix и Windows NT.</p>
    <p>[URL 34] CVS – Concurrent Version System</p>
    <p>www.cyclic.com</p>
    <p>Система управления исходным текстом программ для Unix и Windows NT, распространяемая бесплатно. Расширяет возможности Revision Control System, поддерживая модель «клиент-сервер» и параллельный доступ к файлам.</p>
    <p>[URL 35] Aegis Transaction-Based Configuration Management</p>
    <p><a l:href="http://www.canb.auug.org.au/&quot;mil!erp/aegis.html">www.canb.auug.org.au/"mil!erp/aegis.html</a></p>
    <p>Инструментальное средство управления версиями (ориентированное на процесс), которое применяет к ним существующие стандарты проекта (например, проверку прохождения тестов для возвращаемых программных кодов).</p>
    <p>[URL 36] ClearCase</p>
    <p>www.rational.com</p>
    <p>Управление версиями программы, рабочей областью и полной сборкой программы, управление процессом.</p>
    <p>[URL 37] MKS Source Integrity</p>
    <p><a l:href="http://www.mks.com/">www.mks.com</a></p>
    <p>Управление версиями и конфигурацией. Некоторые версии включают средства, позволяющие удаленным пользователям-разработчикам одновременно работать над одними и теми же файлами.</p>
    <p>[URL 38] PVCS Configuration Management</p>
    <p><a l:href="http://www.merant.com/">www.merant.com</a></p>
    <p>Система управления исходным текстом программ, очень популярная при работе в Windows.</p>
    <p>[URL 39] Visual SourceSafe</p>
    <p><a l:href="http://www.microsoft.com/">www.microsoft.com</a></p>
    <p>Система управления версиями, интегрируемая с инструментами визуальной разработки фирмы Microsoft.</p>
    <p>[URL 40] Perforce</p>
    <p>www.perforce.com</p>
    <p>Менеджер конфигурирования программного обеспечения "клиент-сервер".</p>
    <p>Прочие инструментальные средства</p>
    <p>[URL 41] Winzip – Archive Utility for Windows</p>
    <p><a l:href="http://www.winzip.com/">www.winzip.com</a></p>
    <p>Фирма Nico Mak Computing, Inc., Mansfield, CT</p>
    <p>Утилита архивирования файлов, работающая в среде Windows. Поддерживает форматы zip и tar.</p>
    <p>[URL 42] The Z Shell</p>
    <p><a l:href="http://www.sunsite.auc.dk/zsh">www.sunsite.auc.dk/zsh</a></p>
    <p>Оболочка, предназначенная для интерактивной работы и содержащая мощный язык сценариев. В оболочку zsh было включено много полезных средств из оболочек bash, ksh и tcsh и добавлен ряд оригинальных элементов.</p>
    <p>[URL 43] A Free SMB Client for Unix Systems</p>
    <p>www.samba.anu.edu.au/pub/samba/</p>
    <p>Дает возможность совместного использования файлов и других ресурсов из операционных систем Unix и Windows. Samba включает в себя:</p>
    <p>• Сервер SMB, предоставляющий средства для работы с файлами и для печати (схожие со средствами, предоставляемыми Windows NT и LAN Manager) клиентам SMB, в роли которых могут выступать Windows 95, Warp Server, smbfs и др.</p>
    <p>• Сервер имен Netbios, обеспечивающий, кроме всего прочего, поддержку функций браузера. По желанию пользователя Samba может быть главным браузером в локальной сети.</p>
    <p>• Клиент SMB (схожий с клиентом ftp), позволяющий получать доступ к ресурсам ПК(дискам и принтерам) из Unix, Netware и других операционных систем.</p>
    <subtitle>Статьи и публикации</subtitle>
    <p>[URL 44] The comp.object FAQ</p>
    <p>www.cyberdyne-object-sys.com/oofaq2</p>
    <p>Солидный, четко организованный список часто задаваемых вопросов по группе новостей comp.object.</p>
    <p>[URL 45] extreme Programming</p>
    <p>www.Xprogramming.com</p>
    <p>Цитата с интернет-сайта: "При создании команды, способной быстро создать исключительно надежное, эффективное, четко структурированное программное обеспечение, в ХР используется весьма легковесное сочетание методик. Многие из методик ХР создавались и опробовались в части проекта СЗ фирмы «Крайслер», представляющего собой весьма успешную систему расчета заработной платы, написанную на языке Smalltalk".</p>
    <p>[URL 46] Alistair Cockburn's Home Page</p>
    <p><a l:href="http://www.members.aol.com/acockburn">www.members.aol.com/acockburn</a></p>
    <p>Стоит посмотреть раздел "Structuring Use Cases with Goals" и так называемые шаблоны сценариев использования.</p>
    <p>[URL 47] Martin Fowler's Home Page</p>
    <p><a l:href="http://www.ourworld.compuseimcom/homepages/martinjowler">www.ourworld.compuseimcom/homepages/martinjowler</a></p>
    <p>Мартин Фаулер является автором книги "Analysis Patterns" и соавтором книг "UML Distilled" и "Refactoring: Improvingthe Design of Existing Code". На домашней странице автора обсуждаются его книги и работа с UML.</p>
    <p>[URL 48] Robert С. Martin's Home Page</p>
    <p><a l:href="http://www.objectmentor.com/home">www.objectmentor.com/home</a></p>
    <p>Неплохое собрание статей ознакомительного плана по объектно-ориентированным методам, включая анализ зависимости и метрики.</p>
    <p>[URL 49] Aspect-Oriented Programming</p>
    <p><a l:href="http://www.parc.xerox.com/csl/projects/aop/">www.parc.xerox.com/csl/projects/aop/</a></p>
    <p>Описывается методика придания функциональности программному коду с позиций ортогональности и описательности.</p>
    <p>[URL 50] JavaSpaces Specifications</p>
    <p><a l:href="http://www.java.sun.com/products/javaspaces">www.java.sun.com/products/javaspaces</a></p>
    <p>Linda-подобная система для Java, поддерживающая распределенное сохранение состояния объекта и распределенные алгоритмы.</p>
    <p>[URL 51] Netscape Source Code</p>
    <p>www.mozilla.org</p>
    <p>Исходный текст браузера Netscape.</p>
    <p>[URL 52] The Jargon File</p>
    <p><a l:href="http://www.jargon.org/">www.jargon.org</a></p>
    <p>Eric S. Raymond</p>
    <p>Определения дня многих общих (и не очень общих) терминов, применяемых в компьютерной индустрии, сдобренные хорошей дозой соответствующего фольклора.</p>
    <p>[URL 53] Eric S. Raymond's Papers</p>
    <p><a l:href="http://www.tuxedo.org/~esr">www.tuxedo.org/~esr</a></p>
    <p>Статьи Эрика Раймона "The Cathedral and the Bazaar" и "HomesteadingNoosphere", в которых описаны психосоциальные основы и смысл движения Open Source.</p>
    <p>[URL 54] The К Desktop Environment</p>
    <p><a l:href="http://www.kde.org/">www.kde.org</a></p>
    <p>Цитата с web-страницы: "KDE представляет собой мощную графическую настольную среду для рабочих станций Unix. KDE является интернет-проектом, открытым в полном смысле этого слова".</p>
    <p>[URL 55] The GNU Image Manipulation Program</p>
    <p><a l:href="http://www.gimp.org/">www.gimp.org</a></p>
    <p>Gimp является бесплатной программой по созданию, композиции и ретушированию изображений.</p>
    <p>[URL 56] The Demeter Project</p>
    <p><a l:href="http://www.ccs.neu.edu/research/demeter">www.ccs.neu.edu/research/demeter</a></p>
    <p>Исследовательский проект, призванный упростить поддержку и развитие программного обеспечения с помощью адаптивного программирования.</p>
    <subtitle>Другие источники</subtitle>
    <p>[URL 57] The GNU Project</p>
    <p><a l:href="http://www.gnu.org/">www.gnu.org</a></p>
    <p>Фонд Free Software Foundation, Boston, MA</p>
    <p>Фонд "Free Software Foundation" – это некоммерческая благотворительная организация, осуществляющая сбор средств на проект GNU. Целью проекта GNU является создание завершенной, бесплатной UNIX-подобной операционной системы. Многие из попутно разработанных инструментальных средств уже стали отраслевыми стандартами.</p>
    <p>[URL 58] Web Server Information</p>
    <p><a l:href="http://www.netcraft.com/survey/servers.html">www.netcraft.com/survey/servers.html</a></p>
    <p>Ссылки на домашние страницы, находящиеся более чем на 50 web-серверах. Часть из них является коммерческими продуктами, другие же распространяются бесплатно.</p>
   </section>
  </section>
  <section>
   <title>
    <p>Библиография</p>
   </title>
   <p>[Bak72] F.T. Baker. Chief programmer team management of production programming. IBM Systems Journal, 1 1(1 ):56—73, 1972.</p>
   <p>[BBM96] V. Basili, L. Brand, and W.L. Melo. A validation of object-oriented design metrics as quality indicators. IEEE Transactions on Software Engineering, 22(10):751-761, October 1996.</p>
   <p>[Ber96] Albert J. Bernstein. Dinosaur Brains: Dealing with All Those Impossible People at Work. Ballantine Books, New York, NY, 1996.</p>
   <p>[Bra95] Marshall Brain. Win32 System Services. Prentice Hall, Englewood Cliffs, NJ, 1995.</p>
   <p>[Bro95] Frederick P. Brooks, Jr.. The Mythical Man Month: Essays on Software Engineering. Addison -Wesley, Reading, MA, anniversary edition, 1995.</p>
   <p>[CG90] N. Carriero and D. Gelenter. How to Write Parallel Programs: A First Course. MIT Press, Cambridge, MA, 1990.</p>
   <p>[CN91] Brad J. Cox and Andrex J. Novobilski. Object-Oriented Programming, An Evolutionary Approach. Addison-Wesley, Reading, MA, 1991.</p>
   <p>[Coc97a] Alistair Cockburn. Goals and use cases. Journal of Object Oriented Programming, 9(7):35-40, September 1997.</p>
   <p>[Coc97b] Alistair Cockburn. Surviving Object-Oriented Projects: A Manager's Guide. Addison Wesley Longman, Reading, MA, 1997.</p>
   <p>[Cop92] James O. Coplien. Advanced С++ Programming Styles and Idioms. Addison-Wesley, Reading, MA, 1992.</p>
   <p>[DL99] Tom Demarco and Timothy Lister. Peopleware: Productive Projects and Teams, Dorset House, New York, NY, second edition, 1999.</p>
   <p>[FBB+99] Martin Fowler, Kent Beck, John Brant, William Opdyke, and Don Roberts. Refactoring: Improving the Design of Existing Code. Addison Wesley Longman, Reading, MA, 1999</p>
   <p>[Fow96] Martin Fowler. Analysis Patterns: Reusable Object Models. Addison Wesley Longman, Reading, MA, 1996.</p>
   <p>[FS97] Martin Fowler and Kendall Scott. UML Distilled: Applying the Standard Object Modeling Language. Addison Wesley Longman, Reading, MA, 1997.</p>
   <p>[GHJV95] Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, Reading, MA, 1995.</p>
   <p>[Gla99a] Robert L. Glass. Inspections – Some surprising findings. Communications of the ACM, 42(4): 17–19, April 1999.</p>
   <p>[Gla99b] Robert L. Glass. The realities of software technology payoffs. Communications of the ACM, 42(2):74–79, February 1999.</p>
   <p>[Hol78] Michael Holt. Math Puzzles and Games, Dorset Press, New York, NY, 1978.</p>
   <p>[Jac94] Ivar Jacobson. Object-Oriented Software Engineering: A Use-Case Driven Approach. Addison-Wesley, Reading, MA, 1994.</p>
   <p>[KLM+97] Gregor Kiczales, John Lamping, AnuragMendhekar, Chris Maeda, Cris-tina Videira Lopes, Jean-Marc Loingtier, and John Irwin. Aspect-oriented programming. In European Conference on Object-Oriented Programming (ECOOP), volume LNCS 1241. Springer-Verlag, June 1997.</p>
   <p>[Knu97a] Donald Ervin Knuth. The Art of Computer Programming: Fundamental Algorithms, volume 1. Addison Wesley Longman, Reading, MA, third edition, 1997.</p>
   <p>[Knu97b] Donald Ervin Knuth. The Art of Computer Programming: Seminumeri-cal Algorithms, volume 2. Addison Wesley Longman, Reading, MA, third edition, 1997.</p>
   <p>[Knu98] Donald Ervin Knuth. The Art of Computer Programming: Sorting and Searching, volume 3. Addison Wesley Longman, Reading, MA, second edition 1998.</p>
   <p>[KP99] Brian W. Kernighan and Rob Pike. The Practice of Programming. Addison Wesley Longman, Reading, MA, 1999.</p>
   <p>[Kru98] Philippe Kruchten. The Rational Unified Process: An Introduction. Addison Wesley Longman, Reading, MA, 1998.</p>
   <p>[Lak96] John Lakos. Large-Scale С++Software Design. Addison Wesley Longman, Reading, MA, 1996.</p>
   <p>[LH89] Karl J. Lieberherr and Ian Holland. Assuring good style for object-oriented programs. IEEE Software, pages 38–48, September 1989.</p>
   <p>[Lis88] Barbara Liskov. Data abstraction and hierarchy. SIGPLAN Notices, 23(5), May 1988.</p>
   <p>[LMB92] John R. Levine, Tony Mason, and Doug Brown. Lex and Yacc. O'Reilly &amp; Associates, Inc., Sebastopol, CA, second edition, 1992.</p>
   <p>[McC95] Jim McCarthy. Dynamics of Software Development. Microsoft Press, Redmond, WA, 1995.</p>
   <p>[Mey96] Scott Meyers. More Effective С++: 35 New Ways to Improve Your Programs and Designs. Addison-Wesley, Reading, MA, 1996.</p>
   <p>[Mey97a] Scott Meyers. Effective С++: 50 Specific Ways to Improve Your Programs and Designs. Addison Wesley Longman, Reading, MA, 1997.</p>
   <p>[Mey97b] Bertrand Meyer. Object-Oriented Software Construction. Prentice Hall, Englewood Cliffs, NJ, second edition, 1997.</p>
   <p>[Pet 98] Charles Petzold. Programming Windows, The Definitive Guide to the Win32 API. Microsoft Press, Redmond, WA, fifth edition, 1998.</p>
   <p>[Sch95] Bruce Schneier. Applied Cryptography: Protocols, Algorithms, and Source Code in C. John Wiley &amp; Sons, New York, NY, 1995.</p>
   <p>[Sed83] Robert Sedgewick. Algorithms. Addison-Wesley, Reading, MA, 1983.</p>
   <p>[Sed 92] Robert Sedgewick. Algorithms in С++. Addison-Wesley, Reading, MA, 1992.</p>
   <p>[SF96] Robert Sedgewick and Phillipc Flajolet. An Introduction to the Analysis of Algorithms. Addison-Wesley, Reading, MA, 1996.</p>
   <p>[Ste92] W. Richard Stevens. Advanced Programming in the Unix Environment. Addison-Wesley, Reading, MA, 1992.</p>
   <p>[Ste98] W. Richard Stevens. Unix Network Programming, Volume I: Networking APIs: Sockets andXti. Prentice Hall, Englewood Cliffs, NJ, 1998.</p>
   <p>[Ste99] W. Richard Stevens. Unix Network Programming, Volume 2: Interprocess Communications. Prentice Hall, Englewood Cliffs, NJ, second edition, 1999.</p>
   <p>[Str35] James Ridley Stroop. Studies of interference in serial verbal reactions. Journal of Experimental Psychology, 18:643–662, 1935.</p>
   <p>[WK82] James Q. Wilson and George Kelling. The police and neighborhood safety. The Atlantic Monthly, 249(3):29–38, March 1982.</p>
   <p>[YC86] Edward Yourdon and Larry L. Constantine. Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design. Prentice Hall, Englewood Cliffs, NJ, second edition, 1986.</p>
   <p>[You95] Edward Yourdon. Managing projects to produce good-enough software. IEEE Software, March 1995.</p>
  </section>
  <section>
   <title>
    <p>Приложение В</p>
    <p>Ответы к упражнениям</p>
   </title>
   <subtitle>Упражнение 1 из раздела "Ортогональность"</subtitle>
   <p>Ответ: По нашему разумению, более ортогональным является класс Split2. Он сосредоточен на собственной задаче – расщеплении строк и игнорирует подробности, связанные с источником обрабатываемых им строк. Это не только упрощает разработку программы, но и придает ей большую гибкость. Класс Split2 может расщеплять строки, считываемые из файла, сгенерированные другой программой или передаваемые через операционную среду.</p>
   <subtitle>Упражнение 2 из раздела "Ортогональность"</subtitle>
   <p>Ответ: Если все сделано корректно, то, по всей вероятности, немодальное. Система, которая использует немодальные диалоговые окна, испытывает меньшее беспокойство о том, что происходит в любой конкретный момент времени. Скорее всего, она будет обладать лучшей инфрастуктурой взаимодействия между модулями по сравнению с модальной системой, которая может содержать встроенные предположения о состоянии системы – предположения, которые могут привести к большему связыванию и уменьшению ортогональности.</p>
   <subtitle>Упражнение 3 из раздела "Ортогональность"</subtitle>
   <p>Ответ: Здесь есть элемент лукавства. Объектная технология может обеспечить наличие более ортогональной системы, но поскольку она имеет больше средств, которые могут эксплуатироваться с нарушением режима, в реальности легче создать неортогональную систему, используя объекты, чем создавать ее при помощи процедурного языка. Ее особенности – множественное наследование, исключительные ситуации, перегрузка операторов и переопределение родительского метода (через механизм подклассов) – предоставляют достаточные возможности для увеличения связанности не столь очевидными способами.</p>
   <p>Применяя объектную технологию и приложив небольшое дополнительное усилие, вы можете добиться наличия более ортогональной системы. И хотя вы всегда можете написать неструктурированную программу на процедурном языке, объектно-ориентированные языки, используемые в малых дозах, могут сделать ее более насыщенной.</p>
   <subtitle>Упражнение 4 из раздела "Прототипы и памятные записки"</subtitle>
   <p>Ответ: Для спасения ситуации прибегнем к устаревшим технологиям! Нарисуйте на лекционной доске несколько картинок – автомобиль, телефон и дом – с помощью фломастера. Для этого не нужно быть великим художником, вполне достаточно условных изображений. Поместите на доску памятные записки, описывающие содержимое целевых страниц в активных областях экрана. В ходе встречи вы можете совершенствовать рисунки и менять расположение памятных записок.</p>
   <subtitle>Упражнение 5 из раздела "Языки, отражающие специфику предметной области"</subtitle>
   <p>Ответ: Поскольку мы хотим, чтобы язык был расширяемым, сделаем таблицу синтаксического анализатора управляемой. Каждый элемент таблицы содержит символ команды, флаг, говорящий о необходимости аргумента, и имя подпрограммы, вызываемой для обработки этой конкретной команды.</p>
   <p>typedef struct {</p>
   <p>char cmd; /* the command letter */</p>
   <p>int hasArg; /* does it take an argument */</p>
   <p>void (*func)(int, int); /* routine to call */</p>
   <p>} Command;</p>
   <p>static Command cmds[] = {</p>
   <p>{'P', ARG, doSelectPen},</p>
   <p>('V', NO_ARG, doPenUp},</p>
   <p>{'D', NO_ARG, doPenDown},</p>
   <p>{'N,' ARG, doPenDir},</p>
   <p>{'E', ARG, doPenDir},</p>
   <p>{'S', ARG, doPenDir},</p>
   <p>{'W', ARG, doPenDir}</p>
   <p>};</p>
   <p>Основная программа довольно проста: считать строку, отыскать команду, при необходимости принять аргумент, затем вызвать функцию обработчика.</p>
   <p>while (fgetsfbuff, sizeof(buff), stdin)) {</p>
   <p>Command *cmd = findCommand(*buff);</p>
   <p>if (cmd) {</p>
   <p>  int arg = 0;</p>
   <p>  if (cmd-&gt;hasAr&amp;&amp; !getArg(buff+1, &amp;arg)) {</p>
   <p>     fprintf(stderr,"'%с' needs an argument\n", *buff);</p>
   <p>     continue;</p>
   <p>  }</p>
   <p>cmd-&gt;func(*buff, arg);</p>
   <p>}</p>
   <p>}</p>
   <p>Функция, которая ищет команду, исполняет последовательный перебор таблицы, возвращая либо совпадающий элемент, либо NULL.</p>
   <p>Command *findCommand(int cmd) {</p>
   <p>int i;</p>
   <p>for (i = 0; i&lt;ARRAY.SIZE(cmds); i++) {</p>
   <p>  if (cmds[i].cmd==cmd)</p>
   <p>    return cmds + i;</p>
   <p>  }</p>
   <p>fprintf(stderr, "Unknown command %c'\n", cmd);</p>
   <p>return 0;</p>
   <p>}</p>
   <p>И наконец, считывание числового аргумента довольно просто, если использовать подпрограмму sscanf.</p>
   <p>int getArg(const char *buff, int 'result) {</p>
   <p>   return sscanf(buff, "%d", result) == 1;</p>
   <p>}</p>
   <subtitle>Упражнение 6 из раздела "Языки, отражающие специфику предметной области"</subtitle>
   <p>Ответ 6: При использовании BNF спецификация времени могла бы выглядеть следующим образом:</p>
   <p>&lt;tlme&gt;::= &lt;hour&gt; &lt;ampm&gt; |</p>
   <p>        &lt;hour&gt;: &lt;minute&gt; &lt;ampm&gt; |</p>
   <p>        &lt;hour&gt;: &lt;minute&gt;</p>
   <p>&lt;ampm&gt;::= am|pm</p>
   <p>&lt;hour&gt;::=&lt;digit&gt; |</p>
   <p>        &lt;digit&gt;::=&lt;digit&gt;</p>
   <p>&lt;mlnute&gt;::=&lt;digit&gt;&lt;digit&gt;</p>
   <p>&lt;digit&gt;::= 0|1|2|3|4|5|6|7|8|9</p>
   <subtitle>Упражнение 7 из раздела "Языки, отражающие специфику предметной области"</subtitle>
   <p>Ответ: В нашем примере мы составили программу, используя генератор bison, который представляет собой GNU-версию генератора уасс. Для ясности здесь показано только тело программы синтаксического анализатора. Полная версия есть на сайте www.pragmaticprogrammmer.com.</p>
   <p>time: spec EOF</p>
   <p>{ if ($1&gt;= 24*60) yyerror("Time is too large");</p>
   <p>   printf("%d minutes past midnight\n", $1);</p>
   <p>   exit(0);</p>
   <p>}</p>
   <p>;</p>
   <p>spec:  hour ':' minute</p>
   <p>    { $$ = $1 + $3;</p>
   <p>    }</p>
   <p>  | hour ':' minute ampm</p>
   <p>{ if ($1&gt;11*60) yyerrorf "Hour out of range");</p>
   <p>   $$ = $1 + $3 + $4;</p>
   <p>}</p>
   <p>| hour ampm</p>
   <p>  {if ($1&gt;11*60) yyerror("Hour out of range");</p>
   <p>    $$ = $1 + $2;</p>
   <p>   }</p>
   <p>;</p>
   <p>hour: hour_num</p>
   <p>    {if ($1&gt;23) yyerror("Hour out of range");</p>
   <p>     $$ = $1 * 60;</p>
   <p>    };</p>
   <p>minute: DIGIT DIGIT</p>
   <p>     {$$ = $1*10 + $2;</p>
   <p>     if ($$&gt; 59) yyerrorf "minute out of range") ,</p>
   <p>     };</p>
   <p>ampm: AM {$$ = AM_MINS;}</p>
   <p>    |      PM {$$ = PM_MINS;)</p>
   <p>    ;</p>
   <p>hour num:  DIGIT {$$ = $1;)</p>
   <p>    | DIGIT DIGIT {$$ = $1*10 + $2;}</p>
   <p>    ;</p>
   <subtitle>Упражнение 8 из раздела "Языки, отражающие специфику предметной области"</subtitle>
   <p>Ответ:</p>
   <p>$_ = shift;</p>
   <p>/"(\d\d?)(am|pm)$/ &amp;&amp; doTime($1, 0, $2, 12);</p>
   <p>/"(\d\d?):(\d\d)(am|pm)$/ &amp;&amp; doTime($1, $2, $3, 12);</p>
   <p>/"(\d\d?):(\d\d)$/ &amp;&amp; doTime($1, $2, 0, 24);</p>
   <p>die "Invalid time $_\n";</p>
   <p>#</p>
   <p># doTime(hour, min, ampm, maxHour)</p>
   <p>#</p>
   <p>sub doTime($$$$) {</p>
   <p>my ($hour, $min, $offset, $maxHour) = @_;</p>
   <p>die "Invalid hour: $hour" if ($hour&gt;= $maxHour);</p>
   <p>$hour += 12 if ($offset eq "pm")</p>
   <p>print $hour*60 + $min, " minutes past midnight\n";</p>
   <p>exit(0);</p>
   <p>}</p>
   <subtitle>Упражнение 9: из раздела "Оценка"</subtitle>
   <p>Ответ: Ответ должен быть изложен, исходя из нескольких допущений:</p>
   <p>• Лента содержит информацию, которую необходимо передать.</p>
   <p>• Известна скорость ходьбы человека.</p>
   <p>• Известно расстояние между компьютерами.</p>
   <p>• Временем, необходимым для переноса информации на ленту и с ленты, можно пренебречь.</p>
   <p>• Потери данных при хранении на ленте примерно равны их потерям при передаче по каналу связи.</p>
   <subtitle>Упражнение 10 из раздела "Оценка"</subtitle>
   <p>Ответ: Учитывая допущения ответа 9: Объем информации, содержащейся на стриммерной кассете (4 Гбайт), составляет 32 х 10^9 бит, так что передача эквивалентного объема по каналу со скоростью 1 Мбайт/с заняла бы около 32000 сек. (примерно 9 ч). Если человек движется с постоянной скоростью 3,5 мили в час, то, для того чтобы канал связи превзошел курьера, два компьютера должны располагаться друг от друга на расстоянии не менее 31 мили. Если это расстояние меньше, то победа остается за человеком.</p>
   <subtitle>Упражнение 11 из раздела "Обработка текста"</subtitle>
   <p>Ответ: Ответ к данному упражнению составлен на языке Perl.</p>
   <p>my @consts;</p>
   <p>my $name = &lt;&gt;;</p>
   <p>die "Invalid format – missing name" unless defined($name);</p>
   <p>chomp $name;</p>
   <p># Read in the rest of the file</p>
   <p>while (&lt;&gt;) {</p>
   <p>  chomp;</p>
   <p>  s/"\s*//; s/\s*$//;</p>
   <p>  die "Invalid line: $_" unless /"(\w+)$/;</p>
   <p>  push @consts, $_;</p>
   <p>}</p>
   <p># Now generate the file</p>
   <p>open(HDR, "&gt;$name.h") or die "Can't open $name.h: $!";</p>
   <p>open(SRC, "&gt;$name.c") or die "Can't open $name.c: $!";</p>
   <p>my $uc_name = uc($name);</p>
   <p>print HDR "/* File generated automatically – do not edit */\n"; </p>
   <p>print HDR "extern const char *$ {ucjiame)_name[];";</p>
   <p>print HDR "typedef enum {\n"; print HDR join",\n", @consts; </p>
   <p>print HDR "\n) $uc_name;\n\n";</p>
   <p>print SRC "* File generated automatically – do not edit */\n";</p>
   <p>print SRC "const char *$ {uc name}_name[] = {\n \""; </p>
   <p>print SRC join "\",\n \"", @consts;</p>
   <p>print SRC "\"\n};\n";</p>
   <p>close(SRC);</p>
   <p>close(HDR);</p>
   <p>Используя принцип DRY, мы не будет вырезать и вклеивать этот вновь написанный файл в нашу программу. Вместо этого мы «включим» его – данный плоский файл является главным источником этих констант. Поэтому нам понадобится файл сборки для восстановления заголовка при изменении файла. Следующий фрагмент содержится в системе отладки в исходном дереве (имеется на web-сайте).</p>
   <p>etest.c etest.h: etest.inc enumerated.pl</p>
   <p>               perl enumerated.pl etest.inc</p>
   <empty-line/>
   <subtitle>Упражнение 12 из раздела "Обработка текста"</subtitle>
   <p>Ответ: Вот ответ, написанный на языке Perl.</p>
   <p>my $dir = shift or die "Missing directory" ,</p>
   <p>for my Sfile (glob(u$dir/*.pr)) {</p>
   <p>open(IP, "$file") or die "Opening $file: $!";</p>
   <p>undef $/; # Turn off input record separator -</p>
   <p>my Scontent = &lt;IP&gt;; # read whole file as one string.</p>
   <p>close(IP);</p>
   <p>if (Scontent Гrusestrict/m) {</p>
   <p>rename Sfile, "$file.bak" or die "Renaming $file: $!"; open(OP, "&gt;$file") or die "Creating $file: $!";</p>
   <p># Put 'use strict' on first line that</p>
   <p># doesn't start #</p>
   <p>Scontent =" sr(V.#)/\nuse strict;\n\n/m',</p>
   <p>print OP Scontent; close(OP);</p>
   <p>print "Updated $file\n";</p>
   <p>)</p>
   <p>else {</p>
   <p>print "Sfile already strict\n":</p>
   <p>)</p>
   <p>}</p>
   <subtitle>Упражнение 13 из раздела "Генераторы исходных текстов"</subtitle>
   <p>Ответ: Решение реализовано на языке Perl. В программе происходит динамическая загрузка модуля для генерации требуемого языка, так что добавление новых языков не представляет труда. Главная программа загружает внутреннюю часть (основанную на параметре командной строки), затем считывает ее входные данные и вызывает подпрограммы генерации текста, основанные на содержимом каждой из строк. Мы особенно не суетимся, если речь идет об обработке ошибок: если что-то не так, узнаем об этом довольно быстро.</p>
   <p>my lang = shift or die "Missing language";</p>
   <p>$lang .= "_cg.pm";</p>
   <p>require &lt;$lang&gt; or die "Couldn't load $lang";</p>
   <p># Read and parse the file</p>
   <p>my $name;</p>
   <p>while (&lt;&gt;) {</p>
   <p>  chomp;</p>
   <p>if (/^ \s*$/)   {CG::blankLine();)</p>
   <p>elsif ((/^ \#(.*)/)   {CG::comment($1);}</p>
   <p>elsif ((/^M\s*(.+)/)   {CG::startMsg($1); $name = $1;}</p>
   <p>elsif ((/^E/)    {CG::endMsg($name);}</p>
   <p>elsif (/^F\s*(\w+)\s+(\w+)$/) {CG::simpleType($1,$2);}</p>
   <p>elsif (/^F\s*(\w+)\s+(\w+)\[(\d+)\]$/) {CG::arrayType $1,$2,$3);}</p>
   <p>else {</p>
   <p>die "Invalid line: $ ";</p>
   <p>}</p>
   <p>}</p>
   <p>Написание языковой серверной части не составит труда: создайте модуль, который реализует шесть точек входа. Вот генератор текста на языке С:</p>
   <p>#!/usr/bin/perl – w</p>
   <p>package CG;</p>
   <p>use strict;</p>
   <p># Code generator for 'C' (see cg_base.pl)</p>
   <p>sub blankLine()  {print "\n"; } </p>
   <p>sub comment()  {print "/*$_[0] */\n"; } </p>
   <p>sub startMsg()   {print "typedef struct {\n"; } </p>
   <p>sub endMsg()    {print "} $_[0];\n\n"; }</p>
   <p>sub arrayType() {</p>
   <p>  my ($name, $type, $size) = @_;</p>
   <p>  print " $type $name\[$size];\n":</p>
   <p>}</p>
   <p>sub simpleType{) {</p>
   <p>  my ($name, $type) = @_;</p>
   <p>  print " $type $пате;\п";</p>
   <p>}</p>
   <p>1;</p>
   <empty-line/>
   <p>А вот генератор текста на языке Pascal:</p>
   <p>#!/usr/bin/perl – w</p>
   <p>package CG;</p>
   <p>use strict;</p>
   <p># Code generator for 'Pascal' (see cg_base.pl)</p>
   <p>sub blankLine() {print "V;)</p>
   <p>sub comment() {print "{$_[0] }\n";)</p>
   <p>sub startMsg()  {print "$_[0] = packed record\n"; }</p>
   <p>sub endMsg()   {print "end;\n\n"; }</p>
   <p>sub arrayType() {</p>
   <p>  my ($name, $type, $size) = @_;</p>
   <p>  $size--;</p>
   <p>  print" $name: array[0…$size] of $type;\n";</p>
   <p>)</p>
   <p>sub simpleType() {</p>
   <p>  my ($name, $type) = @_;</p>
   <p>  print" $name: $type;\n7 ',</p>
   <p>}</p>
   <p>1;</p>
   <empty-line/>
   <subtitle>Упражнение 14 из раздела "Проектирование по контракту"</subtitle>
   <p>Ответ: Этот пример на языке Eiffel удачен. Мы требуем передачи непустых данных и гарантируем, что семантика циклического двунаправленного списка будет соблюдена. Это также способствует нахождению сохраненной строки. Поскольку это некий отложенный класс, то действительный класс, его реализующий, допускает использование любого основного механизма по своему усмотрению. Он может использовать указатели или массив, или что-то еще; пока он соблюдает контракт, мы не беспокоимся.</p>
   <subtitle>Упражнение 15 из раздела "Проектирование по контракту"</subtitle>
   <p>Ответ: Это неудачно. Математическое действие в индексном выражении (index-1) не будет работать с граничными условиями, подобными первой точке входа. Постусловие предполагает определенную реализацию; контракты должны быть более абстрактными по сравнению с указанным выше.</p>
   <subtitle>Упражнение 16 из раздела "Проектирование по контракту"</subtitle>
   <p>Ответ 16: Это удачный контракт, но неудачная реализация. Здесь высовывает свою уродливую голову ошибка типа "Heisenbug" [URL52]. Вероятно, программист допустил опечатку – набрал pop вместо top. Хотя это простой и надуманный пример, весьма трудно диагностировать побочные эффекты в утверждениях (или в любом, самом неожиданном месте в программе).</p>
   <subtitle>Упражнение 17 из раздела "Проектирование по контракту"</subtitle>
   <p>Ответ: Мы продемонстрируем функциональные сигнатуры на языке Java, обозначая предусловия и постусловия в соответствии с iContract. Сначала инвариант для класса:</p>
   <p>/**</p>
   <p>* @invariant getSpeed() &gt;0</p>
   <p>* implies isFull() // Не запускать пустое</p>
   <p>* @invariant getSpeed()&gt;=0 &amp;&amp;</p>
   <p>* getSpeed() &lt;10 // Проверка границ</p>
   <p>*/</p>
   <p>Затем предусловия и постусловия:</p>
   <p>/**</p>
   <p>* @pre Math.abs(getSpeed() – х) &lt;= 1 // Единственный выбор</p>
   <p>* @рге х&gt;= 0 &amp;&amp;  х &gt; 10  // Проверка границ</p>
   <p>* @post getSpeed() == х    // Проверка скорости</p>
   <p>*/</p>
   <p>public void setSpeed (final int x)</p>
   <p>/**</p>
   <p>* @pre !isFull()  // Heзаполнять дважды</p>
   <p>* @post isFull() // Убедитесь, что было выполнено</p>
   <p>*/</p>
   <p>void fill()</p>
   <p>/**</p>
   <p>* @pre isFull()    // He очищатьдважды</p>
   <p>* @post !isFull() // Убедиться, что выполнено</p>
   <p>*/</p>
   <p>void empty()</p>
   <empty-line/>
   <subtitle>Упражнение 18 из раздела "Проектирование по контракту"</subtitle>
   <p>Ответ: В этом ряду содержится 21 число. Если вы ответили «20», то допустили так называемую ошибку "поста охраны".</p>
   <subtitle>Упражнение 19 из раздела "Программирование утверждений"</subtitle>
   <p>Ответ:</p>
   <p>1. В сентябре 1752 г. было всего лишь 19 дней. Это было сделано с целью синхронизации при переходе с юлианского на григорианский календарь.</p>
   <p>2. Каталог мог быть удален другим процессом, у вас нет прав доступа на его чтение, выражение &amp;sb может быть недопустимым – вы все уловили.</p>
   <p>3. Мы проявили малодушие, не указав типов а и b. Во время перегрузки операторов могло случиться так, что поведение знаков +, =, или != стало непредсказуемым. Кроме того, а и b могут быть псевдонимами одной и той же переменной, так что при втором присвоении произойдет перезапись значения, сохраненного во время первого.</p>
   <p>4. В неевклидовой геометрии сумма углов треугольника не будет составлять 180°. Подумайте о треугольнике, отображаемом на поверхности сферы.</p>
   <p>5. Минуты, приходящиеся на високосный год, могут состоять из 61 или 62 секунд.</p>
   <p>6. Переполнение может оставить результат операции а+1 отрицательным (это также может произойти в языках С и С++).</p>
   <subtitle>Упражнение 20 из раздела "Программирование утверждений"</subtitle>
   <p>Ответ: Мы решили реализовать очень простой класс с единственным статическим методом TEST, который выводит на печать сообщение и след стека, если переданный параметр condition является ложным.</p>
   <p>package com.pragprog.util;</p>
   <p>import java.lang.System; //для exit()</p>
   <p>import java.lang.Thread; //для dumpStack()</p>
   <p>public class Assert {</p>
   <p>/** Write a message, print a stack trace and exit if</p>
   <p>   * our parameter is false.</p>
   <p>   */</p>
   <p>public static void TEST(boolean condition) {</p>
   <p>  if (Icondition) {</p>
   <p>    System.out.println("==Assertion Failed==");</p>
   <p>    Thread.dumpStack();</p>
   <p>     System.exit(1);</p>
   <p>   }</p>
   <p>}</p>
   <p>// Testbed. If our argument is 'okay', try an assertion that</p>
   <p>// succeeds, if 'fail' try one that fails</p>
   <p>public static final void main(String args[]) {</p>
   <p>if (args[0].compareTo("okay") == 0) {</p>
   <p>   TEST(1 == 1);</p>
   <p>}</p>
   <p>else if (args[0].compareTo("fail") == 0) {</p>
   <p>   TEST(1 == 2);</p>
   <p>}</p>
   <p>else {</p>
   <p>  throw new RuntimeException("Bad argument") ,</p>
   <p>  }</p>
   <p> }</p>
   <p>}</p>
   <subtitle>Упражнение 21 из раздела "Случаи, когда используются исключения"</subtitle>
   <p>Ответ: Нехватка памяти является исключительным состоянием, поэтому мы полагаем, что в случае (1) должно возбуждаться исключение.</p>
   <p>Невозможность отыскания точки входа – вполне нормальная ситуация. Приложение, которое вызывает наш класс-набор, может написать программу, которая проверяет наличие точки входа, перед тем как добавить потенциальный дубликат. Мы полагаем, что в случае (2) нужно просто осуществить возврат ошибки.</p>
   <p>Случай (3) более проблематичен – если указатель null играет существенную роль в приложении, его добавление к контейнеру может быть оправдано. Но если для хранения пустых значений нет веских оснований, то, по всей вероятности, необходимо возбудить исключительную ситуацию.</p>
   <subtitle>Упражнение 22 из раздела "Балансировка ресурсов"</subtitle>
   <p>Ответ: В большинстве реализаций языков С и С++ отсутствуют способы проверки того, что указатель действительно указывает на допустимый блок памяти. Обычная ошибка состоит в освобождении блока памяти и организации ссылки на этот блок далее в тексте программы. К тому времени этот блок памяти уже может быть перераспределен для других целей. Обнуляя указатель, программисты надеются предотвращать эти инородные ссылки – в большинстве случаев разыменование указателя null генерирует ошибку в ходе выполнения программы.</p>
   <subtitle>Упражнение 23 из раздела "Балансировка ресурсов"</subtitle>
   <p>Ответ: Обнуляя ссылку, вы уменьшаете число указателей на упомянутый объект на единицу. Как только этот счетчик становится равным нулю, объект получает право на сбор «мусора». Обнуление ссылок может играть существенную роль в продолжительных по времени программах, где программистам приходиться удостоверяться, что использование памяти со временем не возрастает.</p>
   <subtitle>Упражнение 24 из раздела "Несвязанность и закон Деметера"</subtitle>
   <p>Ответ: Файл заголовка предназначен для определения интерфейса между соответствующей реализацией и внешним миром. Сам по себе файл заголовка не обязан обладать информацией о внутренней организации класса Date – от него лишь требуется сообщить компилятору о том, что конструктор принимает класс Date в качестве параметра. Поэтому, если файл заголовка не использует Dates в подставляемых функциях, второй фрагмент будет работать просто замечательно.</p>
   <p>А что же с первым фрагментом? Если он используется в небольшом проекте, то все нормально, за исключением того, что вы без особой надобности заставляете все элементы программы, которые используют класс Person1, также включать файл заголовка для класса Date. Как только подобное употребление становится обычной практикой в неком проекте, вскоре обнаружите, что включение одного файла заголовка заканчивается включением большей части системы, что существенно увеличивает время компиляции.</p>
   <subtitle>Упражнение 25 из раздела "Несвязанность и закон Деметера"</subtitle>
   <p>Ответ: Переменная acct передается в виде параметра, так что вызов getBalance является допустимым. Вызов amt.printFormat() таковым не является. Мы не «владеем» amt, и он не был передан нам. Мы могли устранить связывание showBalance с Money при помощи вставки, подобной представленной ниже:</p>
   <p>void showBalance(BankAccount b) {</p>
   <p>    b.printBalance();</p>
   <p>}</p>
   <subtitle>Упражнение 26 из раздела "Несвязанность и закон Деметера"</subtitle>
   <p>Ответ: Поскольку класс Colada создает и владеет myBlender и myStuff, то обращения к addlngredients и elements являются допустимыми.</p>
   <subtitle>Упражнение 27 из раздела "Несвязанность и закон Деметера"</subtitle>
   <p>Ответ: В этом случае processTransaction владеет amt – он создается на стеке. Происходит передача acct, поэтому допустимыми являются как setValue, так и setBalance. Но processTransaction не владеет who, поэтому вызов who-&gt;name() является нарушением. Закон Деметера предлагает заменить эту строку на следующую:</p>
   <p>markWorkflow(acct.name (), SET_BALANCE);</p>
   <p>Программе в processTransaction не придется узнавать, какой дочерний объект в пределах BankAccount носит это имя – эта информация о структуре не должна разглашаться через контракт BankAccount. Вместо этого мы запрашиваем у BankAccount имя на счете. Он знает, где хранится имя (может быть, в объекте Person, в объекте Business, или в полиморфном объекте Customer).</p>
   <subtitle>Упражнение 28 из раздела "Метапрограммирование"</subtitle>
   <p>Ответ: Здесь не приводятся категорические ответы – вопросы предназначались в основном для того, чтобы дать вам пищу для размышлений. И вот что мы думаем:</p>
   <p>1. Назначения коммуникационного порта. Ясно, что эта информация должна сохраняться в виде метаданных. Но на каком уровне детализации? Некоторые коммуникационные программы системы Windows позволяют выбирать только скорость в бодах и порт (скажем, СОМ1 – COM4). Но вероятно вам придется указать размер слова, четность, стоповые биты, и настройку дуплексной связи. Старайтесь допускать самый мелкий уровень детализации, там где это разумно с практической точки зрения.</p>
   <p>2. Поддержка выделения синтаксических конструкций различных языков в программе редактирования. Она должна быть реализована в виде метаданных. Вы же не хотите, чтобы вам пришлось переделывать программу только потому, что в последней версии языка Java было введено новое ключевое слово.</p>
   <p>3. Поддержка редактора для различных графических устройств. Эту поддержку было бы трудно реализовать исключительно в виде метаданных. Вам не хотелось бы нагружать приложение многими драйверами устройств только для того, чтобы выбрать один из них во время выполнения программы. Однако вы могли воспользоваться метаданными для указания имени драйвера и динамической загрузки программы. Это еще один аргумент для сохранении метаданных в удобочитаемом формате; если вы используете программу для установки дисфункционального видеодрайвера, то вы не сможете переустановить его, пользуясь этой программой.</p>
   <p>4. Конечный автомат для программы синтаксического анализа или сканера.</p>
   <p>Это зависит от того, анализируете вы или просматриваете. Если анализируете некоторые данные, которые жестко определены в стандартах и скорее всего не будут изменены без одобрения конгресса США, то жесткое кодирование вполне годится. Но если вы сталкиваетесь с более изменчивой ситуацией, то может быть, более выгодным является внешнее определение таблиц состояний.</p>
   <p>5. Типовые значения и результаты, используемые в модульном тестировании.</p>
   <p>Большинство приложений определяет эти значения как встроенные в тестовый стенд, но вы можете добиться большей гибкости, перемещая тестовые данные и определение приемлемых результатов за пределы самой программы.</p>
   <subtitle>Упражнение 29 из раздела "Всего лишь представление"</subtitle>
   <p>Ответ: В программу Flight мы добавим ряд дополнительных методов душ поддержания двух списков «слушателей»: для уведомления о листе ожидания и о полной загрузке рейса.</p>
   <p>public interface Passenger {</p>
   <p>  public void waitListAvailable();</p>
   <p>}</p>
   <p>public interface Flight {</p>
   <p>...</p>
   <p>  public void addWaitListListener(Passenger p);</p>
   <p>  public void removeWaitUstUstener(Passenger p);</p>
   <p>  public void addFullListener(FullListener b);</p>
   <p>  public void removeFullListener(FullListener b);</p>
   <p>...</p>
   <p>}</p>
   <p>public interface BigReport extends FullListener {</p>
   <p>  public void FlightFullAlert(Flight f);</p>
   <p>}</p>
   <p>При неудачной попытке добавить Passenger, поскольку рейс полностью забронирован, мы можем (как вариант) поместить Passenger в лист ожидания. При открытии вакансии производится вызов метода waitListAvailable. Затем этот метод может осуществить выбор: либо добавить Passenger автоматически, либо дать указание сотруднику авиакомпании позвонить заказчику и выяснить, заинтересован ли он еще в рейсе, и т. п. Теперь мы обладаем достаточной гибкостью, чтобы избрать линию поведения, исходя из пожеланий клиента.</p>
   <p>Кроме того, мы хотим избежать ситуаций, при которых BigReport разбирает тонны записей, отыскивая полностью забронированные рейсы. Зарегистрировав BigReport в качестве «слушателя» Flights, каждый индивидуальный Flight может сообщать, когда он полностью (или почти полностью) забронирован. Теперь пользователи могут мгновенно получить оперативные, с точностью до минуты, сообщения из BigReport, а не ожидать часами окончания его работы, как это было раньше.</p>
   <subtitle>Упражнение 30 из раздела "Доски объявлений"</subtitle>
   <p> Ответ:</p>
   <p>1. <strong>Обработка изображения.</strong> Для простого распределения рабочей нагрузки между параллельными процессами более чем адекватной может оказаться общедоступная очередь работ. Вы можете рассмотреть систему "доска объявлений" при наличии обратной связи, т. е. если результаты обработки одного фрагмента изображения влияют на другие фрагменты так, как это происходит в системах искусственного зрения или сложных трехмерных преобразованиях изображений.</p>
   <p>2. <strong>Календарное планирование для групп.</strong> Для этого "доска объявлений" очень даже пригодится. Вы можете поместить назначенные собрания и готовность на "доску объявлений". Есть объекты, функционирующие автономно; в данном случае очень важна обратная связь, а участники могут приходить и уходить.</p>
   <p>Можно рассмотреть возможность разделения "доски объявлений" в зависимости от того, кто осуществляет поиск: младший персонал может заботиться только о локальном офисе, отдел кадров интересоваться только англо-говорящими офисами во всем мире, а исполнительный директор – всем сразу.</p>
   <p>В форматах данных имеется некий элемент гибкости: мы можем проигнорировать форматы или языки, которых не понимаем. Нам придется понимать различные форматы только для тех офисов, которые встречаются друг с другом, и не придется подвергать всех участников полному транзитивному замыканию всевозможных форматов. При этом связанность уменьшается там, где нужно, и мы не имеем искусственных ограничений.</p>
   <p>3. <strong>Средство мониторинга компьютерной сети.</strong> Это весьма сходно с программой обработки заявлений на ипотечный кредит/ссуду, описанной в примере приложения (с. 153). На доску помещаются сообщения о неисправностях, присылаемые пользователями, и автоматические генерируемые статистические данные. Сотрудник (или программный агент) может анализировать "доску объявлений", чтобы осуществлять диагностику неисправностей в сети: две ошибки в линии могут быть отнесены на счет космических лучей, но 20000 ошибок говорят о проблеме в аппаратном обеспечении. Подобно детективам, разгадывающим тайну убийства, вы можете использовать множественные объекты, анализируя и внося свою лепту в решение проблем, связанных с компьютерной сетью.</p>
   <subtitle>Упражнение 31 из раздела "Программирование в расчете на стечение обстоятельств"</subtitle>
   <p>Ответ: Эта программа представляет ряд потенциальных проблем. Во-первых, она предлагает наличие текстовой среды. Это, может быть, и прекрасно, если предположение истинно, но что, если эта программа вызывается из графической среды, где не открыты ни stderr, ни stdin?</p>
   <p>Во-вторых, есть проблематичный оператор gets, который будет записывать столько символов, сколько он получит в переданный буфер. Злонамеренные пользователи использовали это, когда им не удавалось проделать бреши типа buffer overrun в защите многих различных систем. Никогда не пользуйтесь gets().</p>
   <p>В-третьих, программа предполагает, что пользователь понимает английский язык.</p>
   <p>И наконец, никто, находясь в здравом уме, не станет прятать средство взаимодействия с пользователем в недра библиотечной подпрограммы.</p>
   <subtitle>Упражнение 32 из раздела "Программирование в расчете на стечение обстоятельств"</subtitle>
   <p>Ответ: Работа программы strcpy в системе POSIX не гарантируется при наличии перекрывающихся строк. С некоторыми архитектурами она, случается, и работает, но лишь при стечении определенных обстоятельств.</p>
   <subtitle>Упражнение 33 из раздела "Программирование в расчете на стечение обстоятельств"</subtitle>
   <p>Ответ: Она не будет работать в контексте апплета при наличии ограничений доступа по записи на локальный диск. Если вы можете выбирать, работать ли через графический интерфейс или нет, то, вероятно, захотите осуществить динамический анализ текущей среды. В этом случае вы наверняка захотите поместить файл журнала вне локального диска, если к нему нет доступа.</p>
   <subtitle>Упражнение 34 из раздела "Скорость алгоритма"</subtitle>
   <p>Ответ: Ясно, что мы не можем давать никаких абсолютных ответов к этому упражнению. Однако можем дать вам пару намеков.</p>
   <p>Если ваши результаты не ложатся на гладкую кривую, то вы захотите проверить, не используется ли мощность вашего процессора каким-либо другим процессом. По всей вероятности, вы не получите хороших показателей в многопользовательской системе, и даже если окажетесь единственным пользователем, можете заметить, что фоновые процессы периодически отбирают циклы у ваших программ. Вы также можете захотеть проверить использование памяти: если приложение начинает использовать область свопинга, то производительность резко снижается.</p>
   <p>Интересно поэкспериментировать с различными компиляторами и установочными параметрами оптимизации. Мы обнаружили, что весьма впечатляющее ускорение стало возможно, благодаря использованию агрессивной оптимизации. Мы также обнаружили, что на более распространенных архитектурах типа RISC компиляторы фирмы изготовителя часто превосходили по быстродействию более переносимую GCC. Возможно, изготовитель посвящен в тайны эффективной генерации программ на этих машинах.</p>
   <subtitle>Упражнение 35 из раздела "Скорость алгоритма"</subtitle>
   <p>Ответ: Программа printTree использует приблизительно 1000 байт стекового пространства для буферной переменной. Для движения вниз по древовидной схеме она рекурсивно вызывает саму себя, и каждый вложенный вызов добавляет еще 1000 байт к стеку. Она также вызывает саму себя, когда добирается до вершин, но заканчивает работу сразу, как только обнаружит, что переданный указатель обнулен. Если глубина дерева равна D, то максимальный объем, необходимый стеку, составляет (грубо) 1000 x(D+ 1).</p>
   <p>Сбалансированное двоичное дерево содержит вдвое больше элементов на каждом уровне. Дерево глубиной D содержит 1+2+4+8 +… +2^(D-1), или 2^D – 1 элементов. Следовательно, дереву, состоящему из миллиона элементов, будет необходимо [lg(1000001], или 20 уровней.</p>
   <p>Поэтому мы рассчитываем, что наша подпрограмма будет использовать примерно 21000 байт стекового пространства.</p>
   <subtitle>Упражнение 36 из раздела "Скорость алгоритма"</subtitle>
   <p>Ответ: На ум приходит несколько процедур оптимизации. Программа printTree вызывает саму себя на вершинах дерева лишь для того, чтобы закончить работу при отсутствии потомков. Этот вызов увеличивает максимальную глубину стека примерно на 1000 байт. Можно также исключить рекурсию хвоста (второй рекурсивный вызов), хотя это и не будет затрагивать использование стека в наихудшем случае.</p>
   <p>while (node) {</p>
   <p>  if (node-&gt;left) printTree(node-&gt;left);</p>
   <p>  getNodeAsString(node, buffer);</p>
   <p>  puts(buffer);</p>
   <p>  node = node-&gt;right;</p>
   <p>}</p>
   <p>Но самая большая выгода возникает при назначении одного-единственного буфера, доступ к которому осуществляется при всех обращениях к printTree. Если передать этот буфер в виде параметра для рекурсивных обращений, то будет назначено всего 1000 байт вне зависимости от глубины рекурсии.</p>
   <p>void printTreePrivate(const Node *node, char *buffer) {</p>
   <p>  if (node) {</p>
   <p>    printTreePrivate(node-&gt;!eft, buffer);</p>
   <p>    getNodeAsStringfnode, buffer);</p>
   <p>    puts(buffer);</p>
   <p>    printTreePrivate(node-&gt;right, buffer);</p>
   <p>  }</p>
   <p>}</p>
   <p>void newPrintTree(const Node *node) {</p>
   <p>  char buffer[1000];</p>
   <p>  printTreePrivate(node, buffer);</p>
   <p>)</p>
   <subtitle>Упражнение 37 из раздела "Скорость алгоритма"</subtitle>
   <p>Ответ: Это можно сделать двумя путями. Один из них заключается в том, чтобы перевернуть проблему с ног на голову. Если в массиве есть лишь один элемент, мы не осуществляем итерации в цикле. Каждая дополнительная итерация удваивает размер массива, в котором можно осуществлять поиск. Отсюда общая формула размера массива: n = 2^m, где m – число итераций. Если прологарифмировать обе части с основанием 2, получим выражение lg(n) = lg(2^m), которое из определения логарифма превращается в lg(n) =m.</p>
   <subtitle>Упражнение 38 из раздела "Реорганизация"</subtitle>
   <p>Ответ: Здесь мы могли бы предложить весьма умеренную реструктуризацию: убедитесь, что каждый тест выполняется лишь один раз, и сделайте все вычисления стандартными. Если выражение 2*basis (…)* 1.05 появляется в других местах программы, то, вероятно, его стоит сделать функцией. В данном случае мы этого делать не стали.</p>
   <p>Мы добавили массив rate_lookup, инициализированный таким образом, что элементам, отличным от Texas, Ohio и Maine, присвоено значение 1. Этот подход облегчает добавление значений для других штатов в будущем. В зависимости от ожидаемой схемы использования мы могли бы сделать поле points также средством поиска в массиве.</p>
   <p>rate = rate_lookup[state];</p>
   <p>amt = base * rate;</p>
   <p>calc = 2*basis(amt) + extra(amt)*1.05;</p>
   <p>if (state == OHIO)</p>
   <p>   points = 2;</p>
   <subtitle>Упражнение 39 из раздела "Реорганизация"</subtitle>
   <p>Ответ: Когда вы видите, что кто-либо использует перечислимые типы (или эквивалентные им в языке Java), для того чтобы провести различие между вариантами некоего типа, во многих случаях вы можете улучшить программу за счет создания подклассов:</p>
   <p>public class Shape {</p>
   <p>  private double size;</p>
   <p>  public Shape(double size) {</p>
   <p>     this.size = size;</p>
   <p>  }</p>
   <p>  public double getSize() {return size;)</p>
   <p>}</p>
   <p>public class Square extends Shape {</p>
   <p>  public Square(double size) {</p>
   <p>    super(size);</p>
   <p>  }</p>
   <p>  public double area() {</p>
   <p>    double size = getSize();</p>
   <p>    return size*size;</p>
   <p>  }</p>
   <p>)</p>
   <p>public class Circle extends Shape {</p>
   <p>  public Circle(double size) {</p>
   <p>    super(size);</p>
   <p>  }</p>
   <p>  public double area() {</p>
   <p>    double size = getSize();</p>
   <p>    return Math.PI*size*size/4.0;</p>
   <p>  }</p>
   <p>}</p>
   <p>// efc…</p>
   <subtitle>Упражнение 40 из раздела "Реорганизация"</subtitle>
   <p>Ответ: Этот случай интересен. На первый взгляд, кажется разумным, что у окна должна быть ширина и высота. Однако стоит подумать о будущем. Представим, что мы хотим обеспечить поддержку окон произвольной формы (что будет весьма трудно, если класс Window обладает всей информацией о прямоугольниках и их свойствах).</p>
   <p>Мы бы предложили абстрагировать форму окна из самого класса Window.</p>
   <p>public abstract class Shape {</p>
   <p>//...</p>
   <p>  public abstract boolean overlaps (Shape s);</p>
   <p>  public abstract int getArea();</p>
   <p>}</p>
   <p>public class Window {</p>
   <p>  private Shape shape;</p>
   <p>  public Window(Shape shape)  {</p>
   <p>     this.shape = shape;</p>
   <p>     ...</p>
   <p>}</p>
   <p>public void setShape(Shape shape) {</p>
   <p>   this.shape = shape;</p>
   <p>   ...</p>
   <p>}</p>
   <p>public boolean overlaps(Window w) {</p>
   <p>   return shape.overlaps(w.shape);</p>
   <p>}</p>
   <p>public int getArea() {</p>
   <p>   return shape.getArea();</p>
   <p>}</p>
   <p>}</p>
   <p>Заметим, что в этом подходе мы предпочли делегирование созданию подклассов: окно не является «разновидностью» формы – окно «имеет» форму. Оно использует форму для выполнения своей работы. Вы убедитесь, что во многих случаях делегирование оказывается полезным для реорганизации.</p>
   <p>Мы могли бы расширить этот пример, внедрив интерфейс Java, указывающий на методы, которые должны поддерживаться неким классом для поддержания функций формы. Эта удачная идея означает, что, когда вы расширяете принцип формы, компилятор предупредит вас о классах, которые вы затронули. Мы рекомендуем использовать интерфейсы подобным способом при делегировании всех функций какого-либо другого класса.</p>
   <subtitle>Упражнение 41 из раздела "Программа, которую легко тестировать"</subtitle>
   <p>Ответ: Вначале добавим подпрограмму main, которая будет действовать как ведущий элемент модульного тестирования. В качестве аргумента она примет простой мини-язык: &lt;Е&gt; будет означать опорожнение блендера, &lt;F&gt; – его наполнение, цифры 0–9 будут задавать скорость вращения ротора, и т. д.</p>
   <p>public static void main(String args[]) {</p>
   <p>// Create the blender to test </p>
   <p>  dbc_ex blender = new dbc_ex();</p>
   <p>// And test it according to the string on standard input</p>
   <p>  try {</p>
   <p>    int a;</p>
   <p>    char c;</p>
   <p>    while ((a = System.in.read())!= -1) {</p>
   <p>       с = (char)a;</p>
   <p>       if (Character.isWhitespace(c)) {</p>
   <p>          continue;</p>
   <p>       }</p>
   <p>       if (Character.is Digit(с)) {</p>
   <p>          blender.setSpeed(Character.digit(c, 10));</p>
   <p>       }</p>
   <p>      else {</p>
   <p>         switch (c) {</p>
   <p>          case 'F': blender.fi!l();</p>
   <p>                       break;</p>
   <p>          case 'E': blender.empty();</p>
   <p>                       break;</p>
   <p>          case 's': System.out.printlnfSPEED: " + blender.getSpeed());</p>
   <p>                       break;</p>
   <p>          case 'f': System.out.println(&lt;FULL&gt; + blender.isFull());</p>
   <p>                       break;</p>
   <p>          default: throw new RuntimeException(</p>
   <p>                       "Unknown Test directive");</p>
   <p>   }</p>
   <p> }</p>
   <p>}</p>
   <p>catch (java.io.lOException e) {</p>
   <p>  System.err.println("Tesf jig failed: " + e.getMessage());</p>
   <p>}</p>
   <p>System.err.println("Completed blending\n");</p>
   <p>System.exit(0);</p>
   <p>}</p>
   <empty-line/>
   <p>Затем появится сценарий оболочки для управления тестированием.</p>
   <p>#!/bin/sh</p>
   <p>CMD="java dbc.dbc_sx"</p>
   <p>failcount=0</p>
   <p>expect okay() {</p>
   <p>  if echo "$*" | $CMD #&gt;/dev/null 2&gt;&amp;1 </p>
   <p>  then</p>
   <p>  ...</p>
   <p>  else</p>
   <p>     echo "FAILED! $*"</p>
   <p>     failcount='expr $failcount + 1'</p>
   <p>  fi</p>
   <p>}</p>
   <p>expect_fail() {</p>
   <p>if echo "$*" | SCMD&gt;/dev/null 2&gt; &amp;1</p>
   <p>then</p>
   <p>  echo "FAILED! (Should have failed): $*" </p>
   <p>   failcount='expr $failcount + 1'</p>
   <p>fi</p>
   <p>}</p>
   <p>report() {</p>
   <p>  if [$failcount -gt 0]</p>
   <p>  then</p>
   <p>     echo – e "\n\n*** FAILED $failcount TESTS\n"</p>
   <p>     exit 1 # In case we are part of something larger</p>
   <p>  else</p>
   <p>    exit 0 # In case we are part of something larger</p>
   <p>  fi</p>
   <p>}</p>
   <p>#</p>
   <p># Start the tests</p>
   <p>#</p>
   <p>expect_okay F12345678987654321OE # Should run thru</p>
   <p>expect_fail F5 # Fails, speed too high</p>
   <p>expect_fail 1 # Fails, empty</p>
   <p>expect_fail F10E1 # Fails, empty</p>
   <p>expect_fail F1238 # Fails, skips</p>
   <p>expect_okay FE # Never turn on</p>
   <p>expect_fail F1E # Emptying while running</p>
   <p>expect_okay F10E # Should be ok</p>
   <p>report # Report results</p>
   <p>При тестировании проверяется, не имеют ли место недопустимые переходы в скорости вращения ротора, если вы пытаетесь опорожнить работающий блендер, и т. д. Мы помещаем эту процедуру в сборочный файл, так что можно провести компиляцию и запустить регрессионный тест, просто введя команду:</p>
   <p>% make % make test</p>
   <p>Обратите внимание на то, что мы выходим из процедуры тестирования с 0 иди 1, так что можем использовать это и как часть более обширного теста.</p>
   <p>В требованиях ничего не говорилось о запуске данного компонента через сценарий или даже с использованием языка. Конечные пользователи этого не увидят. Но у нас есть мощный инструмент, который можно использовать для быстрого и исчерпывающего тестирования нашей программы.</p>
   <subtitle>Упражнение 42 из раздела "Ошибка в определении требований" Ответ:</subtitle>
   <p>1. Эта инструкция похожа на реальное требование: имеются ограничения, налагаемые на приложение со стороны операционной среды.</p>
   <p>2. Это может быть корпоративным стандартом, но не требованием. Его лучше сформулировать так: "Фон диалогового окна должен настраиваться конечным пользователем. При поставке заказчику цвет будет серым". Еще лучше было бы сформулировать его более широко: "Все визуальные элементы приложения (цвета, шрифты и языки) должны настраиваться конечным пользователем".</p>
   <p>3. Эта формулировка не является требованием, это архитектура. Когда вы сталкиваетесь с подобным, вам придется копать очень глубоко, чтобы понять, что же думает пользователь.</p>
   <p>4. Основное требование, вероятно, выглядит примерно так: "Система предотвращает ввод пользователем недопустимых значений в поля и предупреждает пользователя, если ввод этих значений имеет место".</p>
   <p>5. Эта формулировка, по всей вероятности, является жестким требованием.</p>
   <p>Решение головоломки с четырьмя точками, приведенной в разделе "Разгадка невероятных головоломок".</p>
   <image l:href="#i_018.jpg"/>
  </section>
 </body>
 <body name="notes">
  <title>
   <p>Примечания</p>
  </title>
  <section id="n_1">
   <title>
    <p>1</p>
   </title>
   <p>При этом можно утешаться изречением, приписываемым контр-адмиралу д-ру Грэйсу Хопперу: "Легче просить прощения, чем получать разрешение".</p>
  </section>
  <section id="n_2">
   <title>
    <p>2</p>
   </title>
   <p>Это, конечно шутка!</p>
  </section>
  <section id="n_3">
   <title>
    <p>3</p>
   </title>
   <p>Истекающий актив представляет собой некий актив, чья стоимость со временем уменьшается. Примерами могут послужить склад, доверху заполненный бананами, и билет на бейсбол.</p>
  </section>
  <section id="n_4">
   <title>
    <p>4</p>
   </title>
   <p>В эру Интернета, многие люди, кажется, забыли о настоящих библиотеках, в которых имеется штат сотрудников и научные материалы.</p>
  </section>
  <section id="n_5">
   <title>
    <p>5</p>
   </title>
   <p>В оригинале английское слово annoy происходит от старофранцузского <emphasis>enui</emphasis> что также означает "наскучить".</p>
  </section>
  <section id="n_6">
   <title>
    <p>6</p>
   </title>
   <p>Применение функций средств доступа дополняет книгу Мейера "Uniform Access principle" [Mey97b], в которой говорится, что "все службы, обеспечиваемые неким модулем, должны быть доступны за счет универсальной системы обозначений, которая отличается надежностью независимо от того, хранятся ли эти службы в памяти или вычисляются".</p>
  </section>
  <section id="n_7">
   <title>
    <p>7</p>
   </title>
   <p>В вертолете имеется четыре основных органа управления. Рычаг управления циклическим шагом несущего винта находится справа от пилота. При его перемещении вертолет движется в соответствующем направлении. Слева от пилота расположен рычаг управления общим шагом несущего винта. Если потянуть за него, то произойдет увеличение шага на всех лопастях и вертолет начнет подниматься. На конце рычага управления общим шагом расположен дроссель. И наконец, есть две ножных педали, которые изменяют тягу на рулевом винте и способствуют повороту вертолета.</p>
  </section>
  <section id="n_8">
   <title>
    <p>8</p>
   </title>
   <p>В действительности, это наивно. Лишь при очень большом везении большинство требований из реальной жизни не окажут воздействие на многие функции системы. Тем не менее, в идеале каждое функциональное изменение обязано затрагивать лишь один-единственный модуль.</p>
  </section>
  <section id="n_9">
   <title>
    <p>9</p>
   </title>
   <p>Возьмем нелинейную или хаотическую систему и внесем небольшое изменение в один из входных параметров. Можно получить серьезный и зачастую непредсказуемый результат. Классический пример: взмах крылышек бабочки в Токио может стать началом цепочки событий, приводящих к возникновению смерча в Техасе. Не напоминает ли это явление некоторые известные вам проекты?</p>
  </section>
  <section id="n_10">
   <title>
    <p>10</p>
   </title>
   <p>Если быть педантичным, то существует много способов стрельбы из пулемета в темное время суток, включая стрельбу с закрытыми глазами (поливая свинцом все вокруг). Но это лишь аналогия, и авторам позволительны некоторые вольности.</p>
  </section>
  <section id="n_11">
   <title>
    <p>11</p>
   </title>
   <p>При исследовании абсолютной (в противовес относительной) рабочей характеристики, необходимо придерживаться некоего языка, близкого по характеристикам к целевому языку.</p>
  </section>
  <section id="n_12">
   <title>
    <p>12</p>
   </title>
   <p>Нормальная форма Бэкуса-Наура (BNF) позволяет осуществлять рекурсивное определение контекстно-свободных грамматик. В любой толковой книге по проектированию компиляторов или синтаксическому анализу имеется подробная спецификация формы BNF.</p>
  </section>
  <section id="n_13">
   <title>
    <p>13</p>
   </title>
   <p>Авторы благодарят Эрика Вота за этот пример.</p>
  </section>
  <section id="n_14">
   <title>
    <p>14</p>
   </title>
   <p>На самом деле можно приобретать инструментальные средства, поддерживающие только этот способ написания сценариев. Кроме того, можно изучить пакеты с простым исходным текстом (типа Expect), в которых имеются подобные возможности [URL 24]) делается без компиляции. Это существенно упрощает сопровождение в области динамической области приложения.</p>
  </section>
  <section id="n_15">
   <title>
    <p>15</p>
   </title>
   <p>Для законодателей вполне достаточно значения 3. В законопроекте № 246 Законодательного собрания штата Индиана (1897) была сделана попытка установить, что отныне число «пи» будет равно 3. Во втором чтении законопроект был отложен на неопределенное время, так как некий профессор математики указал, что власть законодателей не распространяется на законы природы.</p>
  </section>
  <section id="n_16">
   <title>
    <p>16</p>
   </title>
   <p>Для этой цели часто применяется MD5. Великолепное введение в чудесный мир криптографии – книга [Sch95]</p>
  </section>
  <section id="n_17">
   <title>
    <p>17</p>
   </title>
   <p>Все программы становятся унаследованными, как только они написаны.</p>
  </section>
  <section id="n_18">
   <title>
    <p>18</p>
   </title>
   <p>Генеральная общая лицензия GNU [URL 57] является разновидностью легального вируса, который используется разработчиками программ с открытым текстом для защиты своих (и ваших) прав. Стоит уделить время ее изучению. Она говорит о том, что пользователь может использовать и модифицировать программы с генеральной общей лицензией, но если он распространяет модифицированные программы, то они подлежат соответствующему лицензированию (и маркируются как таковые), а исходный текст должен быть открыт. Это и есть часть вируса – если ваша программа создается на основе лицензированной программы, то она также подлежит лицензированию. Тем не менее, пользователь не ограничен никоим образом при использовании инструментальных средств – право собственности и лицензирование программ, разработанных при помощи указанных средств, находятся на усмотрении пользователя.</p>
  </section>
  <section id="n_19">
   <title>
    <p>19</p>
   </title>
   <p>В идеальном случае используемая оболочка должна иметь те же клавиатурные привязки, что и редактор. Например, Bash поддерживает клавиатурные привязки редакторов vi и emacs.</p>
  </section>
  <section id="n_20">
   <title>
    <p>20</p>
   </title>
   <p>Подобным образом разработано ядро Linux. В данном случае имеются разработчики, разбросанные географически, многие из которых работают над одними и теми же фрагментами текста. Опубликован перечень установочных параметров (в данном случае для редактора Emacs), содержащий описание требуемого стиля отступов.</p>
  </section>
  <section id="n_21">
   <title>
    <p>21</p>
   </title>
   <p>В книге используется английская аббревиатура SCCS (заглавные буквы), которая обозначает системы управления исходным текстом вообще. Помимо этого, существует также особая система управления, обозначаемая sees (строчные буквы), изначально выпущенная фирмой AT&amp;T вместе с Unix System V.</p>
  </section>
  <section id="n_22">
   <title>
    <p>22</p>
   </title>
   <p>Почему "резиновый утенок"? Один из авторов книги, Дэйв Хант, учился в лондонском Империал колледже и много работал совместно с аспирантом, которого звали Грег Паг и которого Д. Хант считает одним из лучших известных ему разработчиков. На протяжении нескольких месяцев Грег носил при себе крохотного желтого резинового утенка, которого он ставил на край монитора во время работы. Прошло некоторое время, пока Дэйв не отважился спросить…</p>
  </section>
  <section id="n_23">
   <title>
    <p>23</p>
   </title>
   <p>В оригинале router обозначает не маршрутизатор ЛВС, а фрезерный станок.</p>
  </section>
  <section id="n_24">
   <title>
    <p>24</p>
   </title>
   <p>Как насчет создания текста из схемы БД? Существует несколько способов. Если схема содержится в плоском файле (например, операторы create statements), тс синтаксический анализ и генерацию исходного текста можно провести при помощи относительно несложного сценария. В качестве альтернативного способа предлагается следующий: при использовании инструментального средства для создания схемы непосредственно в самой БД необходимо иметь возможность извлечения нужной информации непосредственно из словаря БД. В языке Perl имеются библиотеки, обеспечивающие доступ к большинству основных БД.</p>
  </section>
  <section id="n_25">
   <title>
    <p>25</p>
   </title>
   <p>Концепция частично основана на ранней работе Дейкстры, Флойда, Хоара, Вирта и др. Более подробная информация о самом языке Eiffel содержится в сети Интернет, см. [URL 10] и [URL 11].</p>
  </section>
  <section id="n_26">
   <title>
    <p>26</p>
   </title>
   <p>В языках программирования, имеющих своей основой язык С, можно использовать препроцессор или конструкцию с условными операторами с тем, чтобы указанные утверждения не носили обязательного характера. Во многих разработках происходит отключение генерации текста программы для макроса assert при установленном (или сброшенном) флажке этапа компиляции. Можно также поместить текст программы в пределах условного оператора if с постоянным условием, которое многие компиляторы (включая наиболее распространенные Java-системы) отбросят в ходе оптимизации.)</p>
  </section>
  <section id="n_27">
   <title>
    <p>27</p>
   </title>
   <p>Опасности, возникающие из-за связанности в программе, обсуждаются в разделе "Несвязанность и закон Деметера".</p>
  </section>
  <section id="n_28">
   <title>
    <p>28</p>
   </title>
   <p>Если n объектов знают друг о друге вес, то при изменении одного-единственного объекта возникает потребность в изменении оставшихся n – 1 объектов.</p>
  </section>
  <section id="n_29">
   <title>
    <p>29</p>
   </title>
   <p>На мирных (читай – глупых) птиц не действовало даже то, что поселенцы забивали их до смерти спортивными битами.</p>
  </section>
  <section id="n_30">
   <title>
    <p>30</p>
   </title>
   <p>В книге не рассматриваются подробности параллельного программирования; в хорошем учебнике по информатике даются его основы, включая диспетчеризацию, взаимоблокировку, зависание процесса, взаимоисключение/семафоры и т. д.</p>
  </section>
  <section id="n_31">
   <title>
    <p>31</p>
   </title>
   <p>Более подробная информация обо всех типах диаграмм UML (унифицированного языка моделирования) содержится в книге [FS97].</p>
  </section>
  <section id="n_32">
   <title>
    <p>32</p>
   </title>
   <p>Несмотря на то, что база данных показана как единое целое, это не так. Программное обеспечение баз данных разделено на несколько процессов и клиентских потоков, но их обработка производится внутренними программами БД и не является частью примера, приведенного в книге.</p>
  </section>
  <section id="n_33">
   <title>
    <p>33</p>
   </title>
   <p>Она использует статические данные для сохранения текущей позиции в буфере. Статические данные не защищены от параллельного доступа, поэтому они не являются поточно-ориентированными. Помимо этого, программа strtok затирает первый передаваемый параметр, что может привести к весьма неприятным сюрпризам.)</p>
  </section>
  <section id="n_34">
   <title>
    <p>34</p>
   </title>
   <p>Более подробная информация содержится в описании шаблона Observer в книге [GHJV95].</p>
  </section>
  <section id="n_35">
   <title>
    <p>35</p>
   </title>
   <p>Представление и контроллер тесно связаны между собой, и в некоторых реализациях MVC они являются единым целым.</p>
  </section>
  <section id="n_36">
   <title>
    <p>36</p>
   </title>
   <p>Тот факт, что самолет пролетает над головой, возможно, не представляет интереса, если только это не сотый самолет за ночь.</p>
  </section>
  <section id="n_37">
   <title>
    <p>37</p>
   </title>
   <p>В этом случае дело может зайти слишком далеко. Один разработчик переписывал абсолютно все исходные тексты, которые ему передавались, т. к. пользовался собственными соглашениями об именовании.</p>
  </section>
  <section id="n_38">
   <title>
    <p>38</p>
   </title>
   <p>На деле авторам не хватило реальной памяти для выполнения поразрядной сортировки свыше 7 млн чисел на компьютере с процессором Pentium и 64 Мбайт оперативной памяти во время тестирования алгоритмов, используемых в качестве упражнения к данному разделу. После этого была задействована область подкачки, и время сортировки резко сократилось.</p>
  </section>
  <section id="n_39">
   <title>
    <p>39</p>
   </title>
   <p>Термин "программная интегральная схема", по-видимому, был введен Коксом и Новобилски (1986) в их книге по языку Objective-C под названием "Object-Oriented Programming" [CN91].</p>
  </section>
  <section id="n_40">
   <title>
    <p>40</p>
   </title>
   <p>Тем не менее существуют иные методики, которые помогают управлять сложностью программ. Две из них – Java beans и АОР – обсуждались в разделе "Ортогональность".</p>
  </section>
  <section id="n_41">
   <title>
    <p>41</p>
   </title>
   <p>Неделя – это долго или нет? На самом деле нет, особенно если рассматривать процессы, в которых менеджмент и исполнители находятся в разных мирах. Менеджмент дает одно представление о том, как все работает, но как только спускаешься в цех. то встречаешься с иной реальностью, для адаптации к которой требуется время.</p>
  </section>
  <section id="n_42">
   <title>
    <p>42</p>
   </title>
   <p>Существуют некоторые формальные методики, которые пытаются выразить операции алгебраически, но они редко используются на практике. Эти методы требуют, чтобы аналитики разъясняли их значение конечным пользователям.</p>
  </section>
  <section id="n_43">
   <title>
    <p>43</p>
   </title>
   <p>Подробные спецификации, несомненно, подходят для систем жизнеобеспечения. Очевидно, что эти спецификации составляются для интерфейсов и библиотек, используемых другими пользователями. Если результаты в целом представляют собой набор стандартных вызовов, лучше убедиться в том, что эти вызовы строго определены.</p>
  </section>
  <section id="n_44">
   <title>
    <p>44</p>
   </title>
   <p>В команде нет разногласий – но это только внешне. Внутри же команды поощряются оживленные серьезные дискуссии. Хорошие разработчики склонны быть страстными, когда речь идет об их работе.</p>
  </section>
  <section id="n_45">
   <title>
    <p>45</p>
   </title>
   <p>В книге "The Rational Unified Process: An Introduction" [Kru98] автор выделяет 27 отдельных ролей в пределах проектной команды!</p>
  </section>
  <section id="n_46">
   <title>
    <p>46</p>
   </title>
   <p>Например, при записи компакт-диска в формате ISO9660, запускается программа, создающая побитовый образ файловой системы 9660. Стоит ли тянуть до последней минуты, чтобы убедиться, что все нормально?</p>
  </section>
  <section id="n_47">
   <title>
    <p>47</p>
   </title>
   <p>А что же первое? Проклятый склероз.</p>
  </section>
  <section id="n_48">
   <title>
    <p>48</p>
   </title>
   <p>Ориентировочно можно принять среднюю величину по отрасли равной $ 100000 на душу; в нее входят заработная плата, социальные выплаты, обучение, оборудование рабочего места, накладные расходы и т. д.</p>
  </section>
  <section id="n_49">
   <title>
    <p>49</p>
   </title>
   <p>На сайте extreme Programming [URL 45] эта концепция обозначена как "непрерывная интеграция, безжалостное тестирование".</p>
  </section>
  <section id="n_50">
   <title>
    <p>50</p>
   </title>
   <p>Редактор американского издания требовал изменить это предложение на "Если система выходит из строя… ". Авторы сопротивлялись.</p>
  </section>
  <section id="n_51">
   <title>
    <p>51</p>
   </title>
   <p>В оригинале приводится толкование термина deadline – контрольный срок – в Webster's Collegiate Dictionary: черта, проведенная вокруг тюрьмы (или в ее пределах), за которую заключенный не имеет права выходить под страхом смерти.</p>
  </section>
  <section id="n_52">
   <title>
    <p>52</p>
   </title>
   <p>Информация подобного рода, как и имя файла, дается тегом RCS $Id$.</p>
  </section>
  <section id="n_53">
   <title>
    <p>53</p>
   </title>
   <p>Более подробно модели и представления рассмотрены в разделе "Всего лишь визуальное представление".</p>
  </section>
  <section id="n_54">
   <title>
    <p>54</p>
   </title>
   <p>Технологии XSL и CSS были разработаны для отделения представления от содержимого.</p>
  </section>
  <section id="n_55">
   <title>
    <p>55</p>
   </title>
   <p>ACM Member Services, РО BOX 11414, New York, NY 10286, USA. =&gt; www.acm.org</p>
  </section>
  <section id="n_56">
   <title>
    <p>56</p>
   </title>
   <p>1730 Massachusetts Avenue NW, Washington, DC 20036-1992, USA. -&gt; www.computer.org</p>
  </section>
 </body>
 <binary id="cover.jpg" content-type="image/jpeg">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
2Q==</binary>
 <binary id="i_001.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRof
Hh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwh
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAAR
CAD4AaEDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3+iivm79oXxZNea/B4WgmQ2dkiXFwgjIb
7QwbALHqBGykY4+c5yQMAH0jRXIfDfxpZ+NPCdrcx3fnajbxRxagjqEdZtvLFRxtYgkEcduC
CB19ABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBXv/tn
9n3P9n+R9t8pvs/2jPl+Zg7d+OducZxzivj/AMYfDvxV4Yt7jV/EKoUkvfIFwbgStdOwdjIO
px8hJL4PzDjrj7IryH9oz/knth/2FY//AEVLQBY+EHw88QeAdQ1lNUmsZLa7igKNbFn3Opk4
ydpXaDyCpzvXBG0ivVqKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACiiigAryH9oz/knth/2FY//RUtevV5D+0Z/wAk9sP+wrH/AOipaAPXqKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigArx39o6Nj4G02UTOEX
UlUxALtYmKTDHjORggYIHzHIPGPYq8h/aM/5J7Yf9hWP/wBFS0AevUUUUAFFFFABRRRQAUUU
UAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFU9V1Wx0TS7jUtSuUtrO3TfLK/RR/MknAAHJ
JAHJoAuV4joWsfELxj8QvFOlWPin+zdM0q6mjWX+z7ebb+9ZY48EBjlVY7sn7vPUV7NYXtvq
en21/aSeZbXMSzQvtI3IwBU4PIyCOtea/C3SdS0/xz8Q7i90+6toLvUg9vJNCyLMvmznKEjD
DDA5HqPWgDD8KfFTxDp3hHxfc+J7b+0NT8PXUMbr5kcWfMk8ox5jTb8rKx3c5zjtmsyP4neJ
z4Ul8Yy+MNAW4D4i8MLAjFl3CPLHeJVP3pMAngA5wcDo5PhnrOqwfEeCaSC0XXrqF7F3jRdw
icyAssZICsSF3H5zgsy5ODxmmrd6B4EfQ5/hLdXviOB54BqD6Sk6clisu8xtvKsQAvKkKDu5
xQB2fif4s6umkeDbzwrY2NxN4i8yPyLoOdkytGnlhtydHZl3Hg4B4FSan4n8bfDd9Fm8Vahp
2s6Le3Cw3t4luYZbR2XlVCcOgClgdmWwwO3K1znjg6z4Al+GZjWC91Wzlut8VhapCkxkaPdF
GipgZDlAQuTndgE1f17UfEHxSvNG0K48AarYaZBqFteXs96zQgxAbZUG5Vz/AKxsbW3ELnaO
QADQ174kaje/ETUfCWm69ofh+ws4gZNXuysr+YNpZUDMI92W2FTkja5zkAA8H/FLVNS8PeLo
dQl0q51fw9aySwXFs+Y70Ro4Mm0EZXcgJZcAiRcBeM854l0VfBnxc1bWrnwW/iDRdTt98Ua2
7TolzKygbi6sodpVIwOQJRjPCnf0HSdW1DwV4y1W58G6doT3mmz2um2FlYCK6K7ZM78KHJYm
MAcZKZCjIJAND4O/Eu+8cpqlnrAtVv7VxNEYjtMkTs3ATrhDtXdk8MueeWr+D/i9c+K/iBqu
npDp0Phyzt5rhbuR3jkEUZVfMJbjBznaQu0HknbhuA0z4ZeNtP8ADOjeIPCkd1Y6xPbz2mo2
jObaYAySAP8AvCBgpsGOCCqMMnkd34P+G9v4Q+I32CKznu9Mm8NNFeXc8JMNxO043qc5UZQD
5P7o5zySAYdl8ZfFOraNqWs29z4LsILZ5THYX9xKLuRVUMAqhgHJB2g4GWB4FampfGa/X4Ta
d4q021sTqL6gLC8gmSRo43COx28qeQEYcnAbGSRmvONK0jQfCP23R/G3gbVdS1d7p4tMnt2m
jjvCMLsTlcru2kMqsSJOnAB6Txh4c1K3+A9jFF4ZfTiNYkv3tId00kNuyzMrTHaCCqlUJbJA
VckH5QAeveIvEmpaX438J6JZW9rLBq73IuDMWVkWJFbKEZGcEnBBzgDK5yM/VfGupWPxj0Tw
hFBanT7+ya4lkZG80MBMcKd2Mfu16g9TXCeJfHfi/UfEfhjVdL8BeI449L3y3NrcWsuyWSRN
jAbV/hUuFcjPzn5QMg4HiPx/eWnxg0TxhqvhTVdNsrWJ7WOG6QxyTx/vAXG5QNwEwO3JGQBu
5zQBtt8VPEXirxJenw/4i8M6HpOnXAEQ1aXyzfxk8El1Jx8hJC7CokAJJwa2NN+L+q6j8IdZ
8UDT7WPVtMuI4SpikNvIHkQAjkc7XIKhyQQCcBgK4Cx8BR+Edf1zTfEPgfWPFMEaKdPvNPin
SNmxkAlcDDBgGOW2lCAG61040TWJvgV4ms7fwY+kC6vY5rLT4WnmuHXzYgS6PlgQE68ZAJ2q
MFgDrNZ+LNnZ/DCPXLHVNDn8QNa20rWH2gNiRynmL5Yff8oZuM5GOehrXHja8uNZ8BQQ2sEd
t4ktZrmdXJd4tsCyqqsCB1bBJHPtXnmv/CbR4Pg5FqOneG7o+JzZWjsqNO8vmsY/N/dbiM4L
5G3jnpimeOtD8VzRfDrRNGsNVtdT07T0hnv7dH8m2eRY4iDNHnG3y23Y/hIPOaAOjtvjGupf
F628M6e2nNoLuYDfMzFpZRGxGxshcF9qDht3UE7hjPv/AIteKr7xhrGjeH9P0CCLS3njkbVL
wK0pi8wlly6cFY+gBC9WYDkU9R+FX9mfFnwXFounzw6JaxRyTXwj8zdNC7yt5rDGGf5FDHA5
AUYXaOMbwxoHw08SXunfEHQbrV7C4QPpt9ZyMgYKeflDqMkMNwLEqVGMhg1AHs3wt+Id944T
VbbUrC1t7zS3RJZbSbfFMXaT7vJAACDkMwbORgV6HXmnwig0z7Pq17o/g268PafcPF5E11dS
SNeoAxVwj52gKwOQSDvIBO2vS6ACiiigAooooAKKKKACiiigAryn4/fY/wDhDtG/tDz/ALF/
bUH2j7PjzPL8uXdszxuxnGeM16tXkP7Rn/JPbD/sKx/+ipaAPXqKKKACiiigAooooAKKKKAC
iiigAooooAKKKKACiiigAooooAKK5TxP8RfDvha4Syubl7vVJHVI9NsU864dmK4G0HCkhwQG
IyOmelcxYXnxK8dP++tE8H6DI43tydQePayuqbh8hLDIYqhGVK7sHIB0fi74meF/Bm6LUr7z
b0Y/0G1Akm/h6jICcMG+YjIzjNYFl4X8S+Odcj1L4gWcFlpVhKWsdCilWVJX5xJMwJD4B244
zg/KoJD9P4U8A6H4QluLqxjnuNRus/adQvJTLPNlixy3QZJ5wBnAJyRmunoAKKK8h0zxz8Q/
E3jHxHo+g2XhxbbR7qSEz3yzDgSMqA7XJLEITwuOD04BAPXqK8p8D/EzxB4y8D63eWem2N34
kspVSGxh3QxlHACOzO2DgiUkBhkJjjINZ/jP4ieN/BOh6ZdajL4VbU7rmfS0jk86AHcVYYmO
9flILYADcAt1oA9H13wfpfiLXND1bUPPabRpWmto0fajOdpBbjJwUUjBHTnI4rfrzHxt458V
6Z8SNK8JeGrLSp5L+1WYNfK/yndJuJKuPlCx56E8HGTgUXPjnxX4W8caHoviqy0q4sNZ2wwX
OmK6Mk5KKQQ7nKqzAdBlWDDkFKAPTqK80HiL4lXmv6hjRNH0HQLR8teauxdljAUs2Y5drHax
bjCDBUvlSak8E/Em88RfDLV/FF/p8C3Ol/aN8UDlUm8uMSDGclchgv8AF0z3wAD0eivArj4u
fEO08D2ni2fTvDi6dd3RtYF8uYyOQGy2BJgLlGHJzkdMYNd98WfHl54C8PWV3posZb25uhEI
boFsxhGLMFVlPB2DPQbh6igDv6K8psPiD4r0n4lW/hXxjaaHDbz2slyLyyd0REVHfeS7H5R5
bqQQvrnA5r2vxR8YeKtQnk8FeEIL/SLK6aKa6nudn2lM/L5ZfZsYqMkEPt3LkeoB69WXq3h3
SdcuNPuNSsknn064W5tJCSrRSAggggg4yASp4OBkHArjLf4s2938KbvxtBpm6S0lEM9h55Gx
zIqgeYU5+V1bhe+Oua5CT4p/EvTvC9j4q1Dw1pR0SeUBvLjlSTy8jDHLnYr5IViCM4OMMu4A
92orziX4pW9j8W77wpq0tjp+mW1qpjup3KmScqkmCxIVF2MwwepXryFrpPEXjPTdD8EXnim3
dNTs4EBjNpKrLKxcRgBxkY3HBPOMHgkYoA6OiuMufiBY/wDCrrnxfaz2peOyEnlLJ56w3LIu
2F9mDne6Keh5ycVzHiL4pa7bWXhCw8P6Xa3/AIj1yyivJYGRykaugPyjI4Lbzkv8ojOeuQAe
tUV5pF4v8a+H/GGkaZ4ysNH/ALL1V/s8N/pazFY7g/cRt2TkkAYIA+bO75WFel0AFFeQ6X8Q
fG/jLxZrth4StPDn9maZKY1ur15HEg3FVIaNvm37WYYXAAwSeCZLT4yzaX4b1qTxboz2evaT
cJbPaQAhLiSQO0YUkttG1GJYkjADKW3BaAPWqK8dtfG3xUl8KWHihfDuj3thcOrNY2sNwLsx
FiNwUkjBABBG7hg2CM42x8QNXb4leFvDsmmwWltq+lLe3MUyuZ4JCkrGPOQODGAcrnr07AHo
9FeS23xjXUvi9beGdPbTm0F3MBvmZi0sojYjY2QuC+1Bw27qCdwx61QBj6F4p0PxN9s/sXU4
L37HL5M/lE/K3Y89VODhhlTg4JwasTa5pcGuW2iS38CancxNNDal/ndF6kD88eu1iM7Wx4d8
SRN8JfiBbeLfDciGTW0uBdWl0hkjLZRnIOQ2GZlbAIwVPO07R1fwc0R9QW8+Imo3X2jU9e8w
BArAWyLKwZFJc7lOyPGR8oQAGgD1aiiigAryH9oz/knth/2FY/8A0VLXr1eM/tHw3DeDtKmW
622yahskt/LB8xzG5V93UbQrjHff7CgD2aiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAjnnhtbeW4uJUhgiQvJJIwVUUDJJJ4AA5zXmv/CReMPiF+98EvBouhw3Xl/2vex75L1Bw
xiiZCAoO77xG47RlSHAv/Fj/AEjSPD+lS/NZarr9nZ3kXTzYSxYrnqvKKcgg8da7uCCG1t4r
e3iSGCJAkccahVRQMAADgADjFAHOeH/h94a8NXhv7Ow83U35k1C7kaad3wQz7mJ2s25t23Gc
9OldPRRQAUUUUAFeU/CbSNX03xj4/n1Wzni+1agrxztbPDHcfvJyWjDZyvIPU4BHJ616tRQB
4FB4Y8V+HvAHjj7DpU+na/Nqsbh9KR9k8G5SqWoR9yqu9jnb90lTyDs4zWfC8d14K0220r4c
eJrLxHG6C9uWtZ3ilUKwYrk8Fm2NjYMcgHjn6wooA+fvG2seIrT4meCvGFt4Xuvtc+mlV0t/
nlLDzPNTCZYEJKCCV4yMrkMo07t/EfxN8e+F5z4WvtBttBlW9lm1NJEE3zwl40/d43Aq23J+
YDJ29K9LvPBWm33jvT/F8s90NQsLc28UauvlFSJBlhtzn943QjoK6OgD5i0m21vTtcntPiH4
R8R+KL2CL7RpkbTy3KI67Sw4Yo0bFow5+bbgAqc4qx4Qv/Efhv4ZeI/C83gXxHNc6j5vkSpY
yBB5sYjbdlcjaF3DGd2cfL1r6VooA8V1Dwzrtl+zPb6HFpz3OoOkckttGrmVFe483ATZkuMq
GU4x8xyduDT8eeHdb8c/GDQLC60i+XSLWKFb12WU2eeZZhHKAM5XbHuwpLKAcYFe7UUAeM/E
Hwxq+vfGKw+xWM5tptAubQ3jRP5EUjxXSqHcAgcuvvyOOa4DwhJ4R8F3niPQvHNhfRanb+bF
9otLi4jF3EQAYNqMmVbAZS3ysG5K4GfqWigD5u1bVY1+C8+maT4IutGg13UoY7SDz57hpmwk
nmAvHghgkaqA3zZYgfIc+h+MtD1T/hn1NEjsJ5tTh0+xhe1gTzX3o8W4ALnONp6Z6Zr06igD
5e+J8VppfxxuNT8SaJdXegzvECo3xC4UW8asY3GNxRiDgEcjBIzVfVPDeqx2vja70Hw7rGje
GGsrc/ZNQt5A7lZYWJAZycqVlff8wVdwO3cCPqmigDxnUvhPo178G7QwaJ9l8QW2lLcK6Qv5
7z7VkkRlyC7MQyANnbu+UDGKr6poWr6A3w38Z2WlX15c6dp9vp+oWEVu8kyRmI5KxgAhgHlB
3EANsGOte3UUAeGt4rvvix478Lx6NYajbeGNPvVvLi5nssj7TEGcKzqxUDbtUcg5kJIPy17l
RRQB85eD9RuPgfrniG28RaLqs2mXMscVvqMEA2SFN5TGTt+ZGLYDkrtwQecSat4A8TeMNG8X
eIV09NJivL1b600uSzZLm4ECyqCVBOx2WRjjDF35+UEE/RNFAHz9bfGnWh4PtvDdhpGo3Hja
NDaSM9uX2lNwL7SWd5QqgkMAN24ngbTT+JPhjxpr3izwv5djfG/m0W2tL68iibyYpnaRZg7x
gqF+c7scbSeMGvo2igDw3xH8Ol8O678NLfQtGecWd6p1G+trRiXIkhJklYZIGd5AY4UZA4Fe
5UUUAeE2ugav8VvifPqPijRdVsvC9hEwtbK/jeHdkbQBgqQzHMjEbsbQpJG2pPBV7ffDD4i3
XgXUI9R1Cw1F420cxTecIYjI/wAxTgKMFi5AGDGTggg17lRQAUUUUAFeQ/tGf8k9sP8AsKx/
+ipa9eryX9oUQt4G0tbiR44DrEQkeNA7KvlS5IUkAnHbIz6igD1qiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAx/FPh+38VeF9Q0S6bbHdxFA+CfLcHKPgEZ2sFOM84weK4nw/44
vPCkp8OeOor6BbWX7La+IbmMmC/yx2bnAIRtm05LN91yzAg59OqOeCG6t5be4iSaCVCkkcih
ldSMEEHggjjFABBPDdW8VxbypNBKgeOSNgyupGQQRwQRzmpK88HgPXfC9w8vgXXktrDYoTQ9
UV57UNk7ism4vGDuL4Xqw5ODgSWHxQRLy3svE3hzVfDs0kskL3V6FFkjqHIAuCVDZCcYHJPG
RzQB39FYGieNfD/iLV9Q0vS9Sgubmx2lxHIrLIjKp3owJDKC2046MMEDIzv0AFFFFABRVe/+
2f2fc/2f5H23ym+z/aM+X5mDt34525xnHOK8h0f46PYa4+heO9G/se7g3rPcwlnRXHKjywGb
aVxhgzZ4I4OQAezUVXsr+z1Ozju7C7gu7aTOyaCQSI2CQcMODggj8KsUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFeS/tCwtc+BtLgQoHk1iJFM
kiooJilHLMQFHuSAO9R/8Kh8X/8ARWNc/KX/AOP1xHxZ8F+IPDXg6ym1Txtfa5bHUAiW9zGw
2u0bHfuMjE4EeAD03NjGTkA+laK8CUT3moR+DR8br5b2G6eBYzpssUhmBYFDcFwW5JABcgna
Bn5a7bwv8OfEeg+I7TU7/wCIWq6tbQ799lOJNkuUZRnMrDgkHoelAHo9FFFABRRRQAUUUUAF
FFFABRXgXxv8EeJfE3j3S5dG0ie8hk08QiVCoRXR5GYMxICcMuNxGc4GTxXAf8KU+IX/AEL/
AP5O2/8A8coA+vKK+Px8GviA1w8A8OvvRFck3MIXBJAw2/BPynIByOM4yM09T+FnjnSfK+0+
Gr5/Nzt+yqLnGMZz5Rbb174zzjoaAPsyivkP/hSnxC/6F/8A8nbf/wCOVHN8GviBAgd/DrkF
1T5LmFzlmCjhXJxk8noBknABNAH2BRXxvpvwm8d6rbtPb+G7pEVyhF0yW7ZwDwsjKSOeuMdf
Q1X1L4Z+NtKuFguPDOou7IHBtYTcLjJHLR7gDx0znp6igD7QrL8R6LD4j8N6jo0+wJeW7xB3
jEgjYj5X2nqVbDDkcgcivk+y+EHj3ULOO6h8OTrG+cCeWOFxgkco7Bh07jnr0qx/wpT4hf8A
Qv8A/k7b/wDxygD0LwT8EPFPhvxJZ6rL4htbVIbiMzR2MkpM8IO5kY4XgsqDByCCT/CA3vVf
H8/wa+IFtbyzv4dcpGhdhHcwuxAGeFVyWPsASe1V7n4TeO7S3uZ5PDd0yW7hHETJIxJCkbFV
iXHzDJUEDnP3TgA+yKK+L5Phn42ieJG8M6iTLb/aV2wlgE2lsMRwr4U/IcNnAxkgGTTPhZ45
1bzfs3hq+TysbvtSi2znOMeaV3dO2ccZ6igD7Mr5W/aA02Gx+JhuImcvf2UVxKGIwGG6LC8d
NsannPJP0rM/4Up8Qv8AoX//ACdt/wD45XIa3omo+HdXn0rVbf7PewbfMi3q+3coYcqSDwQe
tAEelarfaJqlvqWm3L215bvvilTqp/kQRkEHggkHg17V4Q/aHvFvLe08V2cD2zbI2vrVSrx8
EF3TkPk4J27cc4B4FeE0UAfbnhzxv4a8W+YND1eC7kjyWiw0cgAxltjgNt+YDdjGTjOa36+B
K+kfhdpHxXtH0yLVLxLLw9aov+i3yJJLJEVJCLt+dSvAw7Lt4GCFK0Ae1UUUUAFFFFABRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABXjv7Rxm/4QbTVWNDAdSUu5chg3lS
bQFxggjdk5GMDg549iryH9oz/knth/2FY/8A0VLQBj+Mfgdf6n4o1zxDpkli0ckqXVtpsjSH
7U5AMyu+V8vc24jB/ixlByPU/BXiTTfEWgQNZW6WE9sghuNLyoksWUlPLZByoyh25AyB0HQd
HXmnizwrq3h3WZfGfggOLl3V9X0iLG3UY1bcxQEECXGQSBk7iR8xIcA9LorH8M+JtL8XaHDq
2kz+bbycMrcPE46o47MMj8wQSCCdigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAK+O/i5rdnr/xK1S70+4gubNfLhimhQAPtRQx3ADf824BjnIAwdoFfXl/DcXG
n3MNpdfZLmSJkhuPLEnlOQQr7Tw2Dg4PXFeeeE/gj4V8PW8T6jbJrWoI7Mbi6QiMgjAUQ7im
AP7245ycjgAA+atA8HeIvFDqui6PdXaFynnKm2JWC7iGkbCKcY4JHUeor27wv+zpYwIk/ijU
nupw6t9msTsiwGOVZ2G5gw29AhHPJ4Ne3QQQ2tvFb28SQwRIEjjjUKqKBgAAcAAcYqSgDL0X
w5ovhy38jRtLtbFCiI5hiCtIFGF3t1cjJ5Yk8n1rUoooAKKKKACiiigAooooAKKKKACiiigA
ooooAKKKKACiiigAooooAKKKKACiiigAryH9oz/knth/2FY//RUtevV5D+0Z/wAk9sP+wrH/
AOipaAPXqKKKAPOPFOiXngvUNQ8d+FbeB2aIvrOmyOUjuY1O9pkwQFmADckEEMxxuJD9f4Z8
TaX4u0OHVtJn823k4ZW4eJx1Rx2YZH5ggkEE7FeY634GuPCOrz+MvBYn8yPbJdeHrdRHb3iK
oTCKm3ayqZHGQ+XPAzwQD06iuU8G+P8ASfGKPbw77PWLZM3umXClZbdgxVhyBuAYYyOmV3BS
cV1dABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFeY658Zbe11y90Pw74c1XX
9TspWjuEgjKooXhyCAzHa+F5UD0PTIB6dRXCWfxY0K+8Cah4vitNRGn2FwLeWNo080sTGMqN
+MfvF6kdDXOf8L7s5f8AiYW3hPXJfD8XyXOpeWB5MnZcDKHkp1cH5unTIB69RXKeI/iL4d8M
eG7LXLy5eW3v0R7OKBP3twrAHKqxGAFIJJxjIHUgHP0b4o2N/rNrpOraLrGgXd68i2h1S28q
Ocq2FVWJ++VKnGMAnaCSV3AHd0VyHiP4kaH4d1ePRvLvtT1h8H+ztMtzNMqlS2SMgDgZxndg
g4wc0aN8RtI1rw9rerxW19b/ANi+b9ss7lES5TYhY/JuOM4YDJHKsO1AHX0Vxi/FLwq/huy1
qK9eUXzmG2sooy91JOBkwiNcnfkqOflyy84ZSdv/AISOz/4TH/hGPLn+2/2f/aHmbR5fl+Z5
eM5zuz7Yx3oA2KKyxr9ifFL+HCzjUFslvgpX5WiLlCQfUMBkHH3hjPOKml+NND1e8122trva
2hymK+eZTGiYBy248bQVcE/7BPTBIBv0VxEHxX8Lz+E9R8SieePTrO6e0UyRhXuZAoYCJc5O
4MMZwRySFAJrItvjl4fuJdNB0TxHFDqMvlWs72KlJTuCnbtcl8EgEKCe2M8UAenUUVgWPjDS
7/xnqfhSPz01PTokmkDp8kiMFOVYE9N6A5x14zg4AN+iucl8daBBr+r6LNdOl3pFl9uu8wsV
SLG5iCByQpQkD++MZIYDkB8ffCLXDhbXWDZpcLA9+LUeSu4nax+bcAQrMBt3EKeMjFAHqVFR
wTw3VvFcW8qTQSoHjkjYMrqRkEEcEEc5rmPGXxF8O+BkRdWuXa7lTfFZ26b5XXcBnGQFHXli
M7WxkjFAHV0V554d+LNjqes2eh65o+o+HdYukLRQ38e2OQ7iFVXOCS2DjKgEgqCTjOp4g+Iu
l6Drg0SKw1XWNTEXnTWuk23nvAnGDIMjGdw/ME4yuQDr6K4iP4r+F7jwZe+J7See5trHyhdW
0cYE8TSFVAKsQOrdQSp2tgnFdfYXtvqen21/aSeZbXMSzQvtI3IwBU4PIyCOtAFiisvxHp9z
qvhvUbGyuXtrya3dbedJ3hMcuPkbcnzABsZx1GRgg4ry34f/ABMi8O6Rf+H/AIgX09lrGkyn
c92HlkmjZhj5gWLsC3bjYVIyAxAB7NRXmnwd/wCEm1DS9U8SeI7q6I1e4E1naTOxSGL5m3Rh
mJVGL4AwOEU8gg16XQAUUUUAFeO/tEalaW3hbRbWZUmnfUluFtpA+2WONGDglSCBmRBwQfm4
6ZHsVeBftMf8yv8A9vf/ALRoA99ooooAKKKKAOI8beAP7enttZ0G4g0fxNZy+dFqKw/NNhCv
lyEdVOFGWDYUEYIJBz/DvxP2ardeH/G0EGiavbeY/wBpkbyLO5jWTYrRGUhjnnHUEKTnsPR6
x/EfhfRvFunx2GuWf2u2jlEyp5rx4cAgHKEHox/OgDYorykax4l+Ft5DZ62n9p+BotkEGqRx
qJ7FCAsayqmNyrtwW287gc5Ijr0LQPEWk+KNLXUtFvUu7QuU3qCpVh1DKwBU9DggcEHoRQBq
UUUUAFFFFABRRXMeLPiD4a8F7Y9Zv/LuZImlitYo2kkkA9gMLk8AsQCQeeDgA6eivPJPF3jb
X3iTwt4PfT4N+2W88SZgCkKSVEKNvIPyYcZGSRjgkV5/hxr/AItsJYvHPi26dJHLLp+jBYLe
Mb87WLKTKBhCNwypB5Oc0AdZf+OfCmmfaRd+JNKjkttwmi+1oZFK53LsB3FhgjaBnPGM1wk/
7RHg6G4liS01idEcqssdvGFcA/eG6QHB68gH1Ars/D/w78JeFrw3ej6JBBcnpM7NK6cEfKzk
lchiDtxnvmunoA80g+N/hn+34tG1Kx1jR7h3CO2p2ywrCSMrv+clQcjkjHIJwOa9HgnhureK
4t5UmglQPHJGwZXUjIII4II5zUd7YWep2clpf2kF3bSY3wzxiRGwQRlTwcEA/hXnmq6Kvwxv
bjxT4Z01P7FkTdrmnRFi7KH+WWBcEKUDyFl3Km0dB94AHpdFV7C9t9T0+2v7STzLa5iWaF9p
G5GAKnB5GQR1qxQAV5D8If8AkoXxN/7Co/8ARtxXr1Z+n6HpelXl/d2FhBb3GoSia6kjTBlf
GMn9T9WY9WJIB81abb6W3wi+JOpaVL5dtcahbRwWLnMkECzq0ZY7ieRIV+sZ5POO/sPG/gi3
+BFtBdx2N2senrBNovnRxzSyhgjHaDlcvmTeBuAO/Ga9D8ZeEofFfhTVNEimSwfUHjeW5WAO
SyMhywyNx2xquSegHpiuf0f4LeDNPsNNjvdMTUbyyQBrqUsnnNvL5dFO1hliAGDfKApJAoA8
S0yO58LTfDfXPE0zz6Gzyy21o4eI2YExYy4UZYZeOUHq4AX7oUnuvjXq+keL/wDhF/D2h3ml
X97eahsW7huUk+z52oFbZuIVi4J/659D29q1XSrHW9LuNN1K2S5s7hNksT9GH8wQcEEcggEc
isTw58PPC3hLUJL/AEPS/slzJEYWf7RLJlCQSMOxHVR+VAHhsEup6b8ePE0d14tTw1dzvMI7
27ijuVaJmV44yXO1AYwpBJGNoXqcVc8OaPZ/bPihqtp4i/tpodFuYri6W0EKTzTB3dkwxBUG
LGQADuOOAC3t3iPwR4a8W+Wdc0iC7kjwFly0cgAzhd6ENt+YnbnGTnGak0/whoGleG7jw9Y6
ckGl3CSJNCrtmQOMNufO4kjjOcgAAdBQB82/DBLDwjrWi+IvE9pBJp2s+bb6dI4jfyJY5oh5
7biBGqksN2dwwTjGCe3h8UaXZ/tK393qWqYsJdPSKzuTd7bdA0Ecoy24KYz85A5Bd1OM8j1e
68EeGr3wvB4bn0iBtIg2mK3BZdhBzuDA7gxyctnJ3NknJzhyfBr4fypEjeHUAiTYu25mUkbi
3zEPljljycnGB0AAAOU/4Trw/H+0B9pfWrGawl0X7Cl3G6rDC+/zcPKW2t0PzL3dVxkE15b4
OGpeIvEms+E/CMj6bo+uXBeaR0Z3gs4zIQrEE4BVwp5+Y7VLYY59e174C+G7u90ufRoEsYLe
4Vr22eSVxdxb03LvLkoQofGByWHI6jv/AA34Q0DwhbzwaFpyWaTuHlIdnZyBgZZiTgc4GcDJ
9TQB4inhDTX+D3jbTnv3toNC8RXctrLKy/vGijVER+gJcHaMY+ZhgH7py7Ob4iXHgfw5rF5a
fa9E0TVbWS1sjD5NzOqiNYdvyfPGdwRWXLEyEkMAMfRI8OaL9n1C2bS7V7fULj7VdwSRB45p
cLlypyM/Ip6dRnqSak1jQ9L8QWaWmrWEF7bpKkyxzJuAdTkH+YPqCQcgkEA0K8Fm0jVtX/aR
8RJouvPot3BZRy/aFtxOHXyoFKMjEAj5gec4Kg4zgj3qsu18O6TZ6/fa7BZIuqXyIlxckksy
qAABk4UYVcgYzgZzgUAfP2ny6p4R+JHxAl1lv+Egv7fRZmkYweYlwHaAqXjyMRhXXcoOFVWA
yAKz9d1zUfEnwulupvEPhzSbCLYYPDOkqsbyt5zBjIhbcvXfgblOA2ARmvo1/C2hya5dazJp
kDX93amzuZGBImhOMq6/dboBkjOABnHFc5B8Gvh/bXEU6eHULxuHUSXMzqSDnlWchh7EEHvQ
BueBf+Se+Gv+wVa/+ilryz4kSWOnfH3whqWtQuNLFvGonJ2IsqySbWLEgYRmjZueB1Bzg+xa
JomneHdIg0rSrf7PZQbvLi3s+3cxY8sSTySetR6/4d0nxRpbabrVkl3aFw+xiVKsOhVlIKnq
MgjgkdCaAPJfiZqln4l8e/D2Lw3qdjqFzDqDuTauLkQ4eFtzqjZ2gKzHkcKeRjIr/DXVrPw7
8SPG0XjHWIE1gyokd9qIEDTRqzZKluFVh5LBAcbQuMhePU/DfgLwx4QuJ7jQ9KS1nnQI8hke
RtoOcAuxIGcEgYzgZ6CjxJ4C8MeL7iC41zSkup4EKJIJHjbaTnBKMCRnJAOcZOOpoA8h+Ifi
DwzqngTxXJ4cgfTzLrEMN5dC1VotVlBY7Y5FJAACebnj85DnDh8Yaz4A8PeGbnTvHkGtW1x5
U11ouEeS3QIhMPmHeUUD5MfLg8qp+bHvUfgLwxD4Ul8MRaUiaPM++W3WRwXbcGyz7t5OVXkn
oAOgxWfpXwn8D6LqlvqVjoSJd2774neeWQK3Y7XYjI6g44OCOQKAOzr52+LmlWN78dvDNnPb
IYL9LNLpV+QzBrh0O4jBztAXOc4A9BX0TWJq3hDQNc1nT9X1HTkm1DT3V7a4DsjIVYMudpG4
BhkBsgZPqcgG3RRRQAUUUUAFeG/tBQ31zrPgmDSy41CS4nS1McmxhKWgCYbI2ndjnIxXuVeM
/Gy6+w+Mfh3d+RPceRqDy+Tbpvkk2yW52ovdjjAHc0AezUUUUAFFFFABRRRQAV5pr/w6vtJ1
RvEnw9uk0q/RA02kKuy0vyvAVlBCqdpYdMZIIKHL16XRQB5xafFJ9IiMPj7Qb7w9cR7UN2sL
T2czlQcJIgb5j8x2/NgKctnirH/C6/h7/wBDB/5JXH/xuu3vbCz1OzktL+0gu7aTG+GeMSI2
CCMqeDggH8KyP+EF8If9Crof/gvi/wDiaAMe1+LXhHU/Pj0i6vtUuYoml+y2Om3EkjAeg2YG
SQMkgZIyRUc/izxnfXEqaF4Gc2cjmO31DU7xbbHO3zHtyPMCA5OOGK4OATiur0zQtI0Xzf7K
0qxsPOx5n2W3SLfjOM7QM4yfzNaFAHmk/wAPPE3ii4lufFvjG6t4p7cwPpegu0Fuozj7zk7w
Vzu3LnLYzhQK7fRfDmi+HLfyNG0u1sUKIjmGIK0gUYXe3VyMnliTyfWtSigAooooAKKKKACi
iigAooooAK5jwf4+0Pxz/aP9jSTt9hlEcnnRFNynO11/2W2tjOG45A4z09fL3wP0PX9WuNbn
0LxQ+hvAkKSgWa3KzBi5GVYgArsODgn5j0ycgHu2l/Ejwrq+japq9tqiDT9McLcTSgpwVBDB
D8+CSVGQCzKQAeM8/pvxo0m8t21C70HX7DRS5CarLZF7fbgDLsmcHzMoAN3OORkgeHeE/wDk
kXxE/wC4b/6Pauj0po9V+E1vaax8TtO0rS2TZJo6abDJLGFm+XhCJGJKq5OMnJJzyaAPpWCe
G6t4ri3lSaCVA8ckbBldSMggjggjnNYGuePfDHhvWbfSdY1VLO8uEV41kjfbtZioJcLtUZU8
kjGMnio/h1Zf2f8ADvQoBfz30ZtVlinnTY5jf50UrubG1WVcBiBt44rxn45aNea/8VNO0+wT
zLltFMqRgEl/LNxIVUAEliEIA7kigD3nX/EWk+F9LbUtavUtLQOE3sCxZj0CqoJY9TgA8Ano
DWJ4l+IujeH9D0+/jE9/catEJNKtIIn33hOzaB8vy/6xOvPPAJ4rw3xb431b4t6BFY2Vilsd
GspNU1OMyDbKyEIWjyMgKrlsFudzDkqpY8YtfLrPwub7e+n2g0fTzBeTLuht5dw3yYb5CVHl
lh6Bc8YoA9q8PfE7S9X1CPSdUsr7w9q7xRyJaatH5PnFjtxETjf83AyAT2HBxqaH488N+I9Z
uNI0u/eXULZGea3ktZYmjCsFbO9RghiBjrXkusLa3fjHwdNq/wATYPEdzFqsQtLfT9OgOwmR
CS7RyAKpKoMnJ9AcGuP+CeiazqviHUpdD8SwaJcw2oVma3S4klRnBIWN+NoKjLZ4JUfxUAfR
SePfDDprb/2qipob7NRZ43QQtuZQOVG4llIAXOTgDqM4f/C6/h7/ANDB/wCSVx/8bryHRNPu
Ljwr8XrXW9RgS9ilhkubkABJZ45pXIX7v33XaOB94cdq5zV9Z8VX/wAI9ItLzSrWHw1a3vl2
t4kQjeWULJxgNhhhnywXkqcsWzkA+mfEHj7Q/D14NPeSfUNXb7ml6bEbi5bADH5B935Tu+Yj
IBIziq/h/wCJPh7XojALr7Pq8MW660t45PPikClnjVCoaVl2sCEBPHTkV474sju7X9pOWZdZ
Tw8ZUV4dTuoUaNF+y7SQJCFYEqyZz1z3Fa+nYk+OvhO4m8b2vim8a3uUeS1to4lgjEUpQExk
qSSznHUYGeCKAPQ734u+CNMvJLS/1ae0uY8b4Z9OuY3XIBGVMeRkEH8ak8SfFHwx4WsILjUJ
7rz7hC8NkLV0uHUPtJKSBSgzkgvtyFOM1yljbaXqf7TGtJLpcDSWelRyF5v3u6cGArKoYfIw
VlUY/u56k1lzXq2X7VIOrxuY5rdYdOluJmjSEtAMFM8MGbzU29N0h/iFAHo+jfEjwrrTzQR6
olpeW6Fri0vwbeWEqrM6sHwCUCtu2khccnHNZf8Awuv4e/8AQwf+SVx/8brM8T6j8PdZ+IS6
RqAeTWn025tW1O3uV8qzi8ucSo537VdV8z7yHG4Z9vMNA1Xxsfhx4t8NaPc6PdaToiSJcTpl
pGgdn8zyG4RkIWRssN2G+XnaAAfTNhe2+p6fbX9pJ5ltcxLNC+0jcjAFTg8jII61YrA8C/8A
JPfDX/YKtf8A0Utb9ABRRRQAUUUUAFFFFABRRRQAUUUUAFeY/F61s4tQ8Da5dT+T9i1+CIu7
hY1jch3ZiemPJXnIAGc+3p1eC/tLTMtv4agATY73LkmNS2QIwMNjIHzHIBweM5wMAHvVFFFA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVj6F4W0Pwz9s/sXTIL
L7ZL50/lA/M3Yc9FGThRhRk4Aya2KKAM/T9D0vSry/u7Cwgt7jUJRNdSRpgyvjGT+p+rMerE
nnIfhN4Eg1Q6inhu1M5dn2uzvFls5/dMxTHPA24HGMYFdnRQAVj3HhfRrvxRaeJJ7Pdq9pEY
YLjzXGxCGBG0Hafvt1Hf6VsUUAYFt4J8PWn9ueRp+z+3d39pfvpD5+7fnq3y/wCsf7uOvsKt
6l4c0XV9GXSL/S7WfT0QJHbtEAsQClRsx9whSQCuCO2K1KKAOc8N+AvDHhC4nuND0pLWedAj
yGR5G2g5wC7EgZwSBjOBnoKt6F4W0Pwz9s/sXTILL7ZL50/lA/M3Yc9FGThRhRk4Aya2KKAO
Yf4eeFpINahfS8x63Ks2oD7RL++dXMgP3vl+Yk/Lj8quah4Q0DVfDdv4evtOSfS7dI0hhZ2z
GEGF2vncCBxnOSCQeprbooAx/EfhfRvFunx2GuWf2u2jlEyp5rx4cAgHKEHox/OoPDPgnw94
O+1f2Dp/2T7Vs8799JJu252/fY4xuPT1rfooAy4/Dukw+JJfEMVkiatNb/ZpblSQXjyDhhnB
Pyr8xGcADOBioPEnhDQPF9vBBrunJeJA5eIl2RkJGDhlIODxkZwcD0FbdFAHMaR8PPC2g6fq
dhpml+RbapF5N4n2iVvNTDDGWYkcO3THWr9n4X0bT/C7eG7Wz8vSGikhNv5rnKSFi43E7udz
d+M8VsUUARwQQ2tvFb28SQwRIEjjjUKqKBgAAcAAcYqSiigAooooAKKKKACiiigAooooAKKK
KACvCf2lYbdtP8OzNdbblJZ0jt/LJ8xCELPu6DaVQY77/Y17tXjv7R0ELeBtNuGiQzpqSokh
UblVopCwB6gEqpI77R6UAexUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAUUUUAFFFFABXkP7Rn/JPbD/sKx/8AoqWvXq8h+P8Aoeqa14e0gaXYareyRXTF4rNP
MjAKH5nQfMWGMKwGAC4JBYZAPXqK8h/4W94v/wCiT65+cv8A8Yo/4W94v/6JPrn5y/8AxigD
16ivIf8Ahb3i/wD6JPrn5y//ABij/hb3i/8A6JPrn5y//GKAPXqK8h/4W94v/wCiT65+cv8A
8Yo/4W94v/6JPrn5y/8AxigD16ivIf8Ahb3i/wD6JPrn5y//ABij/hb3i/8A6JPrn5y//GKA
PXqK8h/4W94v/wCiT65+cv8A8Yo/4W94v/6JPrn5y/8AxigD16ivIf8Ahb3i/wD6JPrn5y//
ABij/hb3i/8A6JPrn5y//GKAPXqK8dn+Mvim1t5bi4+FmsQwRIXkkkeVVRQMkkmDAAHOak/4
W94v/wCiT65+cv8A8YoA9eoryH/hb3i//ok+ufnL/wDGKP8Ahb3i/wD6JPrn5y//ABigD16i
vIf+FveL/wDok+ufnL/8Yo/4W94v/wCiT65+cv8A8YoA9eoryH/hb3i//ok+ufnL/wDGKP8A
hb3i/wD6JPrn5y//ABigD16ivIf+FveL/wDok+ufnL/8Yq5pvxZ12W4ZdU+GXia2g2Eq9rbv
OxbI4KsiADGec9hxzwAepUV5LqHxo1Kxt5mb4ea+k6PJKiXMbRKbVAN0zNsJUgsu4YKjcPnr
PsPjnruqpv074b6jeIUD7re4eQbSzKD8sJ43I4z6qw7GgD2qivDdN/aC1LWLhrfS/AV1fTqh
do7W8aVguQMkLCTjJAz7itT/AIW94v8A+iT65+cv/wAYoA9eorxmb42eI7e8trSb4ZarHc3O
7yIXlkDy7RltqmHLYHJx0rQ1345WehfY/tXhHxHbefLg/wBoWwtv3Y++yZJ3sMr8vA55YUAe
rUV4jqf7SWkReV/ZXh++us58z7VMkG3pjG3fnv6YwOueI9K/aIm1XVLeyg8FXU7yvgpaXZml
2jliqCMbiFBOMjp1HWgD3KivNJPitqQ1SKOL4c+LW08pmWdrFllVueFjwQw+7yXHU8ccwaB8
ZZtX0tb2XwH4mKSORE+nWpuonUcZ3/JzuDAgA4x17AA9OnnhtbeW4uJUhgiQvJJIwVUUDJJJ
4AA5zRBPDdW8VxbypNBKgeOSNgyupGQQRwQRzmvJfGfxWs5PCesafc+FfFVjJeafPFHJeaeI
kG5RHuJL/dDSICf9odyK8J8H+P8AxB4IvPN0m63W7bjJZTlmgkJAG4oCMNwvzAg8YzjIIB9q
UV558OPifN8QLi7RvDd1p8EKZS7EhmhdgRuQvtUB8MpA5yMnjHPodABRRRQAUUUUAFFFFABR
RRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBgeN9BuPE/gzVNFtJ4Ibi6i2xvPEJ
EBBBwQQcZxjcBlc7hyBXlHhn9nO3glhufE2rfadvL2dkpVCQ3AMp+YqVHICqeeDxklFAHt1l
YWemWcdpYWkFpbR52QwRiNFySThRwMkk/jViiigAooooAKKKKACiiigAooooAKKKKACiiigA
ooooAKKKKAP/2Q==</binary>
 <binary id="i_002.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQY
GBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYa
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAAR
CACVAO4DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD2j4ha74js/E/hrQ/CzaZHPqi3LySX8buq
iIIQAFIPO41EbX4qZ/5CPg/2/wBGuP8A4qneMf8Akr/w/wD+uOo/+gRV6HQB5yLb4qA86j4P
zj/n2uP/AIqg23xTAP8AxMfB/v8A6Lcf/FV6NRQB5x9n+KecHUPB+P8Ar1uP/iqd9m+Km7/k
I+D8/wDXtcf/ABVei0UAedfZvipz/wATHwfn/r2uP/iqb9n+KW3/AJCPg/H/AF63H/xVej14
j8S/GHiDT/F3iTRNAZzdHRkuoJHQmK0VBKZZT/tHCge+PSgDqDb/ABSyAdS8H/8AgLcf/FUf
Z/inn/kJeD8/9e1x/wDFVx3h/wCK3iC8trGwg0eKS5kuDZC/nYiElbUTEsAdxbOcgYGCOc1T
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
dKtxRpEgSNQqAYCgYAHtRRQB/9k=</binary>
 <binary id="i_003.jpg" content-type="image/jpeg">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</binary>
 <binary id="i_004.jpg" content-type="image/jpeg">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
DAoooATaM57+tLRRQB//2Q==</binary>
 <binary id="i_005.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQY
GBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYa
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAAR
CABHAO4DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD6prnNQ8X6DYeI7XQbzVbaHV7rHk2pf52z
nb7DODgHrXREZ6jNeX+IIor/AMWzeHvDdmi3Et9aanreoOwAh2FXjVc8tIwgwAOFGSetAHaW
3ifRbrX7nRbfUreTVLVS01uH+ZBxn24yM+map6V458M6nZand2Gt2VxbadlrqVZOIRzyc9uD
gjg9q4aI2I8N6NNqRjjQa3qpvm5DCLF752cc4wB+S+1EVvptt4uu7TxC2nyaHNpNkmlrDGVR
IEuQESUdSfMePngYzwOaAO7m8c+GofDv9uSa3ZjSN4i+078jef4Mdc+3Wl1bxr4b0mwsb7Ud
a0+2sr//AI9pnmG2X3B9Md+1cXpkRk1nVbHWJNNPi3+0pbjS5DC5tRKbXCHyweoiznJycZB9
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</binary>
 <binary id="i_006.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/4QAWRXhpZgAASUkqAAgAAAAAAAAAAAD/2wBDAAgGBgcG
BQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgy
PC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCABlAcUDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEA
AAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1Fh
ByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5
usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEB
AQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdh
cRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RV
VldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3
+iiigAopMtnp+NAOeDwR1FAC0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQA
UUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAITgZwfwpa8H8T+OPGl3
oGvW1ydP0W9s5YmFvFJNHdpEZgoIP3ZEYEfMp7HjnjoLLx34wGqIb2DR3sV8QjQ38qKRHc5I
Miku2MccHrQB6vuH+PtSbh3BH4V5ePiB4k1vWtS03QNO05ZNLW5kuGvSypOiTvEio2RtJCEl
jwDkcVc+Ht3r9yvjG41a7E3l6nNFbxF2f7OVGWUMT9zlQAMdD68AHoufalr548KXt9ovg6fx
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
2Q==</binary>
 <binary id="i_007.jpg" content-type="image/jpeg">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
lepoNwLp8ag4kAAZs5mAyFG7IK5PbNAHu+n+HdAsY7d9O0fT7dYmaaEw2yJsZ12sy4HBK8E9
xxVxYrC0hhsFjtoYpAY4rcBVVhgkqq9+MkgV4NqXjjVbLRLnTrS/1F9dXV7wtbwZkkggFswU
hSMiNSwZen3SeMYGvby+GJvEvhebTda1S8s7TVViS4uLp2t1kktWfashOSzOE3Kx6ll4GRQB
6zp/hzQ9JVF07R7C0CSGVfIt0Ta5UruGBwdpIz6EimR+GNAi1KXUo9F09b6bd5lwLZPMfdnd
lsZOcnPrWtRQBk2HhbQNKZW0/RdPtWWQyqYbZFKvtK5GBwdpI+hPrWnLDFPE8U0ayRupVkcZ
DAjBBHcH0p9FAGXe+G9D1GAQXujafcQiTzfLltkZd+3buwR1wAM+gFWYNK0+1vbi9t7G3iur
lVWaZIwGkCjChiOuBwPardFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABWfretWP
h3R7jVdTlMVnbgGWQIW25IA4AJPJA/GtCuP+Km8/DDXxHGzu1ttCrnJywHYH/Pp1oA0NP8X6
VqmmXupW0V95VlGZJVksZY3wAT8qso3HCnpntV251qwsJ9OhmZ0fU5vLt18ogs2wvyMfLwvf
mua1bTNUsPhh4hiutXvdWuZNMnMbzQpHIhMR+UBFB6+uTXnXhy0h/wCE00b7db3UvimPWWku
J5IpGP2M2x8ss5GAPugDPY0Ae22lzZPd39vawlJYXH2gm3aNWZlzncQA/uQT71JbapY3Oo3e
m286NdWQj+0Qr1iDglM/UA14rq2kXOufF+90/VIL2fRZtQ5R95iYrYswA7feC8fStv4T6atn
4hu7u6s5ob660TTmEkqON5CFZeTxnKx5HXP40AesPEjq6tGjK4wwPRu2CO4xSLGqhAsaAIPk
A/h4xgccCpKKAGKgDl9qhmHJHX6UoRQNoRQoOQMd6dRQAUUUUAFFFFABRRRQAUUUUAFFFFAB
RRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUU
UAFFFFABRRRQAUUUUAFFFFABRRRQAVk+JNetPDGgXWs3yzNa2qhnEK7nOSFAA6HkjqRWtXH/
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
AFFFFABRRRQAUUUUAFFFFABRRRnNABRRRnnFABRRRQAUUUUAFFFFABRRRnnFABXiOufBvxD4
o+Il94hu9ag0y3a4D2zWxd5kWMARkdAp4B4PBr26kAA6DpQBHawvb2kMMkzzvHGqNK4AaQgY
LEAAZPXgAVLRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAEZGDXm3xL
+FB8f3MN4uu3FrNbx7IoJEEkA7kgDBBPGTz0HpXpNFAGB4K0nUtB8HabpOrTwT3dnGYTJASV
ZFYhOoBzs25981v0UUAFFFFABRRQTgZNABRRRnNABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFA
BXI+Mbqe+v8ASvC9hdPBdajKJrqSJyrxWcZ3SEEcqWO1Af8AbPoa61hkYrmtP02fTvEWu+It
aubYCfZBasSAttaxgkAsQMFnZmbt93n0AKngjw/rXhy11Z9f1pr1ri7aeMtLvSGPGerKpz2P
b5RjHNef6V8S5F1HxDrlvdnU/t0KnTtM8zC24W48iINk4Uvv3kYGB17V69qVpa69pV7phuD5
EytbTtbSAOmR8y552nB/WsjWPAOh61Zw2sls1tHBbfZYTav5bRKGR1wR/daJCD9fWgDi7HXP
Gtr431TTnTSLjWb54reHaZVtIIoYjI74J3Mf38YIBGT7Vp6Hr99onwifxBeTWr6nPLPOWu7g
rCHknYLyeQoGPlHPGBzWh/wrHToo4TBrWuQXyTTTG/W7BuJGlRUcMShBBEaHpxt4xWhc+CdF
1HwfZeHIZrmCzsWT7NcWs4WaKWIkBgw43Ag54654BHABn+F/Gl3qXgnW9b1JLRjpctzGJbaO
SOKZIkDbgsnzDqVIPda5+Tx94zsbSC2vdL0aTVb6C0nsoojIqL58vl+XJubO7oeDj5W64rp9
S8DFPh7qnhnRbl0kvRIftF5MXYvI+XLNgk55/Oo9J+HmhW01reRXl/qE9rcrKlxc3nnndEJI
0jJIwFQu/Awc9elAHPS/ErXNIDaprFnpp0KC+k0yZrWOUzvNHHIzugJwIw0ZXBGepyBWfJ4l
8Xp4t0691a3soZWs7b7LZ24lKp9ruVTbMu75nWOOTkYGR06iu0j+Gmhf2neXUst/Nb3Uk8v2
B7j/AEeGSVSsjogAwxBYZJ4ycYqqvwl0X7JLC2q6487Nbul697/pEJh3BNjbflGHYf8A1+aA
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
UUUUAFFFFABRRRQAUUUUAFFFFABRRRQB/9k=</binary>
 <binary id="i_008.jpg" content-type="image/jpeg">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
oooAKKKKACiiigAoppAYEEAg8EGuQ+Gl1Nc+C4EuZ5pbm3mlgmExJeMhjhTn0UrQB2Nc8PB+
if2hqt99jUzarF5N2dzYdCCCAM/LnjOO4z1roaKAOP074e6ZYWk9tJeahfJLZtYqbycOYYWB
DLHgDbnj/vkVYu/BGl3Kz2+66gsLgIJ7GCQLDIVwASMZBwqD5SMhRnvXUUUAUdU0231jTJtP
vF3wTrtcA4PsQexBwfwrIHgzTJ47hL+S71ATvC0n2qXIYRZ8tSFwCoJLYI5PJzXS0UAcgvw9
0SG7e4tPtdm7zySsLSYxArIqCSPj+BvLU4HII4IrT0jwppWhLarp0DxJbQyQRL5rMFSRw7Dk
/wB4Zz1rcooA5zVPD6Dw/Jb6fEXurfSprC0EkhwQyKAD25KJyfSszSfh/Y2+lQW11c39wUsW
tIlnmDfZVkTbJ5eAMFvU7sYwMDg9tRQByVx4C02WB4ILvULOKaCOC5S2n2idUUIu4EHB2qBl
cHAqo/hW4m8W6/FLF/xJNa00RTPGQGSRVEQUZ5B2FiD0ruKKAOO0b4fabpF9p94+o6tfzaah
Sz+2XZdYFKbCFUAL93IzjP5DEVt8MtEs4kt4J9QWzgn+1Wlv9pJS1n4xIh+8SMcBiw5OQc12
1FAGJ4i8OWviXTEsrqa5hEcqTxzWz7JI5F+6wJB5H0rn9T8JXtl4Y19NOuLnVdZ1ZVhee7kQ
MYshNvACgKjOc4yTn2A7uigDl7Dw9d2PjSbVIbgLpb6elstt5jsQ6kYO08ABRjrnOfWuoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBpOATzx6DNch8NNOm07wX
bC6tpbe7nkkmnWUEMzFsAkHkfKq12NFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRUTypGU
DOFLnaoJ+8cZwPwBpk93b2rQrPKkZnkEUQY43uQTtHvgH8qALFFZ+o6zpekCM6lqNnZCTIQ3
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</binary>
 <binary id="i_009.jpg" content-type="image/jpeg">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</binary>
 <binary id="i_010.jpg" content-type="image/jpeg">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
XLgeXHgn7jHdgHpUUXxblkVrQ6dBHqtvb3815azF4RD5GfKG5gAQwxn09u2vZ/CTQYrKGG9m
vrqRDHJIVu5IklnQbVlKBuHAwM5+ua6fWvDGleIJYn1K18/y4JoFzIy/JKArg4I6gDnqO2KA
Oe8AeMdS8TXWq2eqWcEctksDpJDBNCrrKpP3ZQGwCp57gjirl/4yv7DU7i1Twbr91DFIEW5t
442WTPdQXBx/k4q7oHg3RvDd5NeafBMLq4jWOeea6kmeXacjcXJ556/h0rfwMYxx6UAZfiTW
G0HQbvUkit5WgTcsdxdLbq5z0LsMLx615R4G+J3iPxD4j0awnj03yp0mmmDahCHkR5DsCqq5
DRqrDZ1I5OK9a1zQ7DxDo9zpeo20c1tPGUIZQSpwQGXI4YZyD2NZGifDzwx4f1FL/T9Jt47p
Io40kKKShQMNy8cMwY7j3wKAOdh8beJZfEMUi6dpo0CbXG0iBtz/AGiULvDSL/DtBRj+BHbN
S+LNCg8S/FDSNNuLy4ithpNxJdQQSFPtEXmxDymI52MevqFxXWWfhbSrKLTY4YGA06eW5ty0
rMRJIH3sSfvZ8xuvr7Vgz7f+F32YJ5Ph6bgnr/pCf/XoA7SCCG2gjgt4o4oYlCRxxqFVFHAA
A6D2qSiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKAOL+LTKnwr8QFow4+zgYPqXUA/gefwrRi8deEltomPifRwCAMG9jBz6YzW3fWFpqdnJZ3
1tDc20gw8MyB0bvyDweea5+f4b+Crhwz+F9KBAx+7tlQfkoFAFtvG3hNQSfE+jYHX/T4v/iq
F8beFHTcvibRsYz/AMf0XA/76qpF8N/BUMgdfC+lEj+/bKw/I5FOf4d+DJM58LaQM5+7aIOo
x2H/AOrtQBeHi3w2zKq+IdJJcZUC9j5HPTn2P5U5vFPh5CQ2vaWMDJzeR/4+xrJ/4Vj4I/6F
jTemP9SKjb4V+BnlMh8M2O4rtICkDH0Bxn360AajeNPCq/e8S6MPrfRf/FVfh1fTLiFJodQt
XidQyusykEHuOax5Ph54Mk+94W0cc5+WzRe+ewqtJ8LfA0qbW8M2AGc/KhU/mDQB0n9pWH/P
7bf9/V/xqN9Z0uNmV9Ss1ZF3MDOoKj1PPSuab4TeA2QqfDVpg+hcH8waYfhD4CII/wCEbtuf
+mkn/wAVQB1aarp0i7kv7Vh6iZT/AF9j+VcrJPZ3Pxg04wSQzSLodyHKMGIHnxYzj/gX60rf
CTwGylT4btcH0Zx/7NWlo3gfw14ZvptR0bSYbO6kiMTPGW5TIOME4HIHT0oA6KiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAP/Z</binary>
 <binary id="i_011.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/4QAWRXhpZgAASUkqAAgAAAAAAAAAAAD/2wBDAAgGBgcG
BQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgy
PC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAE6AaADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEA
AAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1Fh
ByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5
usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEB
AQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdh
cRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RV
VldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD0
j4h+KdY8Ox6Lb6Ha2c99ql+tov2vdsXI6/KQfTn0qqJPi0sQJg8Hu+SCN1wOPzo+JWz+0fBR
/jHiCHHTptbP9K9AxwaAPOzJ8XNx/ceENpB4DT/hT/M+LLjBg8IR9PmDTt39M+nNbepeO/D+
latPpd1dTG9gQSSxQ2sspRSMgnapwK1dE1mx8Q6VBqmmTGa0nzsk2lc4ODwfcGgDjWf4ugsF
i8IdeGzP0pufi+Vzs8IA+n7+vRcClxxigDz6P/hbRkAb/hEQuMk4nPPp1olb4sgJ5cfg8k53
Y+0cfma9A4FGBQB54j/F0ON0PhArnkZn/wAaeo+LLBix8IIc/KNs5yPzr0DApaAPOy/xcXH7
nwg3Y8z88/WnY+LYLj/ikcA/L8s/zDP144r0HAoPagDk/AWvarr2l376ylot7Z6jPZP9kVhG
fLbGRuJPXNdbXC/DQL9m8SlQMHxFfc/9tK7qgAooooAKKKKACg9KKKAOD8XeIvEtp4u0bw94
ci0zzr+GWZ5r8OVUJjptOf0o2fFRvmEvhBc9hHcHH45/zmqmuY/4Xt4YBBz/AGXc4x+NejD7
tAHC+X8VNpHn+Ec54PlXH+NKU+KXHz+EB058u5/HvUl18U/DVpcahAz38jafK8N00FhLIsTI
SGBYLgdD3rr7K7hv7G3vLdi0FxGssbEYyrDIOPoaAOKMXxUycT+ER/2yuP8AGk8v4rbiPO8I
7cdfLuOv513tFAHB+V8Vf+fjwj/36uP8aUx/FTj9/wCER2P7q4/xru6KAOD8r4q/8/HhH/v1
cf40eV8Vf+fjwj/36uP8a7yigDg/K+Kv/Px4R/79XH+NV76X4p2On3N283hNlgiaUqsU+SFG
eOeteiVn66FOgalvYov2WXLDqPkPNAGf4K1m58ReDtK1i8SJLi7gEkixAhQcnoCSf1roK4/4
WY/4Vh4dwMD7IP5muwoAKKKKACiiigAqK5aRbWVotvmBCU39M44zjtUtVtRLDTLsocMIXwcZ
wdp9x/MUAeb+GtZ+J3ifw7Z6zbHwtDDdqXRJYp9wGcc4Yjsa1fK+Kv8Az8eEf+/Vx/jTvg6+
/wCFOhneGxG44GMYkbiu6oA4Pyvir/z8eEf+/Vx/jR5XxVz/AMfHhH/v1cf413maKAOD8r4q
4H+keEf+/Vx/jQYvirg/v/CP/fq4/wAa7yigDgzH8VQRifwiRk5PlXH+NHlfFX/n48I/9+rj
/Gu8ooA4Qx/FQgYn8Iggc/u7jn9aZ5PxW3E/avCWMfd8qf8AxrvqKAOD8r4q5P8ApHhH/v1c
f41BYa94zsfHuk6D4i/sR7e/t55lewjkDAxgcfMfcdq9DrhPEBB+MHg8bBkWd8S3f7qfy/rQ
BT+JoxrfgVuw12MdfUGvRuoNedfE/Kal4ImKblXX4VO373zAgf8A1/pXovUUAef+HoZ1+Mvi
6cxSrC9paAOVO1jg9D0P615/ZPYWNp4dj8a291H4YNpeZDrKIhdfaWI8xV77M7c+tfQGBRgU
AfPsN/bX0vhPQvFC37pp1jdTXdrPDM7KHwLZZQgyzhVzzjr2PFW/COn2vjGHTbXULO6vrWx8
OPBJDMJEVLxJipUnoHwfc4Psa9d1ya18OaTrOvwWcRuktjNMyrhpjGp2hiOcDp7ZNcloXxAs
rnwZDrNjoqwXM2pRQX1kDsMcszqGkJxyCGDZI5oA85sV8a3dteWcCX9vFN4bt/Pu5Fk/dLFG
x2oOMyOfl9RuY1ZjSwWaObxvBqtzNcaHYjRDCJDI0nlDzFjI+7MZADz9TXtOh+K9E8STXcWk
ajHdvaNtlCZGMkgEZ6qSDgjI4qh4i8XS6Fr+iaWulzzLqd0sDXbHbFHkE4B5JfjpgD3oA4bU
tD8VaZeafP5xuNM1LXrO8kicSNeWpwMo20lCo24JH1rntC/4TGXT/D1zff2nBY23iIR+T87S
3Id3d3kHGEUKFAxglmr6DUccilwKAPD/AIT/AG4ajpz+KrfU5Lh1mXRZroMyRqGbzFYHlZPQ
tn5eB7+4HqKXFIe1AHD/AA1yLfxMpzkeIr7r/wBdK7muG+GpJtvEpJ5/4SK+/wDRldzQAUUU
UAFFFFABQelFB6UAed62MfHDwu7IcNpt0qtz1H4+n8/y9CH3K881xcfHHwm3POnXY6cdK9EH
SgDyrw9p9/HoPxNjezuka51K/a3V42BlDKcFBjkHjGOtcrdwWlpJfJ4mtNUNy2jWQ0DykclJ
BCgZYto+SQTcnP1xXv8AgUYFAHzv4j1Cy16fXF1aO5udQsdGisLV47WSUfb1BebayjAYNwSc
dCenW5f6PbeJtO8YeI4NPurycpp8ml3WyTeR5ce8x+uDuzj3+lep+LtVi8CeENT1nTdNhkdZ
llaBf3YlkkkVWYkA/Mc59zWVZ/EHSo9P8Oz2dtDa6Repci4Z3EZsPJjLspQDrkYx7g85oA8+
1JPFlxB4qC/b7bTbPxD9pE25994WmjjWJRnIjVcsSCR930rRgstNXxTqEWq6JrNz4tfXXmtL
iLzF/wBH3jayy42iJY+qn6cZ49d0XW9O1+xN3p1wZY1cxsGRkZGHVWVgCD9RXES+Ptftby1u
7zw/Ba6HdamumxLNO4vHLOVEoj24K99vWgDnbvwt4p0S2j0R3Go6daaNqi2dzawyCQs6/Kkn
zEZ5AUD0x71lSaT4pbTIb/U47yPzfC15bRafGjsLdUhULvP/AD0dstgjPQc4r38AUYFAHnHw
uhvIPtSa9aXX/CQtDE8t9Llo54CP3SxnAC7RwVxncCTnNdt4gP8AxTmqc4/0Obk9vkNaOBWd
4gx/wj2p7hlfsk2cHHGw0AYPwtBX4YeHQf8An0U/qa7CuP8AhX/yS/w9/wBeg/ma7CgAoooo
AKKKKACobtQ9lOpQODGwKno3HSpqhuyRZzlQSfLbAAznigDjPg9I0nwq0Is6PiJ1BUngB2GO
e4ruD0riPg+xf4VaESMYiYduzt6V256UAcu/jbT7bUfEsF6v2a20GOGSe5LZDiRCwAGODxjH
Ocis7S/ip4buPDOm61qt3FpQ1DzPKgncu3yMVJ4HTI64rOi8A6ld/FLVdZ1CZBoEstvcx2qk
E3M0abULjHCqctjudtZM/hDxPb+Gn0c6T5oulu1lvNNvI4rpd80jojM4w0LBxlQc/e+hAPQt
U8beGtFktk1LWbS2NzH50O9+HTOAwI4xS3/jTw3pd1Z219rNpBNeBWgR5OXVvun2B9TgV5XZ
6R4t1CHUbX/hG0322hnw4rrdJFGXxuaUBlBK/MnTPQ8nJxRvNB8aeMfDNxHFok1rBe2ltFDG
LiKEAwfKxuMqJHJIyo6AUAetj4g+FDq/9k/23bDUPP8As32dtwbzM424I9ePSrGkeM/Duval
Pp2latb3V3CCzxRk5ABwSMjB5x09awLnwnqGpeN73WZI0tYL7w9/Z8mJN7Rzs7ZxjGQARzxm
uU8N+DPE2hxac76LPcXujW8wgabWN0LOy7QIUA+UMcE7+BjA7UAd/afEbwhfJdvba9aSJaRe
dOwJwiZA3dOmSB+Irpg2QDjrXkeofDvW/wDhDLDSLWCBp4vD01hIVlCjz3lgfGT1HyPz/jXS
eAdJ8TaXdah/a7XKae0cS2ttd34vJUdc7yHAUBT8oxjt27gHdVwev/8AJZPCH/Xlff8AoKV3
lcHr/wDyWPwh/wBeV9/JKAK3xKA/tnwNjGf7ej/hOfunv/n9K9EHSvM/ixc2NrqHgqW+kESR
63HIZHOERQOSx7fw/rXU/wDCwfB4AP8Awkul8qWH+kr0H40AdJRXOnx74RCq3/CS6Vhun+lJ
/jUbfETwaqIx8TaXhxlf9JWgC/4p0uXW/Cuq6XA6pNd2skUbN0DFcDPtmuB1P4c6pLZeFruw
kgi1CyjtINVtg5EF1HDtIz6lSCAcdGPTFdefiF4NEXmnxLpezOM/aV6/TNK3xA8HKMnxLpeN
u7/j5Xp+dAHPfDjwrqvh+8vZdU0/7OnkR21nv1H7SYolZmEa4RcLls5Jz0rd8V6Hea1f+HJ7
XyfL07U1u5/MbB2BGHHBycmrCeOvCUi7l8R6UR/19J/jR/wnfhHaT/wkmlYBx/x9J/jQBvqM
CnVzkfj7whJnZ4l0o4AJzdIO2fWmn4heDhtz4m0v5hkf6SvT86AOlpD2rnX8feEIwxbxLpY2
nB/0pev50z/hYXg8ybB4l0vcOf8Aj5X60AZnw2BEHibIAP8AwkV90HH+srua4H4V3Fvd6Z4g
uLWZJreXX7x45E6OpfII9iCK76gAooooAKKKKACiiigDzrXGB+OfhVCzH/iXXR2dl4PP1OMf
lXoi/dFeYeLdS07SfjR4WvNQvIrSEafcqZJmCpzwBn866r/hYfg5SFbxNpe7BP8Ax8L2z/hQ
B01Fc0vxC8HNtx4m0v5jgf6Svrj196RviL4NUAnxNpfPP/HwvrigB3jrRLvxD4VuNNsWjW4k
lgdTIxVcJKjnkeymuS8VfDW5v/Fz6zpy289hdW8wu9OnnaJWnaPYJVIBwThMkAfcB5zx1cnx
D8GxsA/ibS84B/4+VP8AWm/8LG8F/wDQzaX/AOBC0AO8E6XqWlaG8Wsoh1KSdpJ5xcee0/QK
zNsXkKAoGOAo+lctaeG/GKeO5td1Kz0rU8XJFnNNfSL9itycERxbMBivU9Sf16f/AIWL4LA/
5GXS/wDv+tK/xE8GJIUbxNpYYdvtC0AdMv3RS1y4+I3gscDxNpf/AIELR/wsfwX/ANDPpn/g
QtAHUVna+VHh7Ut4yv2SXIzjjYe/asj/AIWP4L/6GfS//Ahao618Q/B82g6ikPiXTWla1lVA
twCSdpxj8xQBN8K/+SX+Hv8Ar0H8zXYVx3wr/wCSX+Hv+vQfzNdjQAUUUUAFFFFABUdx/wAe
0v8AuH+VSVBeyCKwuZGJAWJmJUZPAPbvQBx3wfZX+FWhFQQBEwORjne2a7ivJ/hZ408M6R8N
NGtNQ1zTbW4RJN0TTgMP3jdQeh5Brsf+Fi+DNu7/AISbS8c/8vC/570AdPSEZFc0fiH4OBUH
xNpeW6f6Svrj1oPxF8GgkHxNpfBwf9JX/PagDpNvvSgYPWuY/wCFj+DP+hn0z/wIWj/hY/gz
/oZtM/8AAhaAOoormB8RfBjA48TaXwMn/SFpP+Fj+C/+hn0v/wACFoA6iiuX/wCFj+DB/wAz
Ppf/AIELR/wsfwWP+Zn0z/wIWgDqK4bXyV+L3g/BA3Wd+Dg8t8sZwR6Vo/8ACx/Becf8JPpf
/gQtc7N4m0fXviz4VGjana3ojtL4TGB1cKCExyOQcqfyoA7zUdF0vWI0j1TTrO+jQ7kS6gWU
KfUBgcGs7/hBfCOf+RW0P/wXRf8AxNb9FAHP/wDCC+Ef+hV0P/wXRf8AxNL/AMIL4R/6FbQ/
/BfF/wDE1v0UAc//AMIL4R/6FbQ//BdF/wDE0f8ACC+Ef+hW0P8A8F0X/wATXQUUAeZ+NvCP
hm0vfCqweHtJhWfW4o5RHZRr5iGOQlWwORkDg8cCus/4QXwj/wBCrof/AILov/iak8Ra6+i3
OiRJbrL/AGjqCWbEtjywys24ev3f1rcHSgDn/wDhBfCP/Qq6H/4Lov8A4ml/4QXwj/0Kuh/+
C+L/AOJrfooA5/8A4QXwj/0K2h/+C6L/AOJo/wCEF8I/9Crof/gui/8Aia6CigCpp+lafpNv
9n02xtrKDdu8q2hWNc+uFAGat0UUAFFFFABRRRQAUUUUAZupeH9G1l431TSbC+aMEIbq2SUq
D1xuBxVH/hBfCP8A0K2h/wDgui/+JroKKAOf/wCEF8I/9Ctof/gui/8AiaX/AIQXwj/0Kuh/
+C+L/wCJrfooAwP+EF8I/wDQq6H/AOC+L/4mkPgbwiBn/hFtD/8ABfF/8TXQUh6UAeZ+DPBf
h9tR8WLe+G9MkEesyLB59kjBYzHGwVNy8L8x4HFdh/whXhXy/K/4RrRvLznZ9gixn6baXQ9a
l1e/1yB4UjXTr/7IhUklx5aPk++XI/CtygDBPgfwkcZ8L6IcDAzp8XA/75o/4Qfwnz/xTGi8
jB/4l8XI/wC+fpW9RQBhDwV4VEZjHhnRhGTuKfYIsZ9cbaV/BnheTPmeHNHcnn5rGI/+y1uU
UARwW8VtCkMEaRRIMKiKFVR6ADpUlFFABRRRQAUUUUAFIQGBB5BpaKAOf/4QXwj/ANCtof8A
4Lov/iaX/hBfCP8A0K2h/wDgvi/+JrfooA5//hBfCP8A0K2h/wDgui/+JpT4H8JMSzeF9EJP
UnT4v/ia36KAMD/hBfCP/QraH/4L4v8A4muT+JHhHw5ZeC7iSy8NaXFO09vGJbfTk3IGlQE/
IucYz0r0usHxl4hbwt4YudXSATmB4wYy23IZ1U8/QmgBv/CDeET/AMytof8A4L4v/iaefBXh
UxiM+GtGMYOQn2CLAPrjbW4OlLQBgjwR4TUMB4Y0UBuCBp8XP/jtIPA/hJWBXwvogIOQRp8X
/wATW/RQBhf8IX4WEZjHhrRvLJyV+wRYP4basWXhrQtNu/tdjoum2t1t2+dBaRo+PTcBmtWi
gAooooAKKKKACiiigDn/ABNo8Oq3egyS6glp9h1FLpEdQftDBWAjGSMH5s556dK6CuH8fI76
34K2RuwXW0ZiqkhR5b9T2613FABRRRQAUUV89XkeiXGq+M0hjuJvFy60TpjxJJvU7l4QjgY+
bdnHAyeMUAfQtIDnNfPtzp+oL4yvhctINe/t7zrWRdPmluWt/MGwrLvEaw7DyO3TGatr4R0+
b4c+LNcOkMda+2XvkzKH80r5vAHc8ZGcUAe7k4BOcAU2ORZEDIysp6FTkV8+6/B4quLjWru8
tr5k1fS7a5mtbZWxa2wnUGDPeTyzk4A5L8YrZ1LRPB2seCPEsvhvRLw21nbebbORIkJudhyY
kJzvA2hjj0FAHtlFeG6xp/g3QvGGgaZrVgRpEWguyW/kuw84uDlgvUn5/wDgRHQ1h6g9zJpl
jY6lot0LyPSZW0+TURPPJtM0hiSKOP7sqpsy5OQAM8dQD6Oorwqw1qW1svEN1qpvY7m+8M2M
cbtDIzzTiBw5GBwQxwenrVKCbXfEtt4kttHF2mm3Wl21zLfRhm8zy7VV+zxZ6sz5DNnOFI60
AfQJOKWvn3V9E1afWry5/s+S8Fg2mFb64EvnWxPk7o4VHykDlmOAOTnmvoIUAFFFFABSMcCl
pD0oA57wzotlo82tvZ35uzfalLdzgsreTI2AU49MdDyK6KuG+HsEtve+MfNhaIv4guHXchXc
pVCCPXI713NABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFc/400az1/wANTaff
X/2C3eSNzPuC4KuGA5IHJGK6CuH+LkUs/wAOr2KGF5XaaAbUjLnHmrzgfzoA7cdKWkFLQAUU
UUAFFFFABRRRQAUUUUAFFFFAHP8AibXJ9GudCigjjcajqcdnJvz8qMrsSMHr8orSu9Y0ywYL
eajZ2zHoJp1Q/qaoeIdLs9SutEe7vvszWmoJcQJuUedIFYBOevBJ454p174Q8N6pePeX+gaX
dXMmN801oju2BgZJGT0FAEv/AAlGgf8AQd0z/wADI/8AGk/4SjQP+g7pn/gZH/jVT/hAfB3/
AEK2jf8AgDH/AIUf8ID4O/6FbRv/AABj/wAKALf/AAlHh8/8x3TP/AuP/GqOnah4R0lrxrLV
tMiN5cNczn7ch3yN1bluOnQcU/8A4QHwd/0K2jf+AMf+FH/CA+Dv+hW0b/wBj/woAt/8JP4f
x/yHdM/8DI/8aP8AhJ/D/wD0HdM/8DI/8aqf8ID4O/6FbRv/AABj/wAKP+EB8Hf9Cto3/gDH
/hQBa/4Sbw//ANB3TP8AwMj/AMacPE3h9yANc0wknAAu4+f1qn/wgPg//oVtF/8AAGP/AApR
4E8JBgw8L6LkDA/0GP8AwoARrvwomvtrLanpq6lHbmzeU3igrGWDbSN2PvL9at/8JP4fA/5D
umf+Bkf+NU/+EA8H/wDQraN/4Ax/4Uv/AAgPg7/oVtG/8AY/8KANE67o4ZAdWsQX+4PtKfN3
4557VTtdc8L2NrHa2mq6Rb28Q2pFFdRqqj2ANQ/8IB4Q/wChW0X/AMAY/wDCl/4QHwf/ANCt
o3/gDH/hQBb/AOEn8P8A/Qd0z/wMj/xpV8TaCxCrremk9gLuP/Gqf/CA+Dv+hW0b/wAAY/8A
Cj/hAPB//QraL/4Ax/4UAW/+Eo8P/wDQd0z/AMDI/wDGj/hKNA/6Dumf+Bkf+NVP+EB8H9/C
2i/+AMf+FH/CA+Dv+hW0b/wBj/woAuf8JPoH/Qc0z/wLj/xpp8U+H8f8h7S//AyP/Gqv/CA+
D/8AoVtG/wDAGP8Awpy+CfCsRDJ4Z0YEcAixj4/SgDP0Txvp95e6zBf6ppMItL3ybZkulAli
MaOrZJ5PzEHHGQa2T4o0Addd0wf9vkf+NYWl+A/BYuNWkg0rSr37RdlpkaCOQW7gKDGOPlGR
ux6sa1E8C+E0xs8M6MACSP8AQY+M8HtQBYPinw8OuvaWP+3yP/GlPinw+OuvaX/4GR/41Ang
rwtGcp4a0dTjHFjH0/75oXwT4VRyy+GtGDEYyLGL/wCJoAm/4Srw8P8AmPaX/wCBkf8AjS/8
JT4fHP8Ab2l/+Bkf+NRL4N8MKuB4c0cZOT/oMXX/AL5pF8FeFkPy+GtHH0sY/wD4mgCX/hKv
D3/Qe0v/AMDI/wDGj/hKvD3/AEH9L/8AAyP/ABpg8HeGAc/8I5o+SME/YY+f/HaX/hD/AAz/
ANC5o/8A4Ax//E0AL/wlfh3dg6/pWeuPtkf/AMVS/wDCV+Hf+g/pX/gZH/jTf+EP8M/9C7pH
/gDH/wDE0p8I+G2ChvD+kkKMAGyj4H5UAOHinw+wyNe0sj2vI/8AGj/hKNA/6Dumf+Bkf+NV
W8B+EXcu/hfRiTyT9hj5/Sk/4QHwf/0K2jf+AMf+FAFv/hKPD/8A0HdM/wDAyP8Axo/4SjQP
+g7pn/gZH/jVQ+AvCDY3eF9GO0YH+gx8D8qP+EB8Hf8AQraN/wCAMf8AhQBb/wCEo0D/AKDu
mf8AgZH/AI0f8JT4f5/4n2l8df8ATI/8aqf8ID4O/wChW0b/AMAY/wDCnHwN4TPl/wDFMaN+
7+5/oMfH6UAWf+Ep8P8A/Qd0v/wMj/xo/wCEo8P5x/bumf8AgZH/AI1XXwR4URmZPDOjAt1P
2GPn/wAdpv8AwgfhHZsPhfRtuc4+wx9fyoAtf8JRoA/5jumf+Bkf+Nef698btI06+1XSoDCL
62aNbS5Z/Ntp9xXJLJyuASfw612o8BeEFYMvhbRgQcg/YY/8K4W9+C/hcapqut6/dQw2886v
BDABbQWy5AwecEtwD0HJwO9AHrMMsc0KSxOskbjcrqchgehB7in1HDFHBAkUMaxxooVERQAo
HQADoKkoAKKKKACiiigAooooAKKKKACiiigDjfHVtcXGq+DzBbSSrFrcckrIhby1EcgyTjgZ
I5rsq5nxZrN9pF/4bitGRY7/AFVLS43LklCjnA9Dla6agAooooAKgN5aiaSE3MIliQSSIXG5
FP8AER2HB5qc9DXkfjLwp4i1rx3qosY5IdJvtGWK5uUxvcoXIhQnuzbQeOmaAPTX13SI5reF
9UslluVDQIbhQZQehUZ+YHtihdb0p9TbTV1KzN+v3rYTr5g4z93OehFeK674e1S68LaRpUXg
+9XU00+wT7ZDBDIszIibo5XbDw7SCMqe5zxUl14W1u78eXMkWiXaynxAl9HPJaw/ZzCqjLGf
/WDoSFAwehGTwAezRa3pU+oS6fDqdnJeQgmS3SdTIgHXK5yMVLDqVhcNCsF7bSmZDJEElVvM
UHBZcHkDI5FeIeFfCGtxX+m2Opabq0d5aahPcT3y29uIGVg4ZvOwZJN4IG08HPtVjw+msaPF
4Vin8Ia4f7K068t5WjtkOJJSCrIN3P3SDnH3vrQB7JNrGmW0Mc0+o2kUUo3RvJOqq49QSeRy
KmF5alpFFzCWjQSOA4yqnOGPoDg8+1fPGneHdQutO0qc6RqNxaw6TJprRJYQ3Tw3STP5qskh
xHknhhzgc966keCPEjw6rb2t3d2IPh21s/3kUcpupFRwYyx6EZ25HrQB65/aFltlb7Xb7YlD
SHzBhARkE88Ajmo5dY0yG+hsZdQtEu5xmKBplDv9Fzk15FqfgXW9UuPENi0E0Oj/ANm2zKin
El7PFb7Y4wegVXGT6kAVl3/gHUYNX1KKfTdWuheraC1ls4IGKKiquGncFoWUrztHIAoA9Wt/
HOl3Pjm68JRpdNqFtEskj+SfLGRnBPbgryeDuAFdOOlUrfS7OC6N4ltF9sdAklzsHmSDCj5m
Ayfur/3yKvdKACiiigApG6UtI3SgDi/AVnc2t54ua5tpYRPr08kRkj2eYhVAGHqOOvfrx0Ha
1zHhTW7zWbzxFFdmPbp+rSWkGxcHywiEZ55PJ5rp6ACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAooooAK4v4rWl1e/D2+t7O3muJWlg/dxRl2IEqk8D2FdpXM+P9eu/DPg671Wx8r7T
E8Sp5qll+aRVPA9iaAOmFFIOBS0AFFFFABRRRQAUUUUAFFFFABRRRQBheILbSp9R0FtRnMU8
V9vsgM/vJvLf5T/wHcfwrl/Hfxd0XwRcPp7Q3F9qyqG+zINirkZBZzxj6ZrZ8Z2V9eal4Vez
glljttYSa4KdEjEbgsfbJH51qa94V0TxPZC11nT4buMcqXGGQ+qsOR17UAch4T+Leh6t4btb
vVr+3ttSk3eZawJI5XDEAAAE9MGtX/hafg3dt/tnnnj7PL26/wANbHhXwzaeEvD1vo1lLLLB
AWKvKQWO5iecAetbO2gDkv8AhZfhPcqnUpdzHAX7JNk8Z6bPTmk/4WZ4S87yf7SfzQu7y/sk
27HrjZnFddt9zRjnOaAOTX4keFXQMt/MytyCLKYg/wDjlL/wsbwvz/ps/wD4Az//ABFdXilo
A5P/AIWN4X/5/Z//AABn/wDiKcvxE8LEMTfyqqgsWezmUYHuUrqqQjPegDkU+JvgvymkXWYl
jBI3GGQAnqQDt5NNb4peCl3D+3IvlwDiKQ5+ny812G0Um0f5FAHHv8UvBUbYOuRHv8sUh/kt
IPip4KIG3WlJY4CiCQn8ttdkFA7D8qNooA5KX4meEYP9bq3ljGQWtpQG+mV569qZ/wALT8Fh
N39uR9M48qTPXHTbmuw20bR6fpQBxp+K3goAH+3E5GeIZP8A4mpD8TfCSLG76qyJJ913tZVU
/iVxXXbR6CgrkYoA5I/E3wjxt1YtuBI2W0rZxnPRe2DTl+JHhWSNJE1GV0f7pWzmIP5JXVbf
c0EYHU0AcJpXjjwTZy6k9jqUrm5vGnuFS0lISUqqkYCcfcB55ySe9aP/AAsbwxn/AI/rj/wC
n/8AiKk8K2OoWupeJ5722Fut3qzS24DZDxCKNA/HTO3J966igDk/+Fj+GP8An+uP/AKf/wCI
o/4WP4Y/5/rj/wAAp/8A4iusooA5P/hY/hj/AJ/rj/wCn/8AiKP+Fj+GOf8ATrj/AMAp/wD4
iusooA5P/hY/hj/n+uP/AACn/wDiKP8AhY/hj/n+uP8AwCn/APiK6yigDk/+Fj+GM/8AH9cf
+AU//wARR/wsfwx/z/XH/gFP/wDEV1ePeloA5P8A4WP4XyR9vnyOo+xT8f8AjlIvxJ8Kvu26
hM204bFnMdp9D8nFdZj3NGPegDkx8SfCrKrDUZirY2sLObBz6HZzSN8TvCMcRkfVGRAcEtay
gA9cH5fQg11pX3NG2gDlV+JHhSSDz49UZotpO9baUjrjGdvX2pq/Enws6hk1CZlPdbOYj/0C
us28YBox70AcmfiT4WXG7UJxuOBmym5PoPkp3/CxvDGf+P64/wDAKf8A+IrqsUtAHJH4keFh
jN/OCxwAbKfk+g+SszxB418EatpDWup6pNDa+bFIXNrKg3I4dQSUx1Ucd67/ABz1rnfHNjfa
j4UuLTT4hLcvNAQhAPyiZCxweDgAn8KANuwvbfUbGG8tXLwTLuRipUkfQ8irFIOlLQAUUUUA
FFFFABRRRQAUUUUAFFFFAHLeMNWvNM1HwvFaTtEt7q6W84Cgh4zG5IORxyByPSuprnvEz6Ml
7oB1a3lllbUUWxdAcR3BRsFsEcY3dc/SuhoAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigApG6UtI3SgDj/A+q32qXXigXlzJMlprc9tbq6geXGoXCjHUZJx3rsawPDn9hGXWV0a
DypF1GQX6lGXNxgFmw3XIIORwa36ACiiigA6Vzmu+OdC8O6jHp1/POb2SE3CwQW7yuYwSC2F
B4G1j9Aa6I9K8116HxKvxZ+1aDY2c6nQVikN67Rof3zcI4U/MMgken4UAdBqHxE8O6aLZmuZ
7lbi1+2KbS2ebbBz+8baDtXg9fQ+lWD468Pm+FnDePcTGOKRvs8DyqiS42FmUEKCCDz25rz5
fhTrOlrA1nNZ6kzaT9huI7m+uLZFfczZHlj54/mxtbHT3rrPDXg680K81Fnez8i40u0s4xDu
ADxIysSp/h5GOScUAb0fi3QJU0111S326mWFmScedtznH0xWVB8TfCtzKyQ30z5DmBhayFbn
Z9/yTt/eEf7Oa4TSPg/q1raaA+pXsF5fWc7RzsJmCW9psdQkXAyctuOQMk4PA56nwl4e8X6P
Houl382jrpekq6ia2DPPcLgqgwygR8HJIJJxjuaANOL4m+E5dOa/OpPFaiXyRJLbSoGfn5Vy
vJ4PA9Ksp4/8Mvp3206kI0+0C18uSJ1l80jITyyN24jkDHNcJrfh3XNG8NeGrO0gtLnUI/Er
XKcMYAHkkdd525UYYZOOD07VZu/B/jKeW+1iOaG3vNRv47i50601GSEeVHD5ahZwuQxJycAZ
AAoA7uz8YaBfzWMNrqUUkt+0qWyAEF2j++MEcEdwcVLb+J9Fu7m3t4NQieW4MwiAz85hOJMH
/ZJrzLTPAXjDQX0a9todJuLnTtSvLowC9l2yJOirguykkgg8nOcA81Q0/wCH/i3Wrq2tNThg
0mzstQvDczw3DM91BclXdI+OhwULcdenBBAPTH+IfhVbe3nXV45Y7gSNEYY3k3LGcO2FBO0H
v0rfsb621KxgvbOUS206CSKRejKehFeTyfCnVidPt7W+h062tRfhprG5kjlaOaRnigHy8IOC
fxA9T6J4Q0u50XwjpGmXvlfabS1SGTyiSuQMcE0AblFFFABXL/EHVL/RvB9xfabMsN2k0Co7
bcfNKikHdwAQSCe2e1dRWN4pl0mLQ2fW4fOsfPhBTaWy5lUJwP8AaKmgDYHSlpB0paACiiig
AooooAKKKKACiiigAooooA5fxdo97qt/4amtFVo7DVUurjL7SIwjqSAevLCuorkPG99c2eqe
EY7a5mhFxrSRSrG5USJ5chKtjqM44PpXXjpQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUZ
FFABRRRQAUjdKWkPSgDmPDOlX2k3XiW5uoBtvtTe6t1SbzHdPLRRkkAAkqcDPGcZ4qM+LNU3
Af8ACEeIOTwd1r7f9NqqeAtWn1PUvGEU9zcTraa3LDEJWJEaBVG1c9ACDx05rtsCgDlf+Er1
b/oSNe/77tf/AI9R/wAJXqnIPgjxBnGRhrU8/wDf6uqwKNooA5X/AISvVTyPBGv8+r2o/wDa
1L/wlWrDj/hCNe64/wBZaeo/6bV1OKMCgDlz4p1UDJ8E69kgEYktD+f77g03/hK9W/6EjX/+
+7X/AOPV1W0CjFAHKJ4r1goN/gbXQ3cCW1I/PzaU+KtW28eB9ez/ANdLX/49XVYowKAOSPjO
/jYrJ4I8S7h/cjt3HT1E1H/Cb3f/AEJHij/vxb//AB6utxS4oA5H/hN7v/oSPFH/AH4t/wD4
9R/wm93/ANCR4o/78W//AMerrsUYoA5L/hNbwgn/AIQjxRgf9Mbf/wCPUg8a3nJ/4QnxRx/0
xt//AI9XW4owKAOS/wCE1vSSf+EI8T4/642+fy86geNLx2VR4J8T5JxzDbgfn51ddikwDQB8
9eCfi94pbxJcaNd6Rea3B9ocBY1H2m3XceCfukDpyR9a9j8ZaZd634ZNpZRBp2ubaXY7AYVJ
kduenABrV03RtM0aGSLTbGC1SRzJIIkC72JyST3P1rnviXfNpngyW6WaSEJd2u9432nZ5ybh
75XIx3BoA64dKWgUUAFFFFABRRRQAUUUUAFFFFABRRRQBg+I9RsLC80KO909buS71BYLZyqk
wSFGO8Z5BwCMjnmt4dKwfEGiTatqWg3EVwkaadf/AGqRXz+8HluuB7/Nn863QRigBaKarq4y
rBh0yDmlyKAFrj/EHxF0rw3e6rbX0UwbT7OO73KVxNvYqqLzncSPp37V1+RXJat4A0rWfFEv
iC6eZrprFrKNRjbDkEeYvGd+CQPrQBnah8UYdOt9LvpdEuxp1/BBMtw88SsfNCnbHGW3Sldw
3bRxTG+K9ivixtFGnSGNdS/s03AuYtwlxknys7tgwfm9vXim6n8LU1LT4NN/t+8Gnx2sFt5E
sMcuwRKqhoiw/dMwX5ivU/SkuPhPZ3Ouyai+sXvkyaguoNB5ce7zAMAebjzNuOMZ/wAaAE07
4v6ZqOoW6CwkjsbtpEtblrmIvIyAkBog29N21gCwHb1ra0nx1b6rb6VMmn3ES6jp02oIGZSV
WMqCuB3O8EHgfyrK0v4Xw6TPFFBq840yB5XitVtolcCQN8rS43so3ZwfQZ6Cobb4X3lpHZR2
/jHU0SxtZLO2H2aA7IXxuU5Xn7o5PIwPSgBLj4waekGnNbaZLNNdaeuoyRyXUUAiiJxgNIw3
tkHgdRzVyT4r6FFb31zIGjhg06HUIPNkRHuVkUkKik/eGMH3NY2nfCO4tILSU62sWo20L2Qu
DaR3Ae1EmYvlcYWRVwMjPTHIHO7J8NNJntNQt55ZJ1u9Oh09Xmjjd4VjUgOpI4Ylsn3FAEOr
/FbS9FstSubrT73Nm8EccQClp2khExA542KcsTwPxFQX/wAX9IsdVuIGs5TZWckcV3dmeJTG
zgY2xFt8igsAxUcckZA5tSfC/SZr3W72a5uZLvVbFbFpmC5hQRLGSnHVgoJNVJ/hVAdTuprX
VpLeyvZEluoTaxvIzrtHySkbkBwcgevGOlAGjp3/AAmjfES+e6e3PhNoQbU4UsSFXGMHcCSz
ZJ4OzoMiu0XhRTVA6Yp2QKAFopMijI9aAFpG6UZFIxAHWgDnPDGqw6le+II4NLjsls9Te3eR
Ao+0uFUl2wBzyOue3NdLXPeGdBm0ObXGkuUlXUNTlvY1UEeWHC/Kc98gmuhyKACijIoyKACi
ikyKAFooozQAUUUUAFFFGaACijIpMigBaKM0mRQAtFJkUZHrQAtYHjLUbPSvDkt3faYNSt1l
iU2xVG3FpFVSA3GQSDW9kVheLtGfXtDFlHcRQMt1bziSUZH7uVXx7E7cD60Abo6UtIOlLQAU
UUUAFFFFABRRRQAUUUUAFFFFAHHeNmxrngwYOTrI5Hb9xLXJfF//AIWObOUeHwn9ibf3n2Bj
9qIwAd3fGSfuZ4HNd94l12XRb7QII4I5F1LUVs3ZzygKO2R7/LW+BQB5N8Mx41Hw60caedAF
r5b+WLoTeZje33scZzmurI+IWSd/hf6bbiuuCqBgKAPYUuB6UAcgy/EI/dk8MDng7Zzx+dMM
fxFPS48LjjH+rn6+vX612WB6UmB6UAccI/iMFANx4XLdSfLn/wAf84pGj+I5fct14XC/3fKn
P65rs8D0owPSgDjPK+I+8n7V4Xx6eVP/ADzTLlfiXgG2l8KZ9HFwP15rtsD0pMD0oA4eJvii
oxLD4QkOeSJ7leP++KsRH4inPmr4VTjja1w3OD7D2rscD0owPSgDjFb4jmRgyeFFiBOGD3BJ
9Pl2jH50qt8RvNfcnhUoFOzD3GWPGM/Lx39a7LA9KMD0oA4pj8Sjwo8JrhQfvXB3NxlenA6/
Nz24qRz8RRjYPCxJznJuBjj6HPauxwPSjA9KAOMI+I4lBD+FvL3nPFxkKM4/E8Z9PegL8Rgy
jz/C7DBydk4OeO35/p612eKMD0oA48D4iFDl/C4POCFuKYU+I24fv/CwXPPyT8+3/wBeuzwP
SkYDFAHlvhsePY7/AMUG2Tw75v8AaxLpMZlQt5UfKFQcArtPc5zmtqP/AIWgABKnhH7wyyy3
PAyO2znv3rb8P61Jq19rtu6wBdO1A2iNCSdw8tH+b/aBYg/St7A9KAOFA+KOWXPhEqWG191w
CBnn5dvP508x/EwOMT+FXQq2SUnUg4+X1zzj/wCvXb4HpRgUAcN5fxP8gE3PhTzcfd2T4z9f
/rUxR8VN4JbwgF3cjdcHA/755rvMCkOBQBwzJ8UMjbP4TI4zlbgY9e3/AOv2p2z4m7ZP9I8K
EjGw7LjkY7+n612+RRkUAcKy/FIMds3hIrjgkXAJPpjFMcfFdfut4QbgZy9wOe/8Nd78voKM
igDgR/wtgDJXwgePu+bcZ/8AQafC3xUGTJD4RfAPHn3Aye38H+c13mB6UYoA4jzfidtz9j8J
ew+03H/xFHmfE7I/0bwiB1P+k3H5fcrt8D0pDgDJoA4dZPieNxa38IHnj/SLkenH3PrTg/xO
w2bfwjnsPPucf+gfSu1yppcD0oA4Yt8USz4i8IKpGFHnXBwfX7lG74peUoMPhDfxlvPuP5bP
rXc4HpS4HpQBxHmfE/d/x7+EOQMf6Rc8f+OVy/j1/iMPCU5vh4ajgW4gbfaPO8inzU24BTBA
bBPtmvX8D0rE8Va0/h/RPt8cMczfaIIQjttB8yVU/Mbs/hQBqWf2kWkX2wwm52jzTCCELd8A
84qekHSloAKKKKACiiigAooooAKKKKACiiigDD1/SYdSv9Dmlu1gaxvxcxoxH75vLddg56/N
n8K3K47xrHJJr/gwxxs4XV9zYHQeTJya7GgAooooAKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACkbpS0jdKAMLw/pFtpd1rc1vfNctfag1zKCQfJcogKcegA688it6uK8BIy3Pi0yROj
tr9wdxBwy7UAIJ68f4V1891b2sYkuJo4kLKu6RgoySABk9ySBQBNRSbhRuFAC1yvjDxbH4Uv
NFa5aKOxuppUuZXzlFWJnG33JUDHfOBXU5FZWseHtL16fT5tRthO2nzi4twzEBZAOCR3+hoA
4SLxz4p1Hw9e6pFp1npa2V9NFcJdQyzSxxqsZjAiTlnJk5OQB1rBvvi/r32OzmtrbToN2i/2
lIGhmuBI29lKAxjCfc6twCcE8Zr0S/8AAGiX9y10GvrS7NzJc/abO7eKQPIqq+GBzghF4qtJ
8MPC7QQwxW11bLHaGyP2a8li8yEksVfaw35LMTnrnmgDktQ+KuuPrM9tpWn27izt7aSSAW89
w1zJIgdkR41KpgHALcEjPTpuL4+v57bWHt7FGmtNatLCOOT5D5crRDDZPDAuwyOOnXFa938O
vD91N5kaXdmrQJbTxWV28KXMSLtVZQp+fC/LzzjjpUF38L/Dd3cXM23UIXuZluJBb6hLGpkU
gqwUNjK44447UAZetfEu6sLq4sILS2S6/tk6ZDLcF/KVREkhd9oJJ+YgAe2cVFZ/Fkxf2Qms
aa0DXd9cWcssUcrJiNQyyRqV3MrblHTjmp4vhHpyard3R1fVfLkljuYD9qYzQXC5DSCQk5LL
tByO3XpjdsfAekWV3pt5uu7i60+aa4Sa4m3vLLKoV3c45OAAOgGKAMG3+LmntHBcXMAjs5jf
bZMsHPkOqogQgEu+9ePU49cUP+FtXl/Z6IllY2dlfahbz3MovmleOFI5Gj2/ImSxKn6Y9xXW
R/Dzw3Hf2N59hZ5rG7mvYGkkLYmkILMc9eQCPQiopPh5pOLFrS41CxubMyiO7tbjbKUlcu6M
SDuXcSQCOO1AHOvY+KfG934W8T6fqUujWkK5vbCUsrbg5VyilOcqXALf7PA616kOlUdH0u10
XS4NOsw/kQDaDI5dmJ5JYnkkkkn61d3CgBaKTIo3CgBaxPFelQ6xon2S4vFtIxcwSmVsYykq
sF5I6kAfjW1kVxnxTtXvvA0tvErtI93ahdq7sHz0GSPQUAdmOlLSCloAKKKKACiiigAooooA
KKKKACiiigDn/Emu3Gi3+gQwwRyR6jqC2cjOTlAUZgR7/LXQVia9pdpqN9ok1zdiB7K+FxCh
I/fPsddmD1OGJ454rbHSgAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACkbpS0jd
KAMHw5rcutprG9IYzY6lPZI0eSGCYwTnvzgj1FeH+OvCfxIXxfpt7qOoSarY/bomgnt0Jitm
LgDMIxtxxzznj5s17l4c0q10k6stteC6a61Ka7m5H7p3wShx6ADrzW7QBxh0Tx4WJHjHTwM8
D+xx/wDHKT+w/Hv/AEOVh/4Jx/8AF12lFAHGto3jwgD/AIS/TlwMcaR1/wDIlN/sTx7/ANDj
Yf8AgnH/AMcrtKKAOL/sPx7/ANDlYf8AgnH/AMXR/Yfj3/ocbD/wTj/4uu0ooA4v+xPHv/Q4
2H/gnH/xdH9h+Pf+hxsP/BOP/i67SigDjF0fx4gOfFulyEnjfpH+EgqRdK8dDP8AxVOlNk/x
aQf6S119FAHIf2X46G4/8JRpJz0B0hsD/wAi0kem+PNn73xNo4c/3dKYgf8AkWuwooA5JdL8
cKrA+JtKLMQQTpTfLx0/1tNOleOi4I8U6UBj7v8AZBwf/ItdfRQBx50nx0cD/hKtL6f9Ag8/
+RaadG8eHH/FX6cPppA5/wDIldlRQBxv9jeOwBjxbpmRnn+yOv1/eVqeJdal8O6Cl8EjnkE9
vAQ5KhvMkVCRjPPzZxW9WN4o0aLXdHFlNd/ZUFxDMZMA5KSK4HPqQBQBsAYGKWkHSloAKKKK
ACiiigAooooAKKKKACiiigDjvHFs0+reDykbkx60jlgpIVRFJnPpniux7VgeItZm0rUdAt4l
iYajqAtZA4OQvlu2V9wVHX1rfHSgDC8Ya+3hjwpqWtJD57WkJdYucM2QBn2yea5Qa34xttXg
0a71LSmutQsWvre4SzbZb7Mb42TflgQww+R06HPHoF7ZW+oWktpdwxz20ylJIpF3K6nqCKx9
F8GaLoNxJcWUM7TvCLYS3FzJM6QjpGjOxKp7D0HoKAPOP+FneI9E8H+HfEerLZ3ser3Em63g
i8oxpsbYu8sQPmAJY9BmtXXPHPiHQLZUlvNGur6Owa+lgtbaedmy2VUbPlSMLx5jNz1wK7WD
wfoUFjpdkLBGt9LDC0jkZnCblKnOT82Qx6561lyfC/wnIFX7BPHH5RgeOK9mRZIslvLYB+UB
OQvQcDpxQBg69428S6cml6zbCwbSNQe1WGEW8jsBKqFjNLkLFguNowc10fjrxDqOhWWlw6WL
dbzU9RjsEmuQSkO4MS5AI3H5eBkdaD8N/DBnt3+wyCOBIkFuLmTypBEMRGRN2HKjgFsmtrWt
B07xDprWGqW4nt2YOBkqyMOjKw5Vh6igDzjxH4w8YaJomvFLrTXvdAki82U2523cU2Nh27v3
brnkcg9q7trrV9L8I3d5fzWt3qNvbSTboYjHGxClgNuSf1qOLwPoEei3ukvZtPa3z+Zdm4me
SS4bg5eQncTwO9bFzp9veafLYzxK1tLEYXjHAKEYI46cUAeXTePfFWiaNpmr6jJp19b6nos2
oRxQ2zxNFIsaOFJ3Nlfnxnjoa1IvFevaG6Nrl9pt7b3WjTanFLBC0XktGqErjJLod4wevBrs
B4Y0fytPiNjG0en2zWlsjlmVImUIyEE/MCqgfNmuXv8A4Q+HLnTXs7Vr20WQxo7C6kkJgVt3
kDcTtjJ5wMchTzgUAYK+O/GGnaLqN3qZ0uSVdBh1W3WOB0MbyNjY6ljkDnJGOgqxqnjPxV4Z
bUE1W60i6ENpa3aSw27xhFkuUiYMCxyNpY5zxxWpJ8IdB/tK2mhmvVtRavZ3dvJdyyfaYSoC
R5LZVUIBAHoPSui1bwboet/aPt9kJTcWyWkpDspaJHDquQf7wBoA4a8+KGryf2zPp+n26WRW
1GjzXOR54lmaHzmGchMgkA4OAD0NS+KPG3ijwFapLq76XqsYvYVZrRTFMYnSQlTEWO05QYbJ
BAPGa7S88GaBfx3Md1p0TxXNpHZSRAlU8mMlkVQDhdpOQRyOPSqdp8OvDVm8MiWTyzQ3KXSz
3E7yyF0UquWYklQCQF6UAcyvxI1XTbu2g1SGxuZ7/TDfWdvY7meWV5AsUCHo2FOWb2J6Cux8
Fa5deJPCGnaveQxw3FyjGSOPO1SGZeM/SodL8AeHNG1KC/sbApcWwlW33TOywLIcsEUnCjJP
A6bj61r6PpFnoWlwabp8ZitYARGhYtjJJPJ56k0AX6Q9KWkbpQBxfgO3mg1Dxg00DxrJr0zx
s6kb12JyM9R712tc34W1+51251+K5hSIadqkllFtHLIqqQTyeTn8sV0lABRRRQAUUUUAFFFF
ABRRRQAUUUUAFFFFABRRRQAUUUUAFcf8S4JrjwrCkEUkjf2lZsQiknAnTJwO1dhXN+IvFSab
ot9daWIdQvLOeKGW2SQEoXkVfmA6cMTz6UAdGKWkHSloAKKKKACiiigAooooAKKKKACiiigD
A8Q2mm3Wp6A19qAtp4L7zbSPcB58nluu3B68MTx6VW1Xw94gvtSmuLLxle6fbvjZbRWcDqmB
jhmUk55P41T8bWU934k8FyQ28jrBqpeSVAT5a+U3XHQE456fnXaDpQBxf/CKeKec/EHUj9LC
2HP/AHxR/wAIn4q/6KFqP/gvtv8A4iu0ooA4v/hE/FX/AEULUf8AwX23/wARR/wifir/AKKF
qP8A4L7b/wCIrtKKAOL/AOET8Vf9FC1H/wAF9t/8RR/wifir/ooWo/8Agvtv/iK7SigDi/8A
hE/FX/RQtR/8F9t/8RR/wifir/ooWo/+C+2/+IrtKKAOL/4RPxV/0ULUf/Bfbf8AxFH/AAif
ir/ooWo/+C+2/wDiK7SigDi/+ET8Vf8ARQtR/wDBfbf/ABFH/CJ+Kv8AooWo/wDgvtv/AIiu
0ooA4s+FPFRx/wAXB1H/AMF9t/8AEUf8In4q/wCihaj/AOC+2/8AiK7SigDi/wDhE/FX/RQt
R/8ABfbf/EUf8In4q/6KFqP/AIL7b/4iu0ooA4v/AIRPxV/0ULUf/Bfbf/EUh8J+Ksf8lC1H
/wAF9t/8RXa0h6UAeb6P4L1GGTU30j4hXm6a9ke9MVnbt/pGAHz8vyngZAxWr/wifirv8QtS
/wDBfbf/ABFP8AW09rF4kE8DwmTxBeSJvUrvVmGGGeoI712NAHGHwn4pLHb8QdSC54BsLYkf
+OUn/CJ+Kv8AooWo/wDgvtv/AIiu0ooA4v8A4RPxV/0ULUf/AAX23/xFH/CJ+Kv+ihaj/wCC
+2/+IrtKKAOLHhPxVg5+IOpdOP8AQLbr/wB8U8+FPEmDt8f6qDn5c2VqcfX93zzXY0UAcZ/w
ifijcP8Ai4Gp7fT7BbZx9dlKPCnifcSfiBqe30+w22fz2V2VFAHFnwn4p3Er8QdSAzwDYWx/
9ko/4RPxV/0ULUf/AAX23/xFdpRQBxf/AAifir/ooWo/+C+2/wDiKP8AhE/FX/RQtR/8F9t/
8RXaUUAcX/wifir/AKKFqP8A4L7b/wCIo/4RPxV/0ULUf/Bfbf8AxFdmTiloA4v/AIRPxV/0
ULUf/Bfbf/EUf8In4q/6KFqP/gvtv/iK7SigDi/+ET8VZ/5KFqP/AIL7b/4ivIbn4b+KtQ8b
6tquqa82mWCXkcR1S7Ahe7IZQm2NcA8hcZwM4xnmvpKuT+IdtPdeFVit4JJnN9aMUjj3nas6
Fj0OAACSaAOnto5IrWKOaYzyqoDylQpc9zgcDPtUtIKWgAooooAKKKKACiiigAooooAKKKKA
OZ8Ta5daVrfhmztmQJqV+YJw0ZOUEbNwegOQPr+FdMOlc/r9to1xrvh7+0ZnS+junfT0XOHk
EZ3A4B425POK6AdKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKQ9PxpaRulAH
NeD9ZvNai1s3hRvsesXVnFsXb+6jYBc+px3rpqwPDMGjQJqx0adpVk1O4e7yxOy5JHmKMjgZ
7e9WtU8RaTokltHqV/BbSXUixQxu3zSMxwAqjk8kc9KANWikByOaWgArgfHXja48J+KPDsGd
1leLcedCkReSdwg8qNMdGZyB6c8nFd9VK60nT72+tb25soJbq0LG3meMM0RPBKk9KAPL7bxT
401TQLqWW7isdTsr+6imsrC2juLiZE8sBYldtpCNIdzegHesO7+Jfiy7tLa7sbllEegDUpls
rOOVGlEjq3meYQUQbMHbkjBxnivWNS8C+GNWTbeaPbv+/e43JlG8x8b23KQctgZ55wPSmzeA
fCdwkCzeH9PkEEKwRb4QdsYzhfpyfzoA82n+Ifi3Ur/U7jR1ZoNKitnMMFtE0FwWUO5eSRwy
KckLt5xjPNdIPHWsbtQD29pGLfxBaaaiHLOIpTHuDAH7w38N0znjiukv/AHhXVL9L280O1ln
VUToVVlX7oZAQrADAAIPQelV774Z+ENSv7m+u9HWS4upBLM3nygM46HAbAP0FAHK678Qtat9
Qm021VInOutp0c0No1w6xLAkhPlgjexLdj07VFa/EXxHbXeiQX+mXM/nX15bTxw2OLi4SJFZ
HWPf8h+b5hnoDXSQfCjwnCt7D9ilezumilNs9xIRHKmcSI+7erEHBIbnFben+D9A0r7B9i02
KI6f5htmyWaMyffbJJJJxyTk0AcHafFK+ij0aTULRc6ib5EtliZZpJo5xFDEAThWOcHPHBPF
ZkHxK8V6m+kWKRfZb6XT57u5a005rvc6zPEqKgbhfk5bJGT1xzXq3/CN6L9stLsaZbC4s3lk
t5PLGY2kOXYe5JyTWdqHw+8K6nBbw3OkRhbYv5JhkeFkDksw3IwOCWJxnGTQBzkPh/WvGzeF
fFNzqt3pE9siyXWnwuwSRt3zYw3y7lyO/BA+vpNV7KyttNsobOzhSC2hQJHEgwqKOgFWKACi
iigArnPG2t3nh/QI72xWEzNeW0GJvu7XlVW+nBPNdHWN4mj0abS449dkWO0a5hKM0jJ+9Dgx
8jnO4CgDYHSlpB0560tABRRRQAUUUUAFFFFABRRRQAUUUUAct4k029vPF/hK7t7dpLezuZ3u
JARiMNCyqTznk8cCuprlvEmp3tn4u8J2dtcNHb3tzOtygVT5irCzAEkZHPPFdTQAUUUUAFFF
FABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABSGlpD0oA5PwXpV7p9v4hjvIJLc3Wt3dxCcjLR
uwKuMZ6j15ryvXvgv4lh8cWOsWWtXOo27X0TyXcsgN3bLvGX+bhto549Pu16x4L1W+1aLXmv
rjzTa63d2sPyquyJGAVeAM49TzXUEZoA40+AZm5HjTxWM9f9NT/43R/wgFx/0O3iv/wNT/43
XZgYGKKAOM/4QCf/AKHXxX/4Gp/8bo/4QC4/6HXxX/4Gp/8AG67OigDjP+EAn/6HXxX/AOBq
f/G6P+EAuP8AodvFf/gan/xuuzooA40eAZgCD408Vk9j9tTj/wAcpP8AhAJ/+h18V/8Agan/
AMbrs6KAOPj8C3UTEp418UZPHz3MT/zjNP8A+EMvcsf+E08S5Ix/rYP/AI1711tFAHKDwbfA
f8jr4k/7+W//AMapv/CF3uSf+E08S8nJ/fQf/Gq62igDlP8AhDb7/odPEn/fy3/+NUf8Ibff
9Dp4k/7+W/8A8arq6KAORXwVeKcjxr4mzz1mgP8AOKlPgu9Ygnxr4l654mgH/tKutooA49vA
12xJPjXxRk9cXMQH5COneP8ATL/UPC0Ntp9rLeXCXtrIVVlDFUlVmPzYHQV11cr4/wBXvdE0
C2utPn8mZ9QtYS2xWBR5QrA5BwCCeetAHUilpB0paACiiigAooooAKKKKACiiigAooooA57X
rnRbfxB4eXUona/luJE06QKxCSeWd2cHHK8cg10Nct4o0G91XxJ4Wv7byvJ0y8ea43tg7TGV
GOOea6kdKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKRuRS0hoA57wpLo8sWs
f2PBLEqatcrd+Zn57kN+8YZJ4J6dB7V0Vcx4P0W+0RNcW98v/TNYubyARtuxFIQVz6H2rp6A
CiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK57xk+ix6PbvrtvLPai9t9ix5yJS4
EZOCOAxHXiuhrmfHWiXuv6HbWtiI/Njv7e4bzHK/IkgZsY6nA6cfWgDpR0paQciloAKKKKAC
iiigAooooAKKKKACiiigDO1DTZ73UNNuotRuLZbSVnkhjPyXAKkbXHoCQR9K0R0oooAKKKKA
CiiigAooooAKKKKACiiigAooooAKKKKACiiigApCM0tFAGbpGmT6bHdpPqM96Z7uS4RpusSs
ciMc/dXoK0qKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKzdb0y41WzigttS
n09kuI5Wkg+86q2Sh9m6GtKigAFFFFABRRRQAUUUUAf/2Q==</binary>
 <binary id="i_012.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/4QAWRXhpZgAASUkqAAgAAAAAAAAAAAD/2wBDAAgGBgcG
BQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgy
PC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAFVAisDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEA
AAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1Fh
ByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5
usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEB
AQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdh
cRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RV
VldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3
+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAM/XNUj0TQdQ1WaMyRWdvJO6K
eWCqSQPc4rkLTxr4v1DToL2x+HdxLb3EYmgdtXt13IwypIJyMgjjtW18Q/8AknPiT0/s2f8A
9ANaPhvjwtpHGP8AQoen+4KAOZTxV44GN3w1mXpnbrNscfrRH4p8cY+f4bTLjGNutWx+vcV3
JAPWjAxjt70AcSfFHjYED/hXM555I1m2/wAab/wlHjbfg/Defbjr/bNtnPpjPSu4AA6DpS9K
AOD/AOEo8dGMn/hWkgcYCga1bYI75/z+VOPijxyOP+FbSEBsf8hm2+77f4V3OBjGB0xRgAYx
x6UAcEnirx7uG/4aMEJwdutW5IGT6/hQnirx9g5+GjLxwBrduf6V3oAHQdKAABgdKAOEfxV4
8Xd5fw0cjHy51q3H5+n601fFfj8/f+Gbc8DGuW5/Pj0rvcDGMcelG0elAHBjxT49Of8Ai2pw
WxzrdvyvPP8ALij/AISvx8rYX4akIOpOuW/v04+ld5gYxjj0o2rjGBigDlPCPim+8QX+safq
mhf2Te6XJHHJF9rW43CRN68qABxj16+xFdZXEeFv+Sj+PUAGPPsf/SZa7egAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDmviHn/hXHiTA
z/xLZ/8A0A1o+GhjwrpA/wCnKH/0AVn/ABCAPw48Sbs4/s246euw1oeG+PC2kcY/0KHp/uCg
DUpCcfSlpCAeooA4q98Xa5e61qth4W0a0v00nCXMt1dmHzJipYxR4UgsBgEkgAn8asn4jaBa
21s2qTyaddy2y3MllNDIZrdT/wA9FVTsA9TgVnNo3ijwxrmtXHh2xsNSsNXmN35VzcmF7acq
A5+6QykhTjg8Y965oWHjGLxZr9hFb2mqXl3ottb3d9cubdN7CQb1CoQyjJG0YOAO+aAPRLrx
p4es9Yt9Jn1a2S+uAhjj3Fh8/wBzLAbRu7ZIzkY60svjLQIdbOjSanCmoCVIDEQ3Erjcq5xj
JHPWvOP+FUapYXNzZwRwanY3y2qyS3N/NCkfkoFPmQxkCX7uV+YYJGeBUUlh44azuNUl8LRO
LjXIdbeBb0m4EcZUJDsx94BF5z68dgAeix+PvDMt/c2cer28k9tG8jxxBnJCZ37cD5yMHIXJ
46VBB8SvCdzYi9g1Qy2xmWBXS1mJeQgkKo2ZbhT0z0rK8H+G/Eegppmh3VrpJ0nSpppY75WL
yzh9+3ahUeW37z5myehA65rH1PwD4gfwv4fs4FhmuNP1a4vZ4Ib1rYOjySspWUDcpAYDPUZN
AHaXXj7w1aWlncyaohivVka38qKSRmCHDkqqkgLg5zjBBz0rftLqC+tIrq1lSa3mUPHIhyrK
ehB9K8q0PwT4q8J3Vrqen22m3tyLS4s2smumQQRvOZoz5hTMhBJDZAJ469a77wboMnhnwlp+
jzTieW3jPmSKMKXZizBR/dBYgewFAG7QRkYNFBGRg0AcX4YEf/Cw/HeHzI1zZhkPYfZUwfx5
/Ku0ri/C7A/EXx2nl8i4siWz1BtV4/DH612lABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRSc56cUtABRRRQAUUUnOenFAC0UnOenFLQAUUUUAFF
FFABRRRQAUV5Lod98Q/Fs+ty2HiDTbC1stTnskhksN7AIRjk+x/Stf8AsL4o9B4w0gDH/QNH
Ht9KAPQ6K88Gh/FABwfFujEEYX/iW9P8/jULaN8WQp8vxVoZwOjWJXn0+70680Aek9KK87h0
X4p5bzPFeibcYA/s8nnGPbp2/wAioBo3xeC/8jRoOQ2APshxj/vn9P1oA9LozmvM/wCxfi8V
A/4SfQAM84tDwP8AvinppXxcRMHxD4cY8jJtX4B6dF7f5zQB6RkYz296XPOK85GmfFoRxqdb
8MsVPzE2snzj0PH8sVQ1iL4saRpeoarJrnh54bW2kmaKO1bOFUnC5Xrxxk455oA9VorH8K38
+q+EtH1G62m4urKGaQhcAsyAnjsOa2KACiiigAooooA5r4h5/wCFceJMDP8AxLZ//QDWj4aG
PCukD/pyh/8AQBXM/FDxHpVh4M1rS57kNqFzp0wjtIQZJcFCN5UAlUHUscDg8103hoY8K6QP
+nKH/wBAFAGpRRRQAhAJyQOmK5vxN4ku9J1LSNH0qwivNT1N5PKWeYxRRpGu52ZgrHuAABzn
2rpaxdf8N2+vPZXBurqyvrF2e1u7VlEkZZdrD5gQQR1BHYUAefa/q/jfW9ftNDsrGXTWTTHv
by1t9QSKUt5rRhVn8t+GCfLhV+9yRitOz8fXd1pxXw5pH2+203SoLu7a/vWjmw6sRGCVbe+E
bLE4J7962W+HmnqlubXVNXtbqK3ktpLyK4BmuI5GLsJGdSCdxJBABGeMcYiu/hno8sRhsbm/
023ksk0+4htJVC3MCggK+5WOcEjcMHBPNAFG6+I175OpahZeHjPpGmrBLdXEl2qSGKSJJSUj
2nJVXBIJHtz0WP4jY8bW+gyW1gIri9ezTyb4S3CbVYh3RVKqpK42lgwByRUcfw1kudY1/wC1
ape22j380CLY2cirHNBHCiBGypZfu7TtIyo9+NSL4caVDqUd3HfaiqRai2pQ2olQRRzscsQN
uSDyMEnAY4xQB14UY5UA4xTqQAAYHSloAKCMjBooIyMGgDhtAvbO1+IHjVLi5jhaS9s0USuq
hybRSAM9T8rce31ruc5GRXivjfwzJ4og+I1tawede215ZXVukalpHZLVMqAOTlS4HXkmrnwi
0688HXUugeI7q8j1W8iWeygluC1s0IXJSPPHmqd28DtgjIyaAPXqKKKACiiigAooooAKKKKA
CiiigAooooAKKKKACiiigAooooAKKKKACiiigAryvRbTxt4ovNeuYvG82nQWur3VnBAmnwyg
IhAByefbHt716pXAfCjmw8THduP/AAkd7kEYK/MvH9fxoAc3g7xqdp/4WRdBlGBjSoMdCMkZ
5NB8HeNjH5f/AAsq5C+v9lQZ/PrXe0UAcAfBXjYqB/wsu749NLh/xp6eEPGyZx8R7k5x97So
DjFd5RQBwK+DPGyuX/4WXdE+h0qAj8s0o8G+Mij7/iRe7zwpXTYAB16j8fau9ooA4BfBfjYf
81Lu+/XS4T/WlfwX4zZyV+JN4o7D+zITx7+prvqKAPP/APhCfGv/AEUu8z/2DIf8aP8AhCfG
v/RS7zP/AGDIf8a9AooA8t8Q+HvHGheG9T1ZPiLdzvY20lyIjp0Kh9ilsE8+lek6dM9xplpN
IcySQo7HGMkqCaxfiAm74d+JQMj/AIldwcg4PEbGtbRxjRLAD/n2j/8AQRQBdooooA4D4Sqg
0fXyg+9r94ckYJ+Yda7+uB+E3/IF17nP/E/vecdfmFd9QAUYwMCiigAxgYFFFFABjAwKMYGB
RRQAYwMCsTxgqt4K15W4T+zbgEhsEfu2/Ktuue8eJv8Ah94kAUFjpdyBn/rm1ADfAO7/AIV9
4c3AZ/sy3yc/9M1ro65/wJ/yIHh3ggf2bb9ev+rFdATgZNABRUN3eW1hayXV5cRW9vENzyzO
EVR6kngVyP8AwkOueKAE8KWwtdOfIOtX8Zx06wwnDSdRhmwv+9igDoda8QaX4etFudUu47dH
O2NDy8rdlRBy7H0AJrn/APiqPFaMipL4Z0iRcbztbUJVPYDlYOvfcw9F7aej+ENP0m+fUpmm
1LVpPv6jekPKBz8qYAEa/wCygArf2g9RQBxPiXw/pnh34Z+J49LtY7YyabcNLMSXklby25d2
yzHk8knrXR+Gf+RU0f8A68Yf/QBWf8QW2/DrxIR/0DLgc+8bCtDw1/yKuj/9eUP/AKAKANSv
FvF2v3Fp4g8YZ8X32n3elRwPpWnxuipMzxg7dm3MgLHGM8Zz6Y9prIs/Del2mr3uqR2iG7vJ
Umkd/m2uqbAVyPl+X09aAPJrfxf4mufFt7Hda5a6fdwa3HaxabNOQGgPAUQLCzvvBzv3DBIP
AFSW2v65qfia40jRfFM14L6yuzbyExiSK4jwyboTGrW4Dbk+YsGA7ZGPZDYWbXS3RtYDcKML
MYwXA9A3XFMutPhuLe5jQGB7iNkaaA+XKMjBIccg+h9RQB5BB451XxLp0FzDqFzpo1K/sdKt
4YlCyJIuHu5FBDZxv2A9AF5FI/jfWfD2p6VFPqUd5bre6vbTf2jdx2/nLDIFi3Sbcbh2AAyT
+XrGiaBp3h/SbbTNPtwltb7im87mLMSWYk8kkk5NXpLW3lXbJBE4zuwyA8+v1oA8nsdav9b8
a6dPHrmt6bpt7ojaubIrG2x1kC+WMp9zGT6njBGayvCfiK88QeIINLk1/Uxb6tpks4f+0Ymn
EiupVlSNQLc4DDYCeM5GRmvcPLTeH2jeAQG74PUfSoobK0tl2wWsMQ3FsRxheT1PHc0AeIab
qGojw74NfXPFWr2lhrstw9/eyXGxomUERRLJj92rck567eCO2fq3ivWo7fTIo/EsxthZ35tr
qe/Fn9oEc7LDKW2nzGKbcLj5sfjX0Bc2tveQtDdW8U8TdUlQMp/A0NaWzqqvbxMqDaoZAdo9
B6DgUAZXhC9l1Pwho1/cPJJPPZRPJJKgR2YqMkgcDJyeOK2yMjBo6Uh+6c46d6AOR8Mp/wAV
143bJIN5agjjH/HpH/jW14h8PWHibSX0+/V9u4SRTRMVkgkXlZEYcqwPf8DwSKxfDKL/AMJ1
43fby15agn2FpH/ia6+gDkNB1+/tNYXwz4n2jUwGNjfIu2PUo1HLAdFlAwXT8Rx06+svxBoF
l4k0l7C9EijcJIZom2yQSj7skbD7rKeQf6Vi+Hte1C11P/hGPEu0asiF7S9A2xalGP4lA+7I
oxuTr/EOOgB11FFFABRRRQAUUUUAFFBOBk0UAFFJkUuecUAFFFFABRRRQAUUUUAFFFFABRRR
QAVw/wAMTu0/xEwAVT4hviq46Df+tdxXDfC//kF6/wD9jBfdR/00oA6bxFfy6V4Y1bUYQplt
LOadA4yCyoWGfbIrmYtc1nw7oqa34p1GzuraSKNYLXTrBkmeaQjaikuQ2emMD14xXVa7px1j
w/qWmCbyDeWstv5u3ds3oV3Y4zjOaxfEvg228S+FYNFuJxG1oYpYZWiV1EkYwNyHhkPOVzyC
RkUANs/iBpVzdw2c1te2V216bGWC5VA0EnlNKN5DEYZVOCCcn8cB8f6bJHH9istQvp5ZrmOO
C2jQuywPskkBLBdmcY5ydwwM5Ay7X4Y2ubP7fJp80UN+17LZwaVFBbSnymjVdgyeM7ssW+g4
xXu/hRZNLZT2T2KvaSXISC+05bm3Ec0rSBRHuXGwthWB6dqANKX4n6MVV9PstU1RDYrqDtZQ
KwjgJYZbcy8gqflGT6A4OJr34j6LYvBK8N82mymEf2oIgtsplGU+ZmBbggkoGC55xzjBg8Ce
ILTX9QTS9WTTbGTSrexFx9jjYTEeZvZURkEbLng42/N0NF78JFnEttaausNi32YxiayWaaEw
IFQK5YALxkgLzubnBoA3JfiNYW13qlvd6Vq1oNLhM15NNFGEiQglDkOd2/aQoGeeDioz8TNK
s7S4l1jT9S0l4beO6ENzCGeSF3CKy+WWGdzKCpwRnpVq/wDA9tqd14mku7lzDr1pBbOiKAYP
LVxuDd/vA8jqO9cv4h8AeJLvSbi4bW21XWDHbWVs626QCGJLhJGkILEM+UDHkAhcY6YAO60T
xLa65c3lqltd2d5ZlfOtryLZIFYZVhgkFTg8g9Qa2a5/QtAvLDWNS1bVNRivr69SKLdDbGCO
KOPdtVVLOckuxJ3enAroKAOY+IrtH8OPEhChs6dMPzQj+tbWjjGiWAxjFtHx/wABFYnxGZk+
G/iRk6nTpgSPQqR/Imt3SznSbI7An7hPkA4X5RxQBbooooA8/wDhNkaP4gYtuB1+9IwuMfMP
auC8JeKfEF1Z6LqcGr+Ib27lu3bU4ri0BsI7VXfewfYoUhAMYY/NxjtXf/CaNV8OatuffMda
vPOI6b9+OOBxjFdRovh7T9A8PxaHYQlbCJHVUkkLnDEkjJ5IyxoA4zQviv8A29cQwWejRTS3
drNNZw218Hk3IMrHMCirCWAODuYcGmW/xdTzZlu9JhjhtL63tL25gvTLFbLMGw5YxqTtZSrc
ADIwxrbsvhzo9nGbY3Gpz2Yglt4LWW8Yx2ySH5gmMEcYAJJIAGKoav8ADk/8I5rttps76hqm
rWyWr3Gs3TMERc7cFUP3Scjjk9TQBDdfFC4863j07QVuRdXd9DbSS3vlJLHaoGaQEI33iHUD
/ZyTzxd0j4oaPeXkVtqj2+lPNZWd3AZ7gYkM6FtoJAHy4Az3z2qzpfw70fTpdOkbz52sNNOn
wo8mI4wwxI6qBw785bOearXfwt0G6g+zNNqUdrJb21rNBDcYSaOAYjV+MkD1BFAFceP9dTUt
es5vCtv/AMSWKOS4eLVQQxkUsgXfGo7fMSRtHPPQ1I/ird3GleIbqz0OzvJtCCS3AttU3wyQ
srEvHKIvmIKEFcD68YrotV8AaHrKa6t1FMDrawLdtHKVI8kfu9vGBj9e9Y+meEvCl+NZtLfx
DcanPrNoI7xjexvIUjJUMAqgLtJ28DA6YoAs2nxJtINQtrDxLDbaFPcWK3qGa7DR7Wcqqliq
4bjJ9PWo9X8RxeJ/hn40uIIPLS0hv7NW37hJ5cZ+cEDoeo/nV3Vfh1pOq3QnNzqFrnT102SO
2nCpLbjP7tsqcjkjPBqtq/hfSvCfwq8Uabo8BgtHsbubY8jPtLRHPJycAAUAXPBGq2Mfhbw3
pZuYRfto8E627PiQxhQN2OuM0t54yN3M9j4YsRrV2uVknSQLZ25/6aTdCf8AZXJ9cV4vo3wl
8b62NF8RT6jo9zC1rb7Le4nlTdbBRiFgkfClPlIB5yetfRlnaQ2VtFb29tDbwxqAsUKhUT2U
ADigDm7TwYL24h1DxTdjWL2PDRwNHts7dvWOE55H99iT6Y6V1YAHQUuMDAooAKKKKAOa+IWP
+FceJM/9A2f/ANANW/Dd1br4X0hTPEMWUIPzjg7BWjqFjbanp89jew+da3EbRSxkkBlYYI45
71xbfBn4fucnw4gyMHbdTD/2egDtjeW4bHnw4/66ClN3BnAniPb7461w5+C/w+JP/FOrg+l3
P7/7dK3wa+H7AKfDce0ZGRczA/o9AHbfbIA2GmiHY/vBwaDeWwODcRf99iuJX4M/D9XyPDkZ
HvczH19X9/5UN8GPh+UKjw7H7f6VN1/77oA7Y3luGx58OP8AroKDeWwODcRf99iuL/4U34A3
A/8ACORdMf8AHxN79t/v/nFKvwd8AKMDw3FjI5M8pPGfVv8A9fegDszeW4bHnw4/66ClN3bg
/wCvix0++OK4o/BvwAJC48OREtkn/SJcd+2/A6/y9KVfhB4BjjKDw1DtxjLSysf/AELNAHZm
8tw2PPhx/wBdBSm7twf9fFjp98cVxcnwd8Ayvvbw3AG64WeVRn6BsUknwd+H8pBbw3GO3yzS
r/J6AO0N5bhsefDj/roKGu7fOPtEQ/4GK4+X4SeA3xnw1bcNkbXkHPPXDdKRfhB4CVdo8N2+
3btyZZCfT+9+vWgCTwcyv4u8bvEQynUohkMCMi3jzyPf8q7SsrQvDmkeGbN7LRrCO0tnfeyR
kkFsYycn0AFatABWV4h8Paf4m0prDUI2K7hJFLGdskEg+7JG3VWHY/h0JFatFAHJ6D4gvbbU
l8M+JSq6wELWt4q7YdSjHV0HRZAOXj7dRlenWduayfEPh7T/ABNphsdQjYqrCWGaJyksEg+6
6MOVYev4HI4rI0fXrnTtXi8NeJZIxqLKfsF4vypqMa9TjGFlA27k6ZOV44AB1teT+C9N8U+M
/Bdjrd5451S2lvN7+VbwQqqFXdRztyRwOP8AI9X6469a4T4MIqfCXQgq4BSUn3PnPQA+48D6
/Ng/8LB1xTu42xQjjnrhR6j/AD0ZL4G8Syyb/wDhYmsrwQALeEDv2AA7/wCe3eYwMCigDiG8
E+IPkMfxB1sMBgloYCOhzxsHfH+eRCngTxEsUqD4ia2WfjJiiO0c+oyOvUEdPpjvMDGMcelL
jnNAHCSeB/EspBb4iaxkZ27LeFQOvUAc02TwL4ickJ8RNbUEgkGKEkED2A4z2rvSMjBpAAOg
oA4l/BviZnL/APCwtWDZO3/RLfAznOQFwe2PSj/hDfE2D/xcLVfb/RLfg+/y8iu3oxgYFAHD
nwb4p7fETVOv/Plb+/8As/T/AD0w/Gel+LfDHhDUdag8e6jNJZx+YI3s4MN82McL7/pXqlcZ
8Wf+SWeIP+vYf+hLQB2EWfKTP90Gn0yH/UR/7o/lT6ACiiigAoorD8ReJ7TQI4ITFJealdsY
7PT4MGW4YdcA9FHVmPAFAFzWdbsdA09r7UZhFADtUdXkc9ERerMewHJrkPhJObrw9rFw0E1u
02t3kjQzLh4yXztYeo6H3rX0jwxNLqUeveI2iu9YUEQRpkwWCn+GFT/Ee8h+Y+w4qj8NARYe
IssGz4hvjlTkH952oA7avILP4ha83iuRbkRjS11u60oBrdVh2orlP3gYv5hKAcptxnuK73xZ
4ti8I2YvbnSNUvbVUaSWayjRlhAx9/c6+vv0NcqNW8N22sWuoJ8O9UGtX/nTKosIPtBVQoeR
sycA+Zjrk859wDGX4oeIhoWkanNoxgVtHurydplTy7pkVQhjwxZRuYEg44bv1qSLx74stbWd
ryKMxhLKaOee1SDCyXAiddiyvuUqwKvkdDx3rvPDkug69okEun6VHFBbebZC2uLZUe1IO2SI
r/CPlAIB54qK38O+CLe21LS4dN0WOF1VtQt0EfAUllMi9gOSM9KAMm78WX8Oq30EUtt5cXiK
008AqGxA8MbOMgjnJc5PTkc4xXN6b8UdefwnoOpXWlhnuLa/mmnYIIrnyIZXCptYspJRc5Ud
Diu6g8H+CtMvY7m30TR7a5hHnxv5aKyYOA/sM960rK00FobW1sIdOeOzLiCKHYRAcFWCgdOH
IP8AvYPWgDyp/iL4vtPDF3fXMMZZ9KjvLaeWzSFY2aVE+VRKxkQrJkEhfujI646q9u/E1v4n
03wmniFUkurSe7bU5rKPLbSFEUaDC8Z3HOTj0reg8LeD7FZbe30jSIkvwEeJY0AmAOQMdxu5
47gelWda03w7rnl2GtW2nXbRHekNyVLISCMgHkZGfy9qAIvBGtXPiDwpaajeJAtwzSxO1uSY
5DHIyb0zztbbkfWuhqjYSaZAx0ywe0U2ihDbQMuYV7AqPuir1AHK/ErP/CtvEfH/ADD5ee/S
ujst/wBgt/NVlk8pdysckHAyCe5rnviM7p8OPEhUAj+zphyM9VIP6V00f+rTnPA5xigB1FFF
AHnfwbZpPC+qyufnk1q7dhjkEsODwOa9Erzz4OyTTeFtTnnUK0us3bjAwDlhnH45r0OgDzr4
pzeI4X8Pf8I1JOLr7Y8rwxsypOscTSeW+OobaRg8En8RxF740168XWtXuU1e203U47Q2dtBc
GA2kPmyxs0j+W3lgmMligJIdcH0972g5zzRj3PXNAHzxFca7qfw7165i1vWjqGn6okNi9vez
5eCV41AJYK0i8ttJAI9hxXa6pp3izwxrVvHZXlzd6Deatp6iae/lluIE8xVkQhgfkcnnnp19
B6kRkdSPpRtGMY49KAPCNC1zxBP4qjkm1d4NVa9uku9OkvZpNkIVyFFt5W2MKAhVy2Dx1yRS
/Di612XXvCN/PbtY2l9FcW9wNmJNQeKIt9ombALZY4G7J+UnJ3V7qEUNuxye9G0HNACgADA6
Vz3j0Z+HniQ45Gl3P/otq6KsDxwFbwF4iWTdsOmXAJQZP+rboKAG+BQP+EB8PAr/AMw234PJ
/wBWK6AAAYHSvm7XvA/i+70XwjN4e1PWJbDVLO2intjdStHayGNfnIB+WPHPouMdwK9Y03xK
fCWmWmk+ItHl0mG2jSCO+gLXFmwUBQWkABjycf6wDr1OCaAO6oqK2uoL22jubWaOeCQZSSJw
ysPUEcEVLQAUUUUAFeN+B/AegeLNO1W+1uC6u5v7WuoQWvJVCor8DarAV7JXA/CT/kXdW/7D
d51/36AHv8IPBTRLCumXKKrBlK6hcDafUDfj8aQ/B/wUWd20+6+cHzD9vnG/nOT8/Nd5XLfE
fWLzQPh7rOp6edt3DBiNwcFCzBdw9wGJ/CgDNPwg8Fl9y6XcIwyA66hcZA54+/wOc0z/AIUx
4F8ry/7JmwSGJ+3T5JH/AAP3NMg8OtokWjXNh4uvV1C4XyguqXUlzBfu0ZPMZfg8bgUI6Ec5
qtL4x8QxeGnv7htGt5JNUbTYWEM8mdkkkbOsa5aUkp8qDHGSTxwAXj8HfBLJIp0qcCTt9un+
X0A+fp3+tE3we8FTwiOTTrl9uNrNqFwSMemX4rG/4T3xTNpmi3VrZ6T/AMTDU30lkuIp4mWV
XkG8qTlV2p9w5IPr2XUPijqGnLf2iafa3Gp2WpLbzxxswSK2HlBpWzzy8u1fXk4+U0AbK/B7
wMkgdNFcMG3BhfXAIPPT5+KB8IPBOcDSZwh3blGoXGDk5PG/1pmn+IvE+qzyXtumhw6X/aM2
nRwTu4l+RmQSF84Y7h/qwoJB4PesyHx/r2n2Tanra6LHZR66dIkMSyJ5aq5VpS7MRgY4GPcn
sADU/wCFN+BcYOiOxJyWa+nyx55Pz9/XrUy/CXwamAul3CrkHC6jcADGSOPM7ZNc5c/GWTTb
ae9v9DaG0TU2s0jMhWby/I81GZWA2lspwfugnPSneJ/iT4g8OQvJNZaRJNawR3F5aQm4nZFk
chVMqpsj+Xbyx+Y5wMYoA3l+EHglAQujygMCDjULgcHqPv8ASo/+FNeBSwJ0RwO4F7P/APF/
rXe859qWgDzWDwtpPhb4oaAukxzQpc6fe+bHJdSSr8pixjeTj7x/IV6VXFa5A8vxa8JSblCR
WV+4HcnESkf+PD8q7WgAooooAKzNd0Gw8Q6XJYX8TFCd8ckZ2yQyD7siN/C47H+ladFAHJ6R
r17p2sjw54kkQXRA/s+/ChE1BQORjkLKO68Z6qMdM74LqF+EmhYAGVmPH/XZ66rX9LtNY0W4
tb2LfHtLqQcMjryrKw5VgeQRyK5n4OxvH8KdADoVPlSEbuuDK5H4YwaAO5ooooAKKKKACiii
gAooooAK4z4s/wDJLPEH/XsP/Qlrs6434sDPwt8QZ6fZxnBx/EtAHXw/6iP/AHR/Kn0yI5jQ
4wNop9ABRSHpXG6l4g1LX9Tn0Two6RG2bZfazIu+K2bvHEDxLKB1H3V788UAXNd8VNb3/wDY
WgwLqGvuAfJ58m1U/wDLSdh91cchfvNwB1yJ9A8MJpF1cahd3L6hq94qi6vZVwSB0jjXokYP
RRn3JPNXNB8Paf4csWtbBJCZHMk88zmSWeQ9Xkc8sx9T+GBWmBtGBQAAADA6Vw/wv/5BWvYb
cP7fvsH1/eV3NcP8Mdp03xARj/kYL7kf9dKANP4gabqGr+BNZ0/SoBNfXNsYo03Ku7JGRluO
me9c/wCNdGvp/EXh++j0zV761tLS4glGl3ggljd/LwdxdCQdrfofavRaKAOJ+HugaronhK40
6+ha0zd3D2UTyLLLDC5yvmMvDNuLEkE9RzXFWfg/VV8J/wBgyeCUGrQ2d/HLrJuIv3ryRyKh
Q7tzmQsMh9oUfQY9rooA8E1n4d+K7jRpLibTPtep3mjpbXUcU6bIilxbmOGMFuNqRMxI4JLc
9K7mfwRLa+P7W68ORroGnrpk0cs+n2sADytIpCsrKfQHIX+EDIr0KigD56u/APiebw3/AGbL
4XMl42lxwxTw/ZSxkDuzLJJIx2AZBAjAJOMsMV1ereDtX1u41fWZtBEV7PeaclpFK8LTRwwO
pkfeGIXdluAckKMivWqKAPE/DHhbxPF4/wBB1i+8OfYBDJdf2h9mFskCiRXCbNpMkg+6WLse
TgDjn2zpRRQBynxMQP8ADTxEGUFfsMh69wMiupj/ANWnOeBzjFcp8TpPL+GfiI7Q3+hOMbgO
vHeurj/1ac54HOMUAOooooA89+DYx4KuDsUbtTujuHV/3h5Pv278AV6FXlHhO68WeDdPuNIk
8D3l2v26eaOa2u4QjIzkjAJyOvQ81vL408UFc/8ACu9UADbT/pkGf/Qv/rUAdzRXBL468TGc
w/8ACutY3AnJ+0w7ePRs4P501fHviVsAfDnWs89Z4x/M0Ad/RXn4+IHiMoT/AMK51vd2Hmx4
P1OeKa3xB8SKBn4ca31xxLGe9AHoVFcB/wAJ/wCIdq4+HWu7yTuBePAHsc80yP4ia8QA/wAO
fEKsxIXGwj8SSMUAehVieMP+RL17OQP7OuOVbBH7tq5hPiLrxcK/w58QKdxU42EDjI54/H09
zxVLxJ401y88M6xajwDrkYmsZo1llMeF3IQS2GOAMk9+n5AHlfg3xf4z0vxPbaboRF1YXAto
TbXf/HuJGgXA3/wE4JABGcdD0r6gVTJCBPGm5lw6g7l56jJAyPwFcL4d07SfGPwh0zTra6Bi
+wwotxE37y3uI1XDcdHVgD/9Y1t+D9dm1nSnhv8AausWErWmoxKMbZV43AED5HGHU+je1AFS
88CWsckl14cupvD1+x3eZZH9y7f7cB/dt9cA+9Qf294p0BCPEOiLqdqDj7dooLsB6vA3zDjr
tLV2lIFUEEDpQBm6N4h0jxBA8uk6hDdCM4kRWw8RPZ0PzIeDwwB4rTrA1zwfo2uzJd3Fq0Oo
x/6q/tHMNxGcYBEi8kexyPassR+NvD3ELW/iawUnCzMLa9Udvm/1cmPcIaAOzrhPhShHhvUG
PO7WL0g4AI/ekfj07/0ra0rxnpGp3sdg0sljqUilhYX8Zgn4JHCnhhwTlSRWH8J4nTw5qTsp
xJrN6yk8ZHmY/mDQB3tQXlpBf2c1pdQpNbzIUkikGVdSMEEehqeigDmNH+H/AIa0C/ivdO04
pPAhSBpbmWUQg9QgdiFz7VZvfCWi31lBZTWsqwwXj3sRhuZY3jndnZnDKwYZLueDjnpW9Xim
g+FPGMUXhubUIHji0/ULmJbKKQf6uXzy00hzjGWRVHp/vcAHpFt4J8O2Npb20WnL9ntrwahG
JJpH8ucLjeCzE+/oSScZOadL4P8AD0i6oX02L/iaSxz3reY4MrodyEnOQARnjAznjk15dqfh
TS9D8L+Abe88O5nmu4RqVpbR5lnYQPuLAcvg5JGeckYOac2iXNvfabeapoGoz+DE1G7kh0tr
czNbo8aCJngGSEDCUhcHYGHAzigD0uHwJ4ch106zHpSretcG6JM0hj84gjzPKLbN3+1jPOev
NWJvCOgXFhLYXGlxS2s9419JE5LAzs2S/J9T06c9K8mHhXxRcnTZIbDUl0mPTpUurGWXZNPa
fbHZLYOTlX8opxlTgbcjPGlLoN/PqWoRpoN7F4ik1dJ9K1gRERQWe5SFMn8CrEHQxHrnGMtw
Aekv4U0V9Q+3Np0bXP2hrkuzEgytF5TMVzggpxjp7Z5rHn+Ffg65TZNpDNH5QiKfbJwrKM7Q
QHwdu4hSfujAGABjz7wnpGsaZ49t9Rk0q7gSK91GS+kNi0O+Jt5RnmLYl5xtUDjPXvXsuiap
Dreh2Oq26ukN5Ak6LJjcoYAgHHfmgC5HGIo0RRhVUKMkk8e55NPoooA47V5Afix4Yj5yun3z
dOOTD3/CuxrkdWjRvil4bcsA39nX+AR975oOP1J/Cur82MzGESJ5oUMU3DcFPAOPTg/lQA+i
iigAooooATnPTiuK+Ecpm+Ffh9s7gIGXOfR2GP0rtT2rifhDuPwr0AuyOfIYBlHbzG4/AYH1
BoA7eiiigAooooAKKKKACiiigArhvjDn/hVWuDoCsQJ44BlQHrXc1wvxjRpPhVrSp94iHHOM
Hzk5oA7iMYQD0GAc9abNcRW8LzTSLHFGpZ3c7VRQCSST0HHWsu78SaPpmnXF3d6lbrDayeRM
ytvKS4+5tXkt0+UDJz0rFGj3vjJxceI7WS10YMGt9GdgTNg5D3OOvOCIwSBgFsngAEZub7x2
xi08zWHhvkS3hyk+oL/dh7pEe8nU9FwPmrrdPsLXS7GKysbaK2tYlxHFEoVV9cD68+5JqwFA
xgYx6UtABRRRQAV5f4b1HxB4T/tqyl8GateCXVrm6jnt2hKvHI+VPLjnFeoV5+3xN3y3a2Pg
/wAR6gttcy2jy29sjr5kbkMM7s46dvbsaALQ8c6zjjwB4gx0HMP/AMXTm8aa3GQp8A67nAPy
yW5GPqJP0qD/AIWHqDQ+YPAHikpjobeMN7/LvzSL8QtR2Mw+H/icKgOf3EefwG/n8KAJ28ba
0i8+ANe67cK0B/k9C+N9ZIIHgDXxt/2oBx/33VNfiLqYRQ/w88ThmyMLAjDg9M7ulPb4i6jE
p3/D7xRkHC7LdH4PPZuP6UAWB451noPAHiD25h/+LoHjjWcYHgDX+PeEf+z1WHxHvyjN/wAK
+8VYUAEfZV5/DdyKevxDvmiB/wCEB8V5IyFNrGB1xj7/APT36UAT/wDCb60Nw/4QDXvk64aD
6cfPz+FDeNtbjHPgDXcDA+V4D1Gez/8A6qqt8RtSHKfD7xQx4+9Ag6n/AHvY/wD1qQ/EfUVL
LF8PfFLEZHzWyrzzj+Lp70AXH8ba1EisfAGvYYgAK0DHn1Ak4/Gm/wDCc6yBx4A8QY6DmH/4
uqz/ABG1FBg/D7xTxxhbdCM/g3SnJ8RNR8nePh/4p2gE4NugP0xuz3oAzPFuv+IPEPhLVNIt
PAetxTXdu0KPK0IVc+vzH3r09QQig8kDmvOr/wCKU+mWdzeX3gbxHb2lsMySywxqqrkDru9x
0z+hr0RCCgIGARxQA6iiigAooooAKKKKACiiigBAMDFAAFLRQAm0Zzjn1rI8VWNzqfhLWNOs
lBubqylgiG7aNzIVGT2HNbFBGRg0AeJ/CbwBfeD/ABjqtlf6xKlzBBDN9mtyDb3UUgYbiGGT
tdWHRTx6HFdz4mEnhrxFa+LYB/oUgSz1lewh3fu5/wDtmzHJ/usfSneK0/sfxJ4f8Sr8sSy/
2ZfY+75M5AQn2WUR/wDfRrqr20t7+xuLO7jEltcRNFKjdGRhgg/gTQBMM96WuS8HX1xYzXXh
LVJ5J9Q0sK0FxJ1urRs+XJ7lcbG91znmutoAKKKKAKGp6Lpms2htdUsbe9t/+edxErgfTI4P
uPSuP+EFpFY+Dbi2g3+TFqd2iBn3bQshAHqOB+fPeu/rh/hXGE8L3rBMGTVr1ifX98wyfyx+
FAHcVzGteNIdI1eXTItJ1HULi3tBe3As0UiKHJGfmYbmyDhRknFdPXJ674Qvb/WJNV0fXJNI
urm0+x3W2BZkkQZKkKSMMu5sHnr0oAqD4lWj65Z6bDo2pSi9gW8t7keUI5LUjJm5cEKBzggN
7Vz3hb4i6lrM9jq2riTTdLuVuDaww2G6O48sOdpnLk7gEYhdi52nrXZ2/grTrXUNKuozIy6Z
ph0yGN8ENGQoyx6nhcf8CNYtj8MzbRW9hc67c3ejWXmnT7J4EBtmcOoYycs5RXYL0xx6CgCe
4+I/hlfKeSKWWeHSf7ZCeUGeCIgYB5+VyG6Z6dcAjL7b4i2t1Z3c1voeqS3NrJFG1vEkbnEo
LI29XKKuBk5YbeAeoqlD8JdHtPDI0e0ubiI/Yri0a42qWkabZukYYySPLQAZxgY96z2+DavY
zI+tRG7kuLacOmlwpAPIWRVDQjhwRIc5POB2GKANZfi34bXSrbULk3FrHMblCJQuY5IAC6Eh
sMTkbdpOciraeP4IJpLTVNJv9OvhLAq20xjdnSaTy0kBViNu7g85FYkPwY0p7FLHUb+W9t1k
uZgPIjjIedEVmGBgbWTcuBxnHIFaM/w+vtQSefVfE9zd6k/2dYrpbSKNYVhk81QI8EHL8knr
gDpxQBrr4z017k2qxXDONW/sghEBxN5fmEkZ+5jPPt0rMtvifoNwmjR2sV5Lc6vHK9raJGvm
AJvHzDdhQTGwXnk+wOMm8+GviATSX1l4uaS+/tKPUlW4s41QyqojJYqCceXkYAx7d6uab8Kb
DR9JtLPTtRuYbi3vGuzelFaRmMckajBGAFEhK4GAeccmgDd8M+NtM8WzzLpMdzJDBEjzTvHs
SORs/uTnnzABkgAgZHPNdJXMeF/BVj4QuJhpVzci0uI1862mkMgeYdZyx5DMODjAOBwMV02f
agDy34keHZ/FPjjRdMs9Zu9NuTpl46yQuVHWMAHByQSeQOwFY3wu8EeOPCtvrE6nTIb6e6Ec
seoRvIZ1QZEiSo3CkueqnkH6V3Oqyyf8Lc8PxfMYzpd5x0GS0Wc+v3Rx9DXZYGMY49KAOUHi
XxBp6yDV/CFyyoQBLpNwl0rD12NscfgpqRPiH4Y87yLrUhps+3cI9Uhksz/5FVQenY11FRTw
RXMZinhjljP8Mihh+RoAWKaOdFkhkSSJhkOjZB/KpK5SX4c+GRcNcWOnvpdyy4E+lzvasv4R
kL+YNIfDviWxwdM8XzTIBgwataJcqT0+8nlv+ZNAHWVxPwijWP4WaAFO7/R2O4j1kYkVb/tT
xhp0X+m+HLPUAvV9LvdrEY/55yhcfTeah+FQA+F/h7AH/HqOn1NAHY0UUUAFFFFABRRRQAUU
UUAFcF8Ziw+FeshWVSfJC5PU+cmBXe1wXxlA/wCFV6uO5MO3Jxz5yUAcR8PfhX4y0LxfH4i1
i40xmd3eeOYtNIWbq4IGFfr8wPcjua90pAOMYGMdKWgAooooAKKKKACuG+GAB0rX++dfvs5H
/TSu5rhvhf8A8gvX/wDsYL7qP+mlAHcAAdBWXr/iHT/DOm/bdQdljMiwxxxIXklkbhURRyWP
YfX0rVrkvHen6rdQaPfaTaJezaVqKXr2hkCNMoR1IUngN8/GaALmj+MLLVby5sZba70y+t4l
mkttRjET+WxIDjkhlyMZBODwcGtaDUrG6tzcwXlvNApw0sUoZFPcEjivM/HupazrXg3V3uPD
klnpoNpEkF46rc3MpuosqNrFVjxxyc5PoKyvEPhjXNYN9qGmeHJ9MsJL6xM+llIGkuUi83zJ
DFkxty8YClsN5eT0FAHsyTwuiyI8bRHIDqwI46/yqOe/s7W2E1xdW8MBO0SSSBUz6ZPB714p
Bo93ENK8PS+HdXurN9Xk1iW3eG3RUgVTHs8sMI0DSNnYD05GSafoOj3iNZHU/Bd5e6bpb31s
+lGKFvJkmk85JVVm2uvluI+vykGgD2lry1UhDPbhsDgyDjPT8KWK5tpZTHDNFIyEhlRwSp7g
gV5zbeALR9f8I3beEtPtbe2trn7dEds/lsVjEKs7DdIy4IB524OO1cXonw78VWcfkQ6ebO6N
lqNvNdMIIkLSbvL2PH+8kBwv+sGFBJGMDAB71aX1pfK5tLmCdYztbyZA+0+hx0qcKAc1574M
0SS38TR31t4Yfw/Yw6StnPE7IPPn3gjhCdwUBv3hwTv716EBgAYxQBx3xVwnwv8AEPGB9lIy
Mf3hxzXYR/6tOc8DnGK474sY/wCFXeINwOPs3Udc7l/Suxj/ANWnOeBzjFADqKKKACiiigAo
oooAKKKKACiiigAooooAzPEOjw+IPD9/pE5KxXkLRFwMlCRww9wcH8KpeC9Wn1jwrZT3i4v4
QbW9Xus8RKSf+PKT+NdARkYNcdp5XQ/iVqGnFfLttbgGoW+OAZ48RzADuSvlN+BoAl8a2lxa
21t4k06MteaNuleNOTcWxH76LHqQoI91HSujsL621OxgvrKZZrW4jWWKRejKwyDVjHINcT4f
3eFfF114ZYKul6h5l7pHYI2cz249ApO9QB0Y9ccAHb0UUUAFeHLr2u6B4H06fQSJLqbxVcxN
AFXM8fmSs0ZLDgtt6jB6V7gTgV5/8IQl34DjuXij3vqF1LuCcBjK/Iz09KAOU1P4mazeprur
aXdPbaMsFnLYfu4/OeIztFKyBgR5jMrqobsAcVr6N4i8biSadbG/1S0sdTuba6tbn7LFdLH5
ELxElcIcMzZ2now616c1nbttzDH8hBX5B8uORjjsealCKM8detAHi/8AwsDxRc6T5NjOH1O6
8PQajHM8SCK2wZzNI3y9SFjULgjJHQZruvEut39l8KLvWrWcx3y6Ys6zbQSHKg5xjHc9sV1K
WdtGAI4IkXZ5ZCoACvPy/Tk8dOTT/Ij8ox+WmwjG0qMY9MelAHlPibWtb8O3l7ZN4qu44Db6
dIby7t4C9uJrh4pT8sYUDauec4I61UufHGp+Gr+e1TVrnXNMttYtLRJxHHLNOJYJWeDcoAZg
6x8gAjdivU9Y0Oy1y1S2vULRrPFMQAPnMbh1Vsg5XI5H1qxbaZYWdulvbWVtDCjb0jjiVVVs
5yABwc0Acx8PtT13UIddj8QzQve2uqvCEhwUiQxxuEU4BIG/GTz71y1p4g8QeXBqkmt3UqP4
mm037D5MPlGIGRVUYj35yqjO73969ZChc4GM1H9mgAAEMYAbeBtH3uTn65JOaAPINA8aXEA0
DVL7xYL1tRiuX1exmRAlmI42fKqFBi2MAh3E79w9sZVj8Q9QtdKiub3xg9xLeaBNdyKiW0rW
9yJECiONQp3BS/ysccE/w4HsV74V0HUIb2K50izdb4AXJWII0w3BvmZcE8gHrSzeGNCuJoJZ
dIsmeBy8Z8hRglSh6DkYY8HI/IUAeWaJ4h8YTatqOn6TNNqL6ZeWc8tpc31vNPLbukglUShQ
g58s4zxg4POKin8d+I72+tLKW6n0tZ7jUizLJaxPH5Mm1Ii8gKfIPvYyTnrXsdpplhYKFs7K
2t1C7QsMSoAvpwOntTbzR9N1GEQXun2lzCHMnlzQK67jnLYI68nmgDzfQNUvtZ8YeCrzVDA9
7Lol20jQNujkO9AGB6fMADgDjOOa9Vrjb6C3T4p6EoRY/K0e88oA/L9+EY29gAT6fpXZUAFF
FFABRRRQA0qMg4yfWuQ+FP8AyS7w9wAPso6H/aNdeTg89AMnnpXHfCjcPhb4eztP+jfw/wC8
cf8A1/egDs6K8ouPGnjHWNQ0W80K20i30nUb+a0thdu7PcrGsnzOQvyKfLJAHOQOore0z4l2
DwKmr2r6fcxRXj3YVhJFD9mcI/zDBOSRjA9vTIB3NFef3Pxa0qHTNN1CHStUuYb6znvQIkTd
FDEcOzZcD8ia2dK8daRrF1e2ltIFvLYoFtpZESSbfEsi7AW5zux9Qe1AHT0V52/xXSCDUp7j
wrrUcemzJbXJHksRMzKBGoEnzH5h0z+tayePIkF1FdaDrMF/byRIbJYBLIwkDFHDIxTbhHyS
wxtIPbIB11FcnpfxA0rV9S0qytYboPqP2lVMiACN4CN6Nz157ZHvVe2+J2hzWIvJlntrf+z5
dQMkqjCxpL5W3g8sW6Dv9aAO0rgvjKwX4X6rlQcvbjlgP+WyfnUb/FzSvsMt5b6Tqt1DbWUF
7eNDGmLZJl3KG3ONxxz8uR+uE+Mzg/CzUWDMoaS2xxyczIcH0/8ArUAegjgDjHsKWuE+I3xK
h+H9pFu0m7u551/dMqlbcNz8rSY68E7QM49Kz/A/xMOreD4NS1ex1Ka/eSRWWw0i4kjChjgK
yoVOAB/ETnrQB6XRXLHx3Y+XvGkeI2GSABolzk+/3KD4809Y2ZtJ8RqQM7Tolzk9f9jHbvQB
1NFcsPHmmkZOm+IF5OQdEusrjPJ/d98f44pR480w4/4l3iADBP8AyBLvj2/1ffrQB1FcJ8K2
3aJrTHO867eliQBk+Z7f4n61rt450gcLba4z9kGh3mT/AOQvY1i/CV4JfDuqzW6uscmtXjBJ
IjGyAycKVPI4xx26dqAOj8SeIk8OWtrIbK5vbi8uVtLW2t9u6SVgSBliAq4UksTxXG6L8TZI
NCku/Fem3FnMBeyQzR7JI5xDK4aJcHIZQAvzAbtpOa7XxF4dt/EVlDDLc3NrPbTrc21zbsBJ
DKuQCMggjBIIIIIJrjPDfwtJ0h4vFl7NqErLdxJbh1EUKzSMzOuFB3sDnJ6ZwBQBfufiEun2
t3/bHhnULa5igiuoLUGOVp4nlSMYIOFYOy5UnI4Iz2h1b4nxeHrC6l1zQL6yntJLcSwCSOT9
3MXw6spwQPLcEeo/Gotd+Gt5f6Hex/29fX+pS28Fnbz3DLGYIUnSRiNgGXOwHceTtAyK05fh
3b6jK8+sard6lcPc200j3EUQVkgLFItioF2ku2eMnPagCW9+IGmW+uX2jWlpc391aaet+62y
qVZWZVC5JABwytk8bT1rHk+LNudC1LVbfQ57mPS5vKv1iuoX8pWUFXVlYq4JOCAcjBz0qS5+
Dfh2fSW0+O5v4laF4mkDoXcGSORdxK/MF8pFUdlGPerUPwxsRpGvWFzq2o3I1tIxcu3lJsKf
dMaqgCjGBjGMKKAJLv4h2mjWN5PrOl3uny2tpHdGCRo3Z/MeRI41KMQWJjYgZ4HXGDjNm+J1
w1xfPpvhe5vNP06zgvb24NykbRxSxCUBUI+chc8Z7H2rfvfAul33iZNfnkuGvIrD7DAN3yxZ
3gyAY5fDkZrlrX4WXf8Abutqdcu7PSLuys7EJbMnmXMUUQjfzMp8p+XAK9mb1oA1rj4kWsJu
ryy0u5vNDsnjjvNViZdsRcK2Qh+ZlUOhbHQH2rrLLW9L1G9ubKz1C1uLq1O24hhlDNEckEMB
0OQRz6Vzc/w509pbmG2v7y00m9kjkvNNi2mKZk245ILKCFUNg8gdq6u3sLO0llltrWCGSZi8
jRxhS7E5JJA5OSTz60Acn8Wf+SW+IDjj7MOe/wB9a7KP/Vpzngc4xXHfFkn/AIVb4g4GPs3/
ALMtdjH/AKtOc8DnGKAHUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVx3xBh+y2On+Io1Yy6He
JduyLub7MfknGPTy2Y/8Brsahu7WG+s57S4QPDPG0Ui/3lIII/ImgB8TpJGrxsGjYBlZTkEH
09qwPGXh+bXtAaKwdYNUtXF1p9wf+WU6HK/8BblT7MeKp/Dm5kHhk6NcuWvNEuJNOmz3WM/u
z75jMZzxzniutIB6igDK8Na3H4h0C11KOF4WkBWaBxhoJFJV0YeqsCPwrWrh38vwd48D7WXS
fEswDMGwlvfBSBkf9Nhgf7ye9dxnNACN0z6e9edW/wAKptO82LSfGevafZySPKLaF02ozEk4
46c16Ke1eVeHLPxp4usbnVY/HtxZQm8uIY4F0yFgqpIyjkgHoPSgDYl+HuqZUxfEDxOpz/HK
jevbaKB8O9WAbPxB8SnJGMSx8DOf7tOPhLx0Tk/EqbOeMaLb0weDPG6nI+Jd3n30qA/1oAVP
h3q4BEnxC8StnptkRccHr8p9v89Bvh3quTt+IPifJPy5mQgcHr8vPOP88hn/AAhfjfH/ACUu
8/8ABXD/AI1IvhDxyu4r8Spxu6g6Pbkfh6fhQA3/AIV3q4L/APFwvEvJ+T94ny/X5ef0qRvh
5qWfl8f+KACTnM8Z7cfwev8AkdajHgzxuoIHxLuuRjnSoDj9aG8G+N2Cg/Eq5wO40mAH8T3o
AkPw81HC/wDFfeKc55P2iP3/ANj6f56A+Hmo7nJ8feKcH7o+0R5HX/Y+np/hEfBfjbP/ACUu
75/6hcP+NPXwh45RNo+JU5H+1o9u386AHR/DzUVHz+PvFJJJ6XEYHf8A2DSj4d34Yk+PvFWO
o/0mP3/2Oeo/L8om8G+ODu/4uXdfMc8aTBweffp7ClXwb44Rty/Eu5z23aTAf50AP/4V5qOW
3ePvFJUn5dtxGCPr8nPP0qM/DrVy3/JQfEwXHTzUzn1zjp7Un/CF+Nx0+Jd3n/sFw/40reDf
G7Yz8SrnqTxpMAPJz+X8qANLQPBDaLro1e58Ravq10LZ7ZReyKyojurEgBQf4F7/AP1utrz7
QY/E+i/EOPSNW8TyazZ3Oly3KrJaRw7JEljX+EZ6Oe/fp0r0GgAooooAKKKKAGSlkjdkC7gp
wT0z2z7Vx/wpVv8AhVvh4Ebf9Gz/AOPNXXzBjE+Dg7Tggbj09O9eU6Hq19oPwM8Ny6ZLDDcX
LQWv2ucb0txLNtLkdCBnoSBzQBt6r8KrC91i3v7DV9V0qNbl7qa1tLp1jeR1YMyc/u2O45Yd
iRjnizL8L/D7anoVyI5Ba6Or+VaZ3JI7MG3yE8sdwDe561y/iTxH4o03TfFMFv4nj+0eH2tp
VultIszrNkeVIpUqGXGcrjIZc47TX2p+JLfUvEVlL4rkifw5piXQlazhAvnYSOWddvCAAJhc
euc0AW4vhrp+i6Zcrq/iRzZHTJdLt2nWOFLZZmLOwOcFmYjGfp6YdN8Iop9Ze4Osv/Z8lzb3
Els9mjSl4VVV2zZ3IDt5wOhIGK4O+e71nV/EnjW8u7OObRY7SaDSNQgSVdrRo+zkEpuLEKQA
SxGSMV1d14n123Ov6yNeBGla3HZQ6QkESiWJnjG1yRvLEOcEEYKHrzgA1fFvgi7k8Oa5b6VN
NLd6vq1ve/IFDQYaMMQSQDgIW7elGpfDC81hWudS8Qpd6m88Mjyy6cht5EiVwqPBuwwzIxyW
6npgADD0zxprmpeMdOs4NauZtN1WS+iS4ksreKFFjRirQZzIxUrz5gwfSqXh74meJdd8YxaF
cX1jaWoeMHUI48rdBN+4Q7lxmbaMZ6BW25OKAOhtPhTf6TNp93pfiiO2u7KW5kVzpaFMT7dw
EauoUAg47AEDtUXhT4TzWV9YT+I72K+TSDNDYRRRbFkRn8xZJOfvBixCjoQpycVz9j8RfGN3
pMurOWS0vtM1C4h8y3gRLZ4o3ePyjvLTYK4IZfQkdavX3xN16BVLW01isWhWuoSm6ijYuXuY
keVQhb5djPwcHj7oxQBq33wU0/UrRIrvVJJJbfSYNNtJTAMwGM5Mv3vmJ6AfwgkZ9NH4yx5+
Fmohmxsktzljkk+clcrrPxG8VJb61fw7LHTklsJYG+zrJPBZzNIvmbGIDSMVQ7D0DfUiDxJr
2oa/8EvEE2ozSSyW+sC1R5rcQSFEnjxvQD5WGcEe1AHtV1aW99avaXlrDcW0q7ZIpUDow9Cp
GCKqaFoWneG9Lj0zSrYW1lGWZIg7NtLEk8tk4yT3rRHAHGPYUtABRRRQAUUUUAFcD8JJHm8O
6vLIcu+t3jNxjkvzXfV5d4A12HQfDMcV3FckX3iO5so3VAUR2kYgk8fKSMZ9TQB6iRkYNFcU
PiZpDR+I2W1vXOg3SWk6RopaaR32KIxnn5wRzit+XxLo8d7dWC6laSX9tG0ktpHMpmUKMnKZ
z0I/OgDVPpjINeD6V8R9ejENzqGvMbeS11JnYJbz5eLJiZYUVHQADPznDf7Oc16z4X8ZaL4u
sYZ9NvoHmaFZpLQTI00IPZ1UnGM4qS/i8LaBC95qEWkafHPmF5p0jiEm4cqScZyAePagDy1P
HXiCE6jbRX811NbvpjxCdrXzX82YLIv7r5FVgV4OSu4c81oan8Q9W0nUbqe/hurVLbXLe1fT
o/LnYxNaO6opUcs8gB68cDgZrubeXwRYGKK3k8PW52CSJY2hT5SdwZQO2QCCO4rQNxoE2q/Y
zNpsmo7xN5G6My71BAfb1yACM9sUAeP3Xi3xnJNDZXN7N9pfV7y0ks9IMInAEEcsaIXTlIyz
hmPtk8ivS/hxql7rnw+0fUdSm8+7uISZJSoBbDsBkDjoBWx5+iRSXN2JdPWS0DvcTBkBhGPm
LH+HhOc/3fapmvdNsIhG1zaW0ccavtMioFQnAOOwJ4HvQBcoqrJqdhFci2kvbdZ96x+UZQG3
MCVGM5yQrEeuD6U5b+zeYwrdQGUSGLYJBneF3Fceu3nHpzQBynxYwPhd4gLLkfZux5zuWuxj
/wBWnOeBzjFcV8V543+GfiOFZIzJHaqzoGG5QXGCR2BwfyNdrH/q05zwOcYoAdRRRQAUUUUA
FFFFABRRRQAUUUUAFFFFABQRkYNFFAHHyJ/YnxQSbZts/EFp5LnHW6gBZc+m6IuP+2YrsK5f
x9YS3XhiS+tVzfaS66lacE5kiy23A6hl3L/wKt3TL631PTbTULQhra6hSaNu5VhkfoaAK/iD
RbfxDoV5plwSgnjwkq/eicco6+jK2GHuKo+EtZudU0hodSEa6xYyG11BE6CVejgf3XXa49m9
q6EjIwa4nxGF8KeJLfxZGm2yuxHYawABtRMnyrg9PuMdpP8Adf2oA7U1wfwfjEXgCJcliL26
ySMdJnH9Peu961w/wnt0tfA4hRi2y/vFbIxgidx/ID86AO4opGbaCSCQPQZqrpmo22r6Zbaj
ZOXtrmMSRMVKkqenB5H0oAt0UUUAFFFFABRRRQAUUUUAFFFFAHI37v8A8LZ0ZBINv9j3fyf9
tYOf0H5V11cldD/i7emE99Euhjt/roK62gAooooAKKKQnHagCK5yLeUjA+Rvm5449q434bWV
tf8Awk0O0u7eKe2mstskUihlcEnIINdnPIsUTu8iRLt5kYgbffmuT+FS4+GHh4lQD9kHT/eN
AG9aeHNF0/TH02z0qyhsZGLvbrAvls3qVxg9B+Qo1Dw7ourzwT6lpNleSwHMT3ECyFPYEjgd
8Vp0UAZd54b0TUNSh1K80myuL6HHlXEsCtImDkYYjPByR6Vl6b4B0HT9VvdUext7vULi/e+S
5uIFaSFmx8qsRnAIyPTPFdRRQBht4M8LtJLK3h3STJKxeRzZxkuxzkk45PJ/OrjaHpToFOm2
RA8vAMCkDy/9X2/h7enatCigDFj8IeHIbu7uk0PTxcXiulxL9nXdKr/fDHHIbJz61butF0q9
RlutNs5w0QhYTQK4MYO4IcjlcgHHTir9FAFGfRtMubr7XPp9pLc7kcSyQqzBkzsOcdV3Ng9s
muI+MNjDB8L9W+zQRQh7mCaXYmN7GZMscDknjmvRa88+NrCL4WanIVztlt2Az1PnL+lAHoQ4
A4x7ClrybwV8bbfxjrtvo6eHL2G5lz88EglSNQOWYkLhRx29K9ZoAKKKKACiiigArxrQNI1L
WfhRrsekLnUxrk95ZPIAN0sU6up+bA52FcnjnmvZa8t+GfiHQdF0LU7XUdb06zuV1e83xXN3
GjL856AnpgZ/OgCna/DXWo7/AMIzGQJGvl3OvL5qjfPHI06cAYb95LIPTGPQGqmj+Adcs74W
F1p99LHb31xdpdm+hFqS6vsZEC+buO8KysccEk4wB6R/wnXg8tt/4SjRM4PH2+LgDr/FSnxz
4QXH/FU6GMcf8hCHj/x72oA4Pw34T8QTN4Xs7rRT4e/sSzmiuL+3uIWecyRlB5eN3OTvO4YB
Hfg1qa74V1Ww1Lw/qttBc+Kv7MkujLBqE8QmAlVAGQ7VU7ShIBGfmOO2OpHjfwiflHijRD7f
2hF/8VSHxx4Q6f8ACUaHjp/yEIeP/HvagDlLTwTLNqfhC7uvDWk2iWsl7JewWwRo4Q+5ol+b
7xBPOOA2cACsDw1pV/qtvCtt4fVJk8Sz30mtyPGF2xzOW4DeZubb5e0rjBzXpf8Awm/hLYT/
AMJPom0cE/b4sD/x6mjxt4PT7vifQh16X8I9/wC99aAPJrfwR4vnUtJ4eNtMdK1G0mWJ7WGH
zJo32CMI29gWCgtIx5bOAAau678NfFElvcxW87akf7CtbWKW6kiQJPHcpI0a4VfkCpkFs9cZ
Nem/8Jz4Qxj/AISnQ8dCP7Qh4/8AHqX/AITjwgMf8VToY44/4mEXT/vr2oA85m8A+ItH1ubV
ba1fWrhtQsdQnP2mOFrmVBceaVDYCKDImFPGOntSvtF8Uat4hurmDw1qNldW2p/2gxt72GOb
ZLbCJVilbMfBjO4c8ECvUj448IAY/wCEo0PHT/kIQ/8AxVL/AMJx4Rxj/hKNEx6f2hF/8V7U
AeU6ro3i618E+ONR8ViBprnTrWGB45FZmVJH4faACw3AEgAHtXuaAhFB6gDNea/E/wAWeHL7
4ba5bWmv6TcTy24WOOG9jd3O8cAA5PQ/lXpSf6tc+g7YoAdRRRQAUVky+J9Agnkgm1zTI5Yy
VdHu4wykdQQTxQPE+hOjPHrWmOqsFYi8jwpJ6HnigDWorPbXdKTdnU7Hhc83KD+tNfxBo8YJ
fVdPUBSxJukGAO556UAaVFUl1fTZDiPULR2wWws6ngDJPXpxQdX09QGa/tFUjOTOv+PTigC7
RVH+2tLB/wCQlZ4/67r/AI07+1bANhr61UjAIM65yenf2NAFyioTdwKyq88QLdBvH0P601L6
0kk2JcwO20NhZATjnnHpxQBYopASe3FLQAEZGDXHeBA+lyaz4XkYH+yrstbADGLWbMkQ/DLp
xx8mB6Dsa4zX0OieOtB15ECW14raTfPyQu47oD/38BXP+3j0oA7Oq1/Y22p2NxY3kCzWtxE0
UqE/eVhgj8vSrAxjjpS0Acn4LvLq2+2+GNTeSS+0gqsdxJ1urVs+VJnucKyt7qfWqfwpWdfB
ZNwo8x9QvCxHTPnuD+oNXPGdhPbGz8VabE0l9owdpIU63NqR+9i9zgBl/wBpR61V+E88d34A
tryEN5Nzd3cybsDCtcSEcduO3PNAHbUgAHQUtFAATgZNRS3MEDRrLNHGZW2Rh3A3t6D1PtUh
5B4z7GvIviHoekaxL4mm09NMvtdgt447xdXmZFsYfKJUwcAAknOc4znJ6igD10kDqQKWvDtW
+IOrWOkRX+jandSwadZWDT29xaxlT5wX/j4ldg7OQSf3YwOCe+Ne28TeJpb28v21ZBaQ+LRo
q2X2NNpg85Uzv+9nDfpQB60TgZNFeM6D8SvEup2Wg3K2cVxA5uYbyURFDczrFNIkMa46ARpl
h1LYHem3XjXxDpHgaLXn8TWN9d3uki9Swe2QGFjIi5TYOUAcqQ5zleO4AB7RRXDeD/FmpeJP
FOqpParb6ULaG503cpEksLvIokbPI3eWSFIGARXc0AFFFFAHIXXPxf0vlxjRLo9sN++h4/r+
XvXU293bXXm/Z54pfJkMUnluG2OOqnHQjI4968x+I8Pim68b6fbeEZoYtQl0e6V5JTt8uPzI
slD2ckKAT0z26jH+GHgPxXZWeq6T4g1HWtJgE6zxpZ3EQWcuCGPmgM2eFyAR1+tAHst3eWth
btcXlzDbQIMtLM4RV+pPFc5J8Q/D7l00yW61iVDjZpVq9yCeeN6jYOndhTrL4d+FbOf7Q2kR
Xl1xm5vy1zKTzzukJ9e1dMsaqgRRhRwFHQD0+lAHJjXfF+osV07wnHYxnG241e9VSO+fKiDk
9uNw5P40ieHvFV8+7VfFzQxN96DSbNIeMdPMfe34jH+HX0UAchc/Dnw1Kjz3mny6pdCLasuo
3Ml02QDjAkYgdeigfSk+Ff8AyS/w9/16D+ZrrJlLRPgkHacMM5HHtXJ/CvP/AAq7w9kYP2Ud
/c0AdhRRRQAUUUUAFFFFABRRRQAV598aWC/DLUMrkedb9+/nJ7dK9Brz740g/wDCsNSICkeb
b8nqP3yUAFt8JtJ0t7+90a5udP1i5uJLiK/ib/UbjkReXwrRDupHPqOMbmheJ5LrUW0TW7Zd
P1yNNxh37o7lRkeZA3Vk4yQQGXoR3rpBwBxj2FZWu+HrDxDp4tL2M5RxJBcRkLLbSA5Dxt1V
h7fQ8ZoA1qK5LTdev9J1CDRfFTxfapTsstSRdkN7gH5WHSOXHJXoeq+g63rQAUUUUAFcrPpX
gE3MpuLDw0Zy5MnmQwbt2TnORnOQc/Suqryf4beC/Dmq+H7+81PQ7C8uJNVu/wB7cQK7YEhA
AJHTj/PYA6waR8PjnGneGDjk/uLft+HtUf8AZ/w3Jf8A0TwplMl/3dv8uOueOOh/KrX/AArv
wZz/AMUtpH/gIn+FH/Cu/BnP/FLaR/4CJ/hQBWOm/DneENl4V3MCwHlW+SB1PTtThpXw7yyi
w8L5U8gQ2/H6VOfh34MI/wCRW0f/AMA0/wAKX/hXfgzH/IraR/4Bp/hQBWGlfDp8MLDws3cH
ybc/09j+VINM+HLZIsfCpwSCfKt+o6jp14/SrR+Hfgw/8ytpH/gGn+FJ/wAK78GYx/wi2kf+
Aif4UAVGsfhqil3tfCagdSY7Yds/yGfwpyaX8OXVXSx8LMpGVKxW5BH5e36VaPw78GH/AJlb
SP8AwDT/AApP+FdeDP8AoVtI/wDARP8ACgCotj8NnLhbXwoxQgPiO3O0+/oeKkOlfDwZzYeF
/f8Ac2/+Hsfyqx/wrvwZz/xS2kc/9Oaf4Un/AArrwX/0K2kf+Aif4UAQJpPw8kUumn+F2A6s
Ibc4/T2/Sutry34m+CPC2nfDnW7yy8PaZbXMUAaOWG2VWU7h0IHFeoJjy1wABgYwMUAOo6UU
UAeSfC/wd4c1nwhJe6p4fsri4lv7nMlzbKXwJCAOemMYxXaH4deDGwD4W0jAHUWqA/yrH+Dy
BPAzgEY/tG64Axt/ekYxXf0Act/wrjwZ/wBCtpPT/n2Xr+VL/wAK58GZ58LaT0/59l/wrqKK
AOSPwy8FM5c+F9MycdIgBxnt070P8MvBUjNu8L6aA3dYgO2O3TrXW0UAcb/wqrwMRtPhmxxj
tuz/AD96WP4V+BonBXwxYn/eBb9Ca7GigDjP+FT+Bdx/4pmyweerf41jeNPhr4Os/Bmv31r4
ds4rmDTp5YpEBBRljJBA6cYBr0yuc8fuE+HfiUtgD+y7gfiY2FAF3wy3meFtHk2bd1hAcEkk
fIOOefzrWrI8K5HhDRBjA/s+Dr1/1a1r5zQAVi+LNCTxL4U1HRmO37TCVjYfwOPmRvwYKfwr
ZJCqWYgADJJ7Vzd3488PW949nBem/vEBLW2mxPdSKR1BEYbaeO+KALfhLWj4h8Kabqbrtmmh
AnTGNkq/LIv4OGFbOecV5bo994pt/E+r6VpWk22lwam7anaf2tLl0B2pMRHFnJLlX2llxu75
46SPwfqN6M+IPFOpXx5/cWJ+wQgHPH7s7yMccufpQBr6x4o0LQ2CalqttBMRuEBcNKy98RjL
EfQVzXwfMD+AYpLXHkPe3bIACu1fOfAwfbFdNo/hfQvDy7dJ0m0tCRhpIogHb/eb7x/Emuf+
EvPw8tHyxL3V2xZurf6RJyaAO3ooooAKytS8NaFq86z6loem30yrsWS5tY5GA54ywJA/xrVo
oAyrrw3ol9eG8u9F064umTYZ5rZHcrjG3cVzjHH0qZdH02OJYY9NtFiE/wBpCLCoAmzu34xj
dnnd1zzV+igClFpOn28VtFBp9pFHbO0sCRxKoidt25lAHBO5skcncfWqieFPDsa3KL4f0pVu
xi4C2cYEvO7D/L8wyM855rYooArR2NtDdG4itoUlaNYzIqAOUXO1c/3Rk4HbJqzRRQAUUUUA
cfcuD8YNOQNll0K5bbnpmeH/AAP5V2FcbcY/4XJYDy+ugXGW4+YefFwfp/WuyoAKKKKACiii
gChrckkWh6hJG21ltZWVhjghDjrXPfCoAfC7w9j/AJ9R/M10Gvf8i7qf/XpL3/2DXP8AwqAH
wu8PY/59R/M0AdhRRRQAUUUUAFFFFABRRRQAVwfxjjV/hfq+4Z2tbsMdsTJ+nWu8riPi6WHw
w1gg4GIR6/8ALZKAO2HAHGPYUpGRg0g4A4x7CloAqanpdlrOnzWGo2sdzaTLh45BkH39iOoI
5B5Fcemoan4Dljtdbmkv/Dcj7INVkLPLZk5wtx/eTsJOMcBuua7umvGkiMjqGVhhlIyCPQ+o
oASKWOeJJYnV43UMrqchgehB7in1wkunap4DuDdaNFPf+GmJabSkUNLZEnJe37snrF26r6V2
GmapY61psGo6bdRXVnOu6OWJshu34EHIIPIIINAFuuC+EnmJ4Vv4ZBgRaveIv08w9+/JPNd7
XF/DOBIdA1JlO5n1m+ZnJzuPnsM/kooA7SiiigAooooAKKKKACiiigAooooA4v4s/wDJLfEB
xx9mHPf7612Sf6tcHPA5xjNcb8Wc/wDCrfEHp9mH/oS12ajCgegoAWiigjIwaAOB+DsZTwIT
twjX90U46jzWH9DXfVwPwdtzB4BU7AivfXTIB0wJWX/2U131ABRXDD4kWY07Ut+m3K6nY6km
mnTdw8ySR2whXPBVhlgfRTXQ2virw/eapLpdrq9nLexbt8CSgsu04b8u/pQBsUVhWnjTwxfW
1xcWuvadLFbR+bMy3C/u0/vHngZ4z68UsPjLw1PYS3ya9p32WKQRyStcKqox5AJJGCe3rQBu
UVStNY02/jgks9QtbmOcsImhmVxIV+9twecd8dO9U7nxd4bs7eG4uNe0yOGcMYpGuk2yBcgl
TnnBBBx3GKANmuX+Iuf+Fc+JCNo/4lswyf8AdPHT/Pt1rpo5I5oklidXjdQyupyGB6EHuK5z
4hQrN8OvEgYdNMuGz9Iyf6UAeUp8b4IvEfhrR9DtmudHiijt7kKoWSd2TYETzMBQrbTkkZI6
gcn0528b6o5SGDS9CszuAedjd3OOx2LtjU+25qbpPg7w7qHhrRmvtC0y6kSyhIle2UknYvOd
ua64DAAxigDkz4Asb9t/iHUdS11sD93eTBYQfUQxhU79wa6WzsLPT7dbeytYLWBfuxwRhFH4
DirFFAHHePEGmppXilUZm0e6DTlRk/ZZfkm49ACH/wCAfl2AORUN9ZwahYXFlcxiS3uImhlQ
9GRhgj8ia5r4eXUzeGjpN5IXvtGuJNOmJXGRGf3be4MZjOe+TQB1lcN8Iyv/AAry0WNHCC6u
wC/Uj7RJg/0+oruCcfSvKfCEnjvwj4fOjjwELsQyzSJOurQR+bvkZhkc44IGfp07AHq9FcEv
i3x4yOz/AA1kUqMgDWoDu/T0z+OPqA+KfHiqQfhoxbnAGt25GPrj6cUAd7RXCp4r8cNGT/wr
eUMuML/bNuAeeeuO1I/ivxsIZnX4bTllOFVtYt/nH4Z9+OaAO7orgf8AhLPiD8+PhmPlPH/E
9g5+ny08eKvGvkq7/DebzDjKrrFucAn8D07YoA7uiuFHijxyY3H/AArd9ykhVOtW4Ujnvj6d
u9OHifxsFVW+HMuc8hdZtyAP0/lQB3FFcMfFPjjymC/DiQyjqrazbhT9G/8ArUDxP43GN/w4
fB4wmswE559cDH4/hQB3NFcG/inx8CfL+GxYDkbtdgHPfsf8ntSSeK/HscmyL4aM64yD/bkA
/pQBbuZN/wAZLCHA+XQbhs/WeIf0rsq880S38U6r8So9e1vw3/Y1pBpUlmu2/juPNZpVYZ24
IGAe3Yc16HQAUUUUAFFFZeu67aaFZCWcNNPKfLtrSLBluZD0RF7n17AZJwATQBT8aa1Y6D4V
1C81CZYo2geKIYy0kjKQqKvcn09iTwMjP+FQA+F3h7H/AD6j+Zpml+H712u/EnihopNXeJxB
bq26HT4SD8iE9XP8T9+g4HL/AIVAD4XeHsf8+o/maAOwooooAKKKKACiiigAooooAK4P4yRt
J8MNVwUAV4G+YZ/5bJXeVwvxfj8z4Yav8itgwEbu2Jk5oA7kcAcY9hS0g4A4x7CloAKKKKAE
Iz3xXJX/AIevNCvbjWfCcMSzTyedf6azbYr085Ze0cvo3Csfveo66kIBOSB0xQBlaB4isPEl
kbqwZxscxzwSqUmt5B1SRDyrD/64yOawPhfL53hq8cRbFOrXxU9iDOx44Bx25weKu6/4Vlud
RGu6DcJp2vRrjziCYrsAYEc6D7y+jfeXgjpis34STXF14IN3dxLFc3GoXcsiKcqrGZtwU85G
cjqenWgDa8XatrOiaNPqWl6fZXkVrDLNcpcXLRNtVc/JhGDHAPUjt68VtP8AFNxa6VZ3Pia3
t7O5v5MWltYNLePKCm/7qpuyADnAIGOvNa3iPTZNZ8MatpcLokt7ZTW6O+dqs6FQTjtzXKeK
vAt/qq+H7qxmhludIhaEwTTy28cysigkPF8ykFQcdD7UAa198RPC+n2FjezaizQX8Mk1sYbe
WQuiDLkhVJXHfdjHPoaWf4geGraSFJNR/wBbDFPuS3ldI0l/1ZkYIRGD/tkVzOn/AAyu7d4h
NLp0cVrpNxZ2qWiSALNOWMjNvZiVGcDnJyTx0rNufhHqnmSLDc6dcxXdlZ29z9qkuEEbQxLE
SqRMqyAhcgP0NAHc3HxA8M2mrTaZPqQW5hl8h8QSsgl27vL3hdhfAPy5zxjGeKfL478NxadZ
6g+qRCzvIHuYZSGAMaY3MeMrywXB5yQMZrHsvCniLSr+4s9OutLj0W41Y6i0skbPcKrEO0YQ
grncMB85A5xmuX0f4Zz6np3ie1lkuLGykuWt9EWeBV8iFZ/PJ8vrsaTHXBKqDgcYAOr8P/E3
StY1a70+fzLST7abayae3liW4GxWXl1AVzuOEPJABxzWha/ELw3d6lLYpfNHNE0yu01vLHH+
5/1pEjKEwuMnmuQs/DfjbXtS1GTVxpNilvqyX8QihkIuJ4YUETAseIiyqWx8xwwBHWrkXwuu
Z9FsLTUNViNwI9R+2ywwY8x7sEEr0xtz3647dgDdT4meFTp91fyX8sFrbRJPI09pMjGJ32JI
qlMshbjIB98Vr6N4k07XpLmKzadZ7VlW4t7iB4ZYtwypKOAcMOQe/wCdeXXPw58Q6b4XmSKL
TTfxw2drbvZiaaUlbqFy5Mh+VAE3bF46mvQvDmiata61qeta7NYy394kVuq2SMsccUe8jljk
li5J9MDrQBR+LOf+FW+IPT7OOf8Aga12akFQR0PPNcZ8Wf8AklviHj/l2HP/AAIV2SZ2DJyc
dfWgB1FFFAHn/wAG38zwK7794bUbogg5GPMPT2rvzjjIyK8++C24/DuORypaS9uWOwYX/Wnp
044r0KgDgP8AhCJ7/wCLA8V31na21taQeVbiKUu9zJyqyuNoC7VYgDk9OeKoaP4a8WaFoljp
FppmjzDR2uWtrye4Ie4EnmbdoCZjb58tzzjA65Hp1FAHkN98LNTk8O2el28loHg0NbNpGY7X
uFuI5tp4yYyUYZ7Z6c8O8ReGPFviF7jVhodvY3bXOnslrDqCiQi3aVmfzQuA37wBeDwAccAV
65RQB4xbfDrxZLLpjTTR2SS399LfSJcCW4jt7gRhkMm0b3O0jeACvHNV5fhb4gijmt9LjSwh
j0/ULUFZY5TPE80jwQDeDt+8CX64OMgjj2+igChoVrLY+H9NtJ1CzQWsUTqCCAyoARke4rL8
fhj8O/Eu3j/iV3HT/rm2a6Ouc8fsV+HXiU7d3/EsuBx7xtQBpaCmzw/piklttnEN7fePyDrx
WjXm2jfFrwTbaNpNmusyXN0YIYFiS1keVn2gYIC4zn9a9JoAKKKKAAjIwa46VJNC+JkdwPls
fEFt5MnXAvIQShz6tFuHv5Q9q7GuY8e6Zdal4WnfT40k1KwdL+yBXdmaJt6jHHXBX/gVAHTE
Z7A8YzXnWnfEbW9Xge60zwJqN3pxmeOKdbuFd4Vip+U4IwQf8a7jS9Vt9Y0e01SzO+2uoVmj
JODgjOD6Hsa5L4Onf8MtNk2BS010eOf+XiTvgf5FADv+Ev8AFIAx8OtROQf+X6Djk8daP+Ex
8VEY/wCFdalj0+3Qf/FV3NFAHC/8Jj4pxgfDnUscjm+g/wDiqP8AhMPFOP8AknOpYGet9B/8
VXdUUAcMPGHinb/yTnUu4wb6Dp/31Qvi/wAV4OPh3qXHIBv7ccf99fpXc0UAcMPGXirGB8Ot
SwP+n6D/AOKpB4w8U9vhzqXt/p0Hv/tV3VFAHCjxj4pHT4dalx/0/Qe/+1R/wmHigjP/AArn
UvT/AI/bf/4qu6ooA4b/AITLxX/0TrUv/A6D/wCKoPjLxUR/yTrUv/A6D/4qu5ooA4/Q/GV7
qXib+wtS8MXek3DWb3UbTzRyK6K6qR8ue7Cuwri7llPxnsUX/WL4fnbrxzPFjjPsf89O0oAK
KD04rn/FHieHw/bxRxWr3+q3ZMdjp8J/eXD45/3UHVnPAH4UAWPEfiCDw9YrM8UtzdTN5drZ
wDdLcyYztUfTknoACaz/AA/4duk1F/EGvulxrcy7UVOYrKPn91Fke/zN1Y+3FO8PeGZbW8fW
tdlhvdfnj2PNGP3VtHkkQwgjKoM8k/Mx5PoOm6UAVb5UGnXQdQYzCwbPIxg9fauZ+FYx8LvD
wxj/AEUH9TXVzxmaCSIErvUqGBIIyDzxXnOi+C/H+g6LbaVY+MtOW2tlCRB9MDFVHbO7n8ea
APS6K8/bw98Sjtx4304BQBxpK8jvnn+VL/wj/wASfKCjxtpoYf8ALT+yV3Y9OuOPpQB39BOB
k158vh34lhcHxzp7DI66QnI9OtD+HfiU2MeONOUAbcDSE59+T/nFAHoNFcI2hfEcxlR4w0pT
kcjSRnHp97GKRNC+I6xqp8Y6U5AwWbSRlh74bH5UAd5RXD/2P8Rsf8jbpB/7hR/+Lo/sf4jf
9DZpH/gqP/xdAHcVwvxgVT8LtXBwcGBuT/02SnHRviOQQPFukD3/ALKP/wAXWXrngfxz4i0e
bStR8Waa9pMylwmmbWIVgwGd3HIH5UAeljgDjHsKWkHHGAB2xS0AFFFFABRRRQAVw/wnjMXg
nYMlBf3gXc2TgTuOe/Y9a7iuA+DsnneAllEXlh766YD0BlY4HHTt+FAHf0UUUAFFFFABSBVU
5AANLRQAmBnNLRRQAhAPUZoAAGB0paKAOL+LPHwu8QHA/wCPYDPf7612ajaoGc4GM1xnxZ4+
F3iDjj7MOe/31rsxggEZ555oAWiigjIwaAPP/g2yyeARKrE+Zf3TlSOUJlbg+vGD+NegVwHw
blSX4eRFIjEFvLobCgUr++Y4wB2BA5/wrv6ACiiigAooooAKKKKACuc8fhm+HXiUDj/iWXB6
Z/5Ztmujrm/iD5n/AArrxJ5YXP8AZlxnPp5bZ/TNAHD/APCmdM1XXtD8QiQ2ka2sbXkFsTCz
TLGNkkbLyh3cnHdQe5rrpLTxhoSBrG7h8RWi8tbXxEF1j0WVQEb6Mo/3q3tCR4/D+mIwYFbS
IHefmzsHXHGa0CMjBoA5ew8daU9wllqiXOiX7khbbUo/KDf7kn+rfvjaxPtXT5z05qC7sbS/
tHtb21hubdxhopow6MPcHiuVk8Ctp8wm8La1eaKOhtP+Pi0P/bFz8v8AwArQB2XWiuN/4SjX
tCXb4k8OSvAo51DRibmLvktFgSIAPQMPeuh0jX9I1+2NxpOpW17GMbvJkDFCRnDDqp9jg0Ac
/wCDof7D1LWPC2AI7SX7bYgcKLadmIUD0WRZF+m2qvwdUr8MdNDIEbzrrIHT/j4kq94qU6Vr
Wh+JEcRQW8/2K+JYKDbzEIpJ9Fl8tvYFjxzXMaNrFx4Z+Bl1q2npEk9tPdtGJB5iL/pjrztx
kAHt6UAeqUVwD/FDSJ9csILG8Ell9luru9eS2lQpHEgYMm4DP8XTPSp7b4n6dcQysdH1hJxZ
pe29r5CvLdRO+wGNVY8gkZDYIBB9cAHcUVx9n8RdKu57eF4bi1ke/k0+YXBjAgmWIybWYMQQ
QMcE88HFJc/EWwh0lNTt9N1G7tTJcI0kKxhIxC5Rizs4T5iMqM5YdutAHY0Vydt8QtDvbeSe
3e4aJJbSLPlgFvtITyiATnb84z0IweuKhPxJ0RZtPt9t39p1G8ms7aExjczRuyFjzgIWXAJP
8jgA7KiuB/4WtpkWnaje3mkaxZpYy/ZnFzDGDJccAQphzlznPoBySKsj4k6eNIlu2069N7De
xWEunRmNphNIRsA+faQQcghvX0NAHa0VyenfEDSb++gs5EuLKaZrpALzYgDW7hHXIYgnJyMZ
6H0ovPiFomnnX1uZGV9FZROhZA8m5A48tS3PXHbkUAdZRXNr430Z9N1q9SViukPcx3MWB5uY
M7yq55HHB/lWVN8UtFhkLG0v2s4lt2ub0IgitvPAZA5LA8BlJ2hsZ9jQBJcSE/Gmyi5IHh6c
44xzcR/4V2tcRPgfG60O7n/hHZuCP+nhO/8AnpW14h8QrpHk2trbG+1a6BW0sY2AaQ45Zifu
Rj+Jj09yQCAHiXxJHoMEUUFu17q12THY2EZw87jrk/wovVnPAH4AweHfDUumzTapqs0V7rt4
uLm6VcLGvaGIH7sS8cdSfmPJ4f4d8OPp0s+p6pOL7XLwAXN0AQqKCSIolP3Y1zwOpPJya6AA
DoKADAGOOlLRRQAY5zRRRQAUUUUAFFFFABjnNFFFABRRRQAUEZGDRRQAUUUUAFFFFABRRRQA
VwnwhhEHgJI1+ZBe3YVz/GBM4z+ld3Xnsfwh0K2dxZ6nr9pbPKZPs1tqLRxKSc8KB0oA9Cor
gV+E+lq3Ov8AidgR31V+uOv4UwfCXTBIrHxB4oYZBKnVWwf0zQB6DRXn6/CfTxsVvEfipo1J
IQ6s2AT17f5xR/wqbTGQD+3/ABQrZOXGqvn+WMcfrQB6BRXn3/CpdPV9y+JPFS5GMjVWyP0q
w/ww06UIJNd8TyBehfV5SQc5P545oA7miuBm+FGlyPldd8TRg54TVX49OuaF+E+lZGdc8THA
xk6q/J9aAO+orgm+FOlEpjW/EwAOWxqsnzfX/wCtinRfCrSY8B9Y8Ry9fmfVpc/pigCb4tD/
AItbr+R0txg9871rte3NcFN8JdAuo3hur3XLmByC0c2qSsvGDgjPTIFd7QAUHpxRRQBwK/Bj
wMhk2aXOiudxVL6dRnOQcB+3aj/hTXgpVxHY3kbFtxddQnyT7/Piu+ooA4JPhB4WjbIOq7Q2
5V/tKYBR2Aw3Qfn70v8AwqLwx5hYPqy5fcANSmwOMY+9n39feu8ooA4L/hUHhfYF36tnABb+
0psnr/tY5z/nmnf8Kl8PrxFe65EuchU1SUAHjJ69yoP4fSu7ooA4o/DDSN+5NU8Qx8AYXV5u
wA7t7VCPhRoYjMY1LXxGeqf2rLg856Z9ea7uigDif+FYaV31jxGTjGTq83+NRXHwn0S7t3t7
jVPEMsLqUeOTVZWVh7gnBru6KAIre3itbeK3gQJFEgjjUfwqBgD9KloooAKKKKAA9OK5/V/B
Wg6zcfa5rL7PqH8N/Zube4XjH+sTBPHY5HtXQUUAcDrGheLIdMvrAXNt4j0u4t3hMN4wtrtA
VI+WVFKMehyyjnnPesb4e6Anir4AWmiXMr263azo0qDcQRcOc4PuK9Uk/wBW3HY1wfwWGPhT
pPGP3lx+P7+SgDoPEHhS18RNALmeSOOK3ubZljABZJo/LbnHBA5FcvpvwvutNsZIYfEKW1yL
VLa3utO0yK2kTa4bdIQSZCdqqRkAgHjJzXo9GOc0Aef6b8KtOtnia/uIrxBffbZbVbKOK1dv
KaNQIhkLjduJ5yRzVS5+DtlJBZRW2qvEtqLiMJLZxTRhJpGkOxGG1HGQA4HQDius8b6vfaB4
M1XVdOg866tbdpEUjIXHViO4UZY/SuC1/wAS6xoVt9jt/F8WoefLZCe/a2jD6dDKzh5iUXy9
h2rtzyN3PGCQDp2+GukHSdHtSEa90t7fydSaFPtGyFwyoWGONo2/rjNUdH+Hui5a5sNU+0yp
rn9oTToUfDIzsIMDIVV8xs45ySeM4HFeKL6+1XV7fwxea+tzodrrUMcuqzKhzuiZvJlwPLYg
gjkAZIyKt2fjW/8AC2pabpWnw2FzpKajf2m6JYLRbpI44mVt/wAsYZWZlJGAxU4GegB22qfD
e01bSdXsri+lL3+p/wBqRTGNW+zyhVVRtPyuoC4w3UH8ajsvhy0UtibrU7fyLfURqElrZadH
bRO6KBEAASQFILck5J7cVwGofEjWPEOgeLvEGg6xeafaaUlm1nbeRDwZflkEhKsTggkEEDkf
hreJvHHiPw34g1vw/ZXM2pXNvpP2m3nngjzGRvklmkKqq4CYUDGCQgxknIB0Gr/Ce01Gfzot
QVXae9mcXVlFcrm5cMcK3QrgYPX+VMX4NaENG1SweVpZb1IEjvJolee3ESIg2ueedueMYzgd
K5SPx54nudbtVmvbxSJtKLR2dvA9oYLgR7vNY/OHYswABHTgYOR7iowMUAeWan8E7LVbrUHn
1h0iu7ue8Hk2cSzJJLu+Uy/eaMbvucA/ytyfCW3XU2ntL+3S2mW3W4W50yG4m/dKFJikb/V7
lUZ4bByRjt6TRQB4X8cBqs3iXT9N0Czmub/UNLkt5kgQs4hE0bgjHQZTGfQmuw+FGl+IbXSr
u48W6a0esSOF+2zziWaeIDhW5O0L6cA5zjOSb05J+NtovGP+Edm7f9PEfX2rtsYGBQAYwMCi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAGy
f6tvoa4P4LqV+FWkAoRl7g/+R5Oa7uT/AFbfQ/yrg/gsMfCnSPlx89wM+v7+SgDv6KKKAEZV
dSrKGBGCCM5FZ1p4e0Wxsp7K00iwt7W4z50EVuipJnruUDB/GtKigDOj0DRodLfS4tJsE09y
S9otsgibPXKYwfypX0LSJLOCzfSrFra3GIYWt0KRj/ZXGB+FaFFAFb+zrLyZIfscHlSAB08s
bXAGACO4AAA+gpX0+zkkmkktIHeaPypWaMEyJz8rHuvJ4PFWKKAKiaVp8SFI7C2RSUYqsSgE
pjYTx/DgY9MDHSrfSiigAooooA4ect/wvG0G3j/hHZcHP/TwldxXETf8lxtP+xdl/wDShK7e
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gBkpxE3pg/yrx/4ZfEXwhoXw90zT9R1m3tbq3MiyxMj7gxlcg4A5BBBzXsRAPWs5vD2iOxZt
H08ljkk2ycn8qAOZPxg8AqQD4jg6Z4ikP/stSP8AFvwHHGsjeJLUq3QKrk/iAuRXQ/8ACN6E
BgaLp3/gKn+FH/CO6Gc/8SbTuf8Ap1T/AAoA5s/GDwCBn/hI7f8A79Sf/E0H4v8AgFXCnxJb
5IB4jkI599tdJ/wjuhnP/Em07n/p1T/Cg+HNDJydG07/AMBU/wAKAOcHxe8BFC//AAkltgZ/
5ZyZ4x2257/z9DRJ8XvAMTBW8SW5JGfljkYfmFroz4c0MnJ0bTv/AAFT/Cj/AIR3Qzn/AIk2
nc/9Oqf4UAc4Pi94CP8AzMlt0B/1cnf/AID+lL/wtzwF5Jl/4SS225242Pu/7525x74rov8A
hG9CAwNF07/wFT/Cj/hHdDOf+JNp3P8A06p/hQBzzfFvwGjAHxJa5IB4Vz1+i/8A6qB8W/AZ
RX/4SS1wxIGVfPHttyOldCPDmhAYGi6dj0+yp/hR/wAI3oWMf2Lp2B/06p/hQBzbfF/wCpIP
iS34AbiOQ9f+A9fanH4u+AhEJP8AhJLbaewR8/ltz2rof+Eb0IY/4kuncf8ATqn+FKfDmhHO
dF0456/6KnP6UAcJovirRPFfxkhuNFv0vIIdAmR2VGXaxnjODuA7V6dVO00nTbCUy2en2ttI
w2loYVQkehIHSrlABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRUVxcw
Wlu9xcypDDGrM8kjBVVQCSST2ABNAEtFYSeNfDEmnS6gmv6a1nE4jknFym1GPQE56nsO9WZf
EmhwJZvLrFhGt6A1qXuEHng4wU5+bqOlAGpRWO3izw6t5NZtrumi5hDmWI3Sbo9n39wzxjBz
npipNR8SaJpEbyajq1laqkixOZp1Xa7LuVTzwSvIHpzQBqUVU/tTT/IuJxe2xhtxmeQSrtiG
0NljngbSD9CDVdfEWiPeXFmur2JubZWeeIXCbolX7xYZyAO5NAGnRWK/i/w5HpEerPrmnrp8
knlJcm4XYz8/KDnrwePant4r8PJdy2j65py3EKs0kRuUDIAu4kjPAC8/TmgDXorHj8V+HZbK
K9TXdNNrKzLHKbpArMv3gCTyR3rUaeJJI43kRXkJEalgC+Bnj14GaAJKKof25pI1GHTjqdn9
umXdFb+cvmOuCchc5IwpP4GrwOaAFooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAC
iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKTIxnPFc34/XUpfBWoW2kLOb668u2jMCksgkkVGbjoFUsSeMY6ivNG
tPH8s+kRx2l6I/D8F5bxFt2Ly4ihdUnYtjKsxiCKc5+fnFAHuFFeEnU08NnTdQ0ax18XpsJY
rs3cFwH1C+kX93EVYfO4YO5YDAUYB5ArMihmshqNl4fudcjv10S0F1MbW4WSVmuv9JuFRsMx
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
ADoMUUUALRRRQAUUUUAf/9k=</binary>
 <binary id="i_013.jpg" content-type="image/jpeg">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</binary>
 <binary id="i_014.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/4QAWRXhpZgAASUkqAAgAAAAAAAAAAAD/2wBDAAgGBgcG
BQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgy
PC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAEKAcQDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEA
AAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1Fh
ByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5
usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEB
AQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdh
cRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RV
VldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3
+iiigAooqqdSsxqo0vz1+3GA3Ah5z5e7bu+meKALJOCOOKwo/GnhybXpNDj1izbU0Yx/ZvM+
YuOq+m7jpnNaWrJevpF8unOq3zW8gti/3RJtO0n2zivLtJhvNQ8J+G/Cun+HtRsLi0uYJ7+4
vrUpHE8Tb3cOT87PIONp6MelAHot/wCKdD0zT5dQvdUtYbSGZrd5WkGBKpIKe7Ag5A5GDXPP
8TdLn1q0ttLWLULCVUe4vobgDyC8hjUFMZJyOc4wOa47RJZtPtPBOq3Olahf2djb3kd2trbm
aS3v2cB2dF5zkSAHBxk9K9K8LI89pdapcaImkXF9cNK0Z/1zoPlRpeOGKjOMnGfXNAGxb3tv
eWUd5azRzW0qCSOVGyrqRkEH096nJwQMHmvPvhulq+k2FzDBd+QZNRaykUkQLA1xlRjOMkY2
5HQNVHxM2uR+PbSbSbDWpJEuoTKgdxBcRbTkI4fy0UfxK6ZJ24NAHpwYkfd5zilJ4zXz5Fqn
inSLK/V9P16GTWNNNnaxhZvlvyzH70js2/aSd67QduAOK1Lq+1N7vUdFsNN8QGJdQN0qzfaX
aCBoAsYKLIrMrSrJgFwFIyeOgB7cXABPGB1JpSQOteTQab46i0zRL4XN5Kt1c2DahZShhcwm
IhZCGDBdjbdxBHINO+HLeIz4sM2o2usQ2U+nESpdrNsjuBLn5mkY732k/MiovOAOKAPVt2FJ
OBgZOen50FgPr6V5bcxa0vjS632+snUjq8D2dyjyGzWw+Xepwdg4EmVIySVIz2u+P7XxLc+J
dLOkxak+kx2sx1NLOfy3mjLp+7Tn/WYBx0OCQGGaAPRSxAyBn6UbueQQO3FeRiDWzq1x5Nnr
qav9vuzPMTIIHsTHL5IQ52DnygAMMGBzis+ys/iJJp+nW17b3yDSbGaJXilYPePNayFWYg9Y
mCR9zubPHYA9sLDJHf0pSf8AOK8OlsfiXNpsUNwL9RYadc2iPDM2+7leBnErHOcg+Wgzn5t2
Dmrur6b44vLK+nvDfmS/GnTfZ7UO6WqiWXzIwFZSxCCMvggkt1xjAB7Jn2oyPf8AKvDDpHiE
aRGmrWHiK8lWwuY9JeCRw0F150myRwG3ISjRbdzEKFYc1pW+jeKx4nuNS1mG/vNOF2yS+VJK
JZEa1YOkaK4TyA+Ap2hiSDkYoA9g3HHTJ9jS7hkDB59q8PtdL+I6/b/tq6jN5sMq6YPtO77J
MYF2NIeN+FygboJMkjJBFVbO90zSo4ryPXpbG61Oyiktfskls0znzTLtzMzMSAN2CFJ6UAe9
FvlJAJ9qAcivCtU8O67e29oXsdcHh8fbFsrGOEy3FsCV8surSKQcB9hJbbwMDNe0aNDdwaJY
xX8rzXaQIJpJMbmfAznbxnPpxQBeooooAKKKKACiiigAooooAKKKKACig8CkLDOKAFooooAK
KQHPaqc2r6db6lDpst9bJfzKXitnlVZJFHcKTkjg9PQ+hoAu0UgJJPGBS0AFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAVxKjHxvk4AB8Og+5/0iu2riFLH44tnoPDgx/4EUAds
Rkg+lG1cAYGB2paKAI4reGAOIYkjDsXfYoXcx6k47n1pzoksbRyKGRgVZSMgg9qU5xwOaydE
1h9XfUlaFYvsV/JaDa+7eFA+Y8DHXpz0oA0oba3t7eO3ggjigjUIkSIFVVHQADgAelP2LjG0
Y9KdRQA1kRgdyg59qXaN27HPr/n60tFACBVU5AANG1eeBz7UtFADTtRSTwMcn0FJhBhduMng
Y7iqetagNJ0O+1IxtILO3kuCinlgilsfjjFeYx3OoWXh7wz4ibXtQutb1m7t5HtVnJglif55
I1iPyqixk/MOQQMmgD1sbeVAHHbFZdv4g0S712fRLa/tpNStl3zWyn5lHGfbuMjtmvPrXxl4
ig8O6Mbaewur290261u+lvdxS3hGGRVCkYHzbOTxtNLf6ZrUvhvVfHMurPaXE2iG5trNIMPY
PsWVgr7sYZlAfKZIwCcLQB6nsRs5UHPWnFVJyQKytCvr7UoPtlyLaOCeKGWCGPPmRbowzLIT
xnJ4wBxXDr8UL24uI4bXT7TbHeXdpeXNxK0UNu8YlMKliOpWLcx6KCPXgA9LOwbhjHHPHanY
U84ryDVPFni3VLl/DKyWmn6mNVt7OS7jjliR4ZI5nOzcSwH7kgOCC3bbSWXxCvtCtxo0enC4
vkgvBHE11LO81zDMVY+ZJyIsB2+bkBSO1AHrzJGFO5RjuTTZraC5MZmhjkMTiSMugbYw6EZ6
H3rzKD4kaxPBLq4g09dMtGsUmtFDNcS/aUQkq24BSpfgEHdgjIxmksPiNrGq67Nplm+mMtxa
XF3ZXQtpjCqxOVALFlMoIH31CgHs1AHqJjRs5UHPXNKAAMAYH0ryKf4keK3stLWzs9PkvbvS
G1hytrI0aR8BYj+8GDnrITgZHHeteTx9rUmt+XBZWcNgk2nwOs4Z3ZrlC7YkVto2DbxtOQc5
FAHo9FeU2Xxh+0+H9GlfTpF1m8kgL2awsRLC8pjZ4jnnBHAJ6/nUWr/FbUora9k0+2t0ls2u
3a2mtZZJvLhYKC6ggRKSTly3sFoA9borziLx/qcvj5NG8m3W2a9S38sW0jkxPAZUl88NsBO3
hNucZOeOPR6ACiiigAooooAKD04ooPSgDgbqa88SeJ9eil1280jR9FVIP9DlWN2laPzHlkYg
4VVK4HTqTXNeG/iBrDaJqWt6qxnj0nSYSlsAEN9NOxKSNheCVVAAM/eY4547XXPC/gnVvECt
q9rYS6tPGAInn2yTKORmMMN4G3uD09qj/sXw5rPiXUXjvbG7jSCGC+0tGRgkkLlonbBypXLL
tIweM/doAv8AhzXtR1W+1Wx1PT7e2m0+WNC1tcGaNt678ZKqdygrnjHPHt55o/xH8TR+DRfQ
2tnqKaVpkF3qMt7M0c0xlLkeWFUjgJ1PX65FenwTaFpvmXMN3Zwi/mad3E6gTOAFZuTzgKAc
elcVr/ww0DxA1q9vqMFrpkcMVmYYo0YlFbKqsucgnIHzbu2MUATL4t1S3bUrtLVdRkvNfOj6
fYmbykjWMFWYttYjlHY+wGKj03TdV8a6pa67dzWdjDZzT2sltbRMxkliaSITLN8pO0sxQMpA
3NxnkbumaNoMWvalOmo2l28d6dSW18xS1lMUMcjcHgNgnkDB3evFyDUfD9v4bnl0jV9NtbJG
lRLpZkaKKUlicktg4Yk4yKAMzwFr+s63oGmXN3FDNF5c0N3eFtrGWOQoCEAwQwGScjFM1Pxb
rNj4kvLdLGwfSba7s7NpHuHjn3zlBuUbSrAbxxkHg81e8P6DoHh/SdMMVxDKdPs/JS9eYcxy
NuZjzjDsuc/gKvQ2ug6jfX6RmyubkTxS3aRyh3jljI8suAcqRsGPpQBxC/GD7TYLc2uiO+yz
up7hvP8A3cM0SO4g3bcsxVNx4G0EdeQLdz8Qta05nstQ03So9RuIIbixMV3K8LJIzqA2It5c
FR8qKd27jGDje1LwFolz4YudGsbWKwV4bhIZI0LeS0ykO2MjOc9M9OOKZa/Dfwpb2DWg0lSr
PG7O0j790alUKtuyoAZsBSANx6UAc7Z/GTT/ADtM/tey/s62vLKa5e4aUssbRyugTBUH5vLO
M4OSBjNR/wDC4wtgJZtDeK9l09rq3sfPzJJIs0sbRn5eNoiLMT05GOK61fh/4US0a1TRLVYS
oXYAcbQ/mAdem/5sVa/4RDw/9pkuP7Lg86SGaB35yY5WZ5F6/wATOx/GgDnIPH9/c66ttHo8
Laf5tlA8/wBqYSRvcR78bdhDbcjPI6g9+Muy+Kt7K2tSXGmWpgttIfVLQ28khVwjFSrSMgDZ
OPmQFRyMntsS/CTwrLYzQCC5jnklaUXUdwwkRiSVI5x8oO0ccDirx+GfgsOrnQLX5G3DlsAZ
ztxnG3PO37vtQBz0PxL1Ow1RNO13TImlW8u7aeTS0lnCiKGKUMFxuI/e4PpipG+LNs2oPBBa
+ZbPqdraW96EcwSRSqpLl8bVYbj8pPpXSan4O8LapeiPUNOt5LmWSW6UGQq7sVRJGGCCRtEa
nt0zV+HwzolvE0UOmW0cbTpcFFTC+YgAQ46DAVQB7UAedy/F+/SHUGj0a1l8u0W8gljnkaFY
jMImLsYxuC53Ex7hwRniuw8C+J7vxTpFzc3cdqstveSW2623+XIFx8w3gEde45xRH8NvCEWQ
uiQlSuwqzMwKbg2wgn7oIHy9PauhtLC0sWuGtYEiNzKZ5iv8bkAFj78CgCzRRRQAUUUUAFFF
FABXDoMfHGT5Bz4dHOef+Pj/AD/np3FcSqgfHByB18OjPH/Tx6/5/wAADtqKKKAEYZHQH2Ir
A8MS28smti1tjAI9VmWXMpfzHwuWHHyg56c9K32BI4OD61z/AIYe0efXPsdvJEF1SUTF3B3y
7V3MMdF6cHuKAOhooooAKKKKACiiigBkoUxnfgpg7gRwRjv7VxOi23w60yW+1vRG0KA2pK3N
3BIh8nOeM5wgPPTr0rqtb07+2NA1HTBMYftlrLb+aBkpvUrux7ZzXAv4L8Sz6dpoltvD0dxo
4tBbJGGb7UYWJO9ygMakHIUBsMSc0AX7KHwH4d0JTNqOkGxuknghkunj+aFpGdoAe6KX+727
+2lrmpeFdWsLvw9e+ILG2W5j8p447uNJNhAOAD0BX9K5h/Dniax8Vabfw2Ol3V5cPqd1NHPJ
J9mtvNFuqosgjJ3YTP3Ru/edK0LD4e3tgNLMd5byNY6DNphMiMC8rkEHPZBz7gcd+ADp31Dw
5oZubx7nTLNpIo5riUSIm5PuRsx7r/CD7YHSs1NW8DHQRfR3OiLp0tzJh2RAvnsCH+UjO8qT
nuQTng1wGo/DXXtF0BJYJ4tT1KZLCCUGNnTzYrhSpK4x5Kx4XoDhcnrx0q+DvEkPiKHxVt0m
XVVvJpHsVnkSDy3hSIYkKE7x5YJOzncR2oA0xp3w5srb+wRBoUUV8Em+zAoDNuz5bDue+05+
lXHbwVo9tEsg0O1ggtpViLCMBId22RR6LuOCO5461w8fwk1mK6snXULLEa2YkcSSoIzFK0r7
YgNjrlgFDcADjFWbf4Z+ItKtNRXS9R0zztSuvtlw0kRVkdZWZVjfaxClW6kEowJXO7gA6fQ/
CPg+5vpPEmm2lldzTyrLDcbVkEBRQgEfHygbRx2P042LTwn4fsLt7uz0XTre6dmZpo7ZQxLA
g84755rP8B+HNQ8MaLdWmozwTzT3st0HhZ2/1h3EMzcsc55PWupoAyNQ8L6FqttbW1/o+n3N
vartt45bZWEIxjC/3RwvA9B7VNFoOkwCQRabZp5k/wBpYCBcGUdJDxyw459q0aKAMe18J+Hb
Ft1poGl258xZCYrONTuUkq3A6gnIPamXnhDw7qEqy3mh6ZO6u8gaW1RvmY5J6dSeT71t0UAZ
tp4f0awiSKz0qyt40m89VigVQsm3bvGBw2OM+nFaVFFABRRRQAUUUUAFB4FFFAHnVx4X1RPF
99crpGk31nf3sF0NTu2/fWSxqqlAuMkjYShBABbJ71xniHwP4hsvAa2Uun2oi0a0ltYntZDI
+o+bNGQWQKDGo27jlic+mM17xRQB5LN8Pp9UtdcYaBp2mQXN1Zvbae5jKRLE376QbAVUuOCB
yQoz14sTfDvVJvFF7dmS3TTE1e01HT7WJtgDIYlkd8L2SMhV6fOTXqOASDjkdKWgDwLQvBer
+KPA9jbJo1tonl2t2DqDuBLcmQsoR0Ayq5wWJz90Yro9U8HeJtVcamul2Gnz/arM/YLa6X7t
uky7w5jKgnzFAG04VB36etUhAIwRke9AHjumfDbxDpV7pupbrK5bS4IdmmtKVhnIknY7m243
p5isrlcbt2AvUang3wn4m0jxlHquqwWKwfZJrWQWsqqu5pPM3pGsa/KcAYYls5Jr0/FFABRR
RQAUUVma1rmnaHaC41KfykZtiIAWeViDhEUcux54GTQBpE4BNcjdeKp9avZdM8JRwXcsR2XG
pyjda2x7gEcyvjPyqcepFRPpms+Mtrayk2k6Ec/8StHxcXQP/Pd1PyL/ANM0OeeT2rrrW1t7
K2jtrWCOCCMbUiiQKqD0AHAFAGRoXhi00WaW7M097qsygXN/cnMkg5wo7IgPRVAAx681u0UU
AFFFFABRRRQAUUUUAFFFFABXELx8cJB0z4dBPv8A6RXb1xKqy/HByVIV/DvB7MRcc/lkUAdt
RRRQA1wCvJ+XvWF4ZFg0utNZi43DVJfPM23/AFu1QduP4cYxnnrW8xIHAJ+lYHhj7IG1o2k0
02dVm88yIF2SYUFV9VAxzQB0FFFFABRRRQAUUUUAGM0YoooAyNeMr2q2sJKtczRxFlMqMATk
ndGMrwDg8DPBPNaq554A57Vn31sLrVNOUh8QSPcZ2yAZC7QNykL/AB/dbOcHA+XI0QMZ5J57
0ADKGXDDIowCQccjpS0UAGMDAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAprHHGcEg4OKztb17TvD9mLjULkRbyVijALSTPjO1EHLN7Cuel07XvGI
/wCJv5+iaIT/AMg+CX/Srkf9NZEOI1PHyISTk5btQBPfeK5r28uNK8KW6ahew/JLdOSLO0fH
SRxyzDI+RQT6lat6F4Ui0y8bU9Rum1XWXG1r6dcFBz8kKciJOTwvXuTW1ZWFpp1nFZ2VtFb2
0S7Y4okCqg9ABVjGBgUAJgZzgZ9aWiigAooooAKKKKACiiigAooooAKKKKACuITI+OEo28Hw
8DnPX/SP8/56dvXDpkfHOT5MA+HAQ2Ov+kev+f8AAA7iiiigBGOBkjNc94WtrG2bWhYzPNv1
WZ5t0ezy5G2llHqBxz7+1dBJnYcA/hXP+FbSG0OtLBdR3Cvq08r+WpXymbBKHPUj1HHNAHRU
UUUAFFFFABRRRQAUhz2paiuZ47W2kuJXVIolLuzMFVQBkkk8Ae9AGVZQpc+I9Q1EwDdGqWaS
tCm4quWYK4JJXcw4IGGU1tVmaDB5elrK9u8E1zI9xKkixhw7knDGP5WIGBnnIAzWnQAUUUUA
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRSE4BOM/SsfXfE+meH
Yo/t0rNczA+RZwKZJ5yOyIOT9eg7kUAbBYBSa5C78V3Ws3T6b4Qt476VSVm1KUn7Hb9R1H+t
Yf3V49SKiOg6v4uBfxIX07Sifk0a2myZV/6eJF65/uKcepbt19vaw2kEdvbRJDBGMJHGoVVH
YAAYAoAxNE8JWmmXjapdTy6lrMgKvf3OCwXP3I1HEaf7K49810CjaMf0paKACiiigAooooAK
KKKACiiigAooooAKKKKACuK8SPr3/CwfCiWGpLb6Y5uDcweWx84qucNzg8dBxggnnt2tcnrr
Y+IHhL5W+7ejpx/q1oA6pPu/ie+a4pf+S4OPXw6D/wCTFdsOnf8AGuJQEfHCTjAPh0fj/pFA
Hb0UUUANfG3np3rnfCNnBbLrLwT288c2rXMu6Ek7WLYZGz/ECCD26V0Z7dfwrm/BWnzaZp2p
RTNC5k1a8mUwyBwFeZmAOOhGcEdqAOlooooAKKKKACiiigArJ8QSlbGK3jKia7mW3T98I2+b
ltpKsCQoY7cc47da1qx97XPicRpI4js4d0gWZhlpM7QybdrLhSQd2Qe3NAGuq7Rj3PelpFAC
4HQe1LQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFMllSFGkkYI
igszscBQBkknsKxtd8UWOizRWhS5u9SmUvDYWUfmTuo4LbeAFz/ExA96yU8Nan4kmS58XyRm
0Dbo9EtWLQL3HnOcGYjjjAQHsetACy+I9S8SyG28IqiWgYpNrVzGTEvbECf8tWBzycIMdTnF
auieF7HRZpbld91qE4/0nULpt883sT/Cvoowo7CtpUCKFUYCjAAAGB6U6gBAAOgpaKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigArIl8R6Hb3RtX1jTI7hZBEYjcoHDE42lc5zntWv
XiSxCP4o3cFgupi6tL15xENGhKiOeRS7u7yBniyvDKAV9wMUAe1oML/ga4hQ3/C8peBsPhxe
M/8ATwcnpXbp93qTyev1ri9jJ8bjIV+V/DuAQOSRcDP8xQB21FFFACEZHb8a5nwTp1zpum6j
HdW/lPLq17MvzA7keZirceoxXTEZxj1rmPANlcWHh+4jureSCR9SvJAjrtJVp3Kn6EYNAHUU
UUUAFFFFABRRRQAjEgcDNZOgtJcQT3smcT3EjRqfNG1AdqjZIAUOFyQABnJHWptd+0HR54rT
H2mZfKiLRyOgZuAW8shgvPJBGOuRVy3gjtbaK3hUrFEgRFJJwoGByeTxQBLRRRQAUUUUAFFF
FABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRSMdozgn6Vzeq+L4YLyTStItX1bWF4a2gcBYP
QzSdIx19WOOAaAN+6u4LK1kurmVIreJS8krsAqKBkkk9q5P+19a8XDb4eRtM0o9dXuof3koO
f+PeJu3T53AHPCnqH2Pg+bULpNT8XXMWq36HdDahCLO0bn/Vxn7zc/ffLemK64DGeSee9AGT
ofhnTPD1vNFYwsZLht9xcTOZJp25+Z3PLHk9enbFa9FFABRRRQAUUUUAFFFFABRRRQAUUUUA
FFFFABRRRQAUUUUAFFFFABXkGoafeXvxRjjuZbOae0lN7au2vTIYY2kClBGI+GO0ZUcHGM16
/XitzHdJ4/vHPhy2kvHvlNsjeH0O3bOh837Ts53xF23FgVK9jQB7SoAGAMDJriR/yXFjj/mX
P/biu2FcUo/4vdLgYz4dHPr/AKRQB21FFFACMQAMjjP5VzHgGK5h8OzrdRyo/wDaN6VEqkHY
bh9pGe2MY9q6gjIwa5j4e3FzdeC7Sa7nnnnaWfdJO5ZjiZwOTzwAB7UAdPRRRQAUUUUAFFFI
zBFLMcKBkk9qAMebytQ16C3kh8yOxQzs7xqyrI3CgNu3KwXccbcEMOa2ax/Dha5059QlUB76
RpxzG37snCDcgAYbQCCckA4zxWxjAwKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
qOeeO3gkmldUjjUs7udqqAMkkngD3oAkrK13xBpvh+xFxqN0IRIdkSBC8kr/AN1EHLH2ArD/
AOEl1TxFJ5HhK2U2hyJNZvUIgXt+5TgzHrzlVGByeg0NF8I6fpd0dQuDLqWrMTv1G+IeYeyc
YjTk/KuBQBnC18ReKAWne48PaS2cW8bD7bOvYu4JEI/2Vy3uOldHpOjadoWnJYaZZxWtqmcR
xr1J7k9SfUnk1eAA6ACloATABJxyetLRRQAUUUUAFFISB1OKWgAoo60UAFFFFABRRRQAUUUU
AFFFFABRRRQAUUhIAJPQUbvY9cdKAFooooAK8Wvb6xX4sMrwAoblIjEPFIUmfzR+88jzM8DH
7vp2xmvaa8gkuf7N8R3E2lTazFpn9s7bqe5023ls/OeXEgDcTBdx2hhkA4/AA9dT7vTHsDmu
KQn/AIXhINvB8Og5z1/0j0/z/h2w6f41xKjHxwc7evh0c/8AbxQB29FFFABjNcz8PL+81TwB
o19qFwbi7ng3yStjLEk9ce2K6RyqrudtqrySTgD61z3gK8udQ8A6HeXez7RNZo7lI1QEkdQq
gAfQCgDo6KKKACiiigAJwMmsrXHZ7WOyjkMUl6/kK6ytE6jBLlGVWwwVSRnAJHUVqN90/TvW
TAhutbnu2SVUtl8iLhlyx5kP3trrwgBK5UqwzzgAGsAB0FLRRQAUUUUAFFFFABRRRQAUUUUA
FFFFABRRRQAUZrH13xNpfh2OP7bOxuJsi3tYUMs0zY6Ii8np16DuRWMlh4j8UFZNUmm0LSmz
iwtZQbqUH/nrKPuDH8MZzzy3YAFvVfF8EN5Jpej2cmt6snDWtswCQnnmaU/LGMjpy3opqvD4
SudYljuvF92mpMh3Jp0SlLKJs/3DzKR2L59gK6DS9H0/RLFLLTLWK0tkORHEgAz6n1J7k8mr
1ACKoUYAwKWiigAooooAKKKKACsfxZqs2h+EdX1W2h82e0tJJkQjIyFJBI9B1PsDWxUF9Pa2
1hcTXzxpaJGzTNLjYExznPbFAHj17dW/h6x0PWdK1y81LX7lWvr3/T3eO6iSB3kMkYJRUBAC
4AwcAdKty+J/EOl6Faw6bfwObLw5/bOo3d7G07TSuCVQHcMZIfHoAB6V1Gl6h8PLO0u77SBo
sEA2x3LWkCKX352qwUZbPOBg5/CpdEXwlYaBHZ2t3b3NqtmxaS52sxtomK4kJGSsZJXB+7+d
AFOzvtXh8Ta5afb7e2Zk0+72XrF0haTessSHI4PlDb6Fjx2q54s1nW7fxL4d0TRLiytpNTF0
0k11AZdoiRWGFDL13etRRN4Pt/EN5HNfwXWo6xNBcFbnEgBA/wBHVcjao6lAeSSSM9tyz1PQ
tZvrd7Se2vLpIDcwyIodo4n+XcGx8obGOvOPbgA88j+JWtXOk3d+JdMtf7N0iHUJYpEZvtjM
zBgh3DaBs29D8zAZrUsfHOpSLd6zd32k22lpc3luthcgx3KeSGwS2SCx2ElcDAPBPftJfDWh
TS20k2jadI9oALZntYyYQDn5Dj5eeeO9Mm8K+Hbi5uLibQNLknuQRPK9nGWlBIJ3EjLcgdfS
gDzWP4jeKLWwWO5jtrq+uU04xGC0YeQbmOZ2BQuN5URAD5lyTjjtZ1H4ieIU0dBFHp9nqMNt
qNzcC4XeWS2wEwiyfIXLYwWbBUjnFej32g6TqdvcQXum2lxHcKqTCWFW8wLnbnjnbkkemeMV
kp8O/CCXctw3hzTJC6JGI5LVGSNVzgIpGFzuJOOvfoKAOdk8d6m+q3s8T2n2Ozv7S0FgsZa4
uFmVSXVs9csdoxg7GyR25zRvi/q9xpksmpGwtpJrJbi1ka3c5dpjHtREZvM4xjJj54OBlh6h
YeD/AA9pgs2tdIs1nsoxFbXDwq8sSjOAHbLY5PfvUM3h3who9hc+bo2i2dnOm24zbQxI6j5s
NwAQMZ5oA4iz8beKNc0mymsLzT7SY6y2kT+fab2JxkSFRJhWABymSCe4q3p/xE1afX5/tFtb
Jpkd9c2jKzRxmNYg/wA+9pdzElOV8sYBJzxzop4i8I28P2fw9okmpskolEekaYGVXUbQ+/Cx
gjoDuz6VvwaBo2phtQ1Hwzp8WoXMeLkT20UkmDwVZwCGGBjqRQB53ZfEzxHbWdpd6jFY3S3U
Wn3AhgTyXRbiSVSg3NtY7UBBJUc/XFq++LtzLPq7aRo91NBaaRJdAuiboZklkjJkG/BQFB9w
sev4ek3WiaXfQmG606znjKKgSa3R1CrkqMEdASSB2zRDoekwRPFFplkkbxGBkW3QAxZJ2YA+
7knjpyaAPNtW+L40vTdajntniv7e+ntbRyimJihBCthtwOM8kAZ71HDr8p+JYit47qYrrD2l
6WupPs8KtGwi2xk7TIwU5xkKE6AtkekHw3oZupbo6Pp/2mYESzfZY98gPUMcZOcDNTjSNPV2
dbK2DNP9pJEKZMuMeZ0+9j+LrQBdooooAK8bgsF1HxZc3EDaRb2A1dzLYT65OglkSXBkNtt2
Fiy7gM4JAzXsleH+KNTstO+J9nFaahp1wRdRSX0cltaeaA0wQRRsIi7OCCxBOQMd8YAPbx0/
GuHUOPjjKQAFPhwY56n7R1P6V3A6HB9etcNDKrfHW4jC4ZPDy5PrmegDuqKKKAKOtXYsNC1G
8IUi3tpJSGXcDtUnkdxxVbwrKZ/COjTNHDEZLGFzHAgSNcoDhVHQDsKb4uujY+C9du1iilMG
n3EojmXcj7Y2OGHcHHIrTs4I7azhghhWGKONVSJFCrGoGAoA4AHSgCaiiigAoopCcY4PJxxQ
BU1TUE0zT5rllV3Rf3cbSLH5jnhUDMQAWbAGT1NJpdl9gsEgYo0nLSyrEsZlc8s5VRjJPJx1
qrOz3viGK1WRlgs08+ZQWUs7ZVFOV2umA5OGyGVeK1gACSAAT1PrQAtFFFABRRRQAUUUUAFF
FFABRRRQAUUx5UjRnkYIigszMcAAdSTXIv4tvNcd7fwbaC/U5DapckpZxHn7pxumIx0Tjplh
QB02o6nZaTZS3eoXUVrbRjLyzPsUfjXMNquv+KY/+JHA2jafkj+0tQgzNIOeYYD24HzSY6/d
NXdN8HwRXyanrN1JrWqqcpcXSjZAf+mMX3Y+3Iyx7k10mACTjk9aAMXRvC2m6LLLcxRtPfzE
ma/uW824l9i5HCgAYUYUY4FbQAHQAYpaKACiiigAooooAKKKKACiiigArJ8UaXNrnhTVtKt3
jSa8tJIEaTO1SykAnHPetaigDz3VPAeoPfW+pafd2cN3Zx2Jt0kjJieS3E6sHAGQpWbAI5GK
zrj4WXt/dGW81OAR3MV42oQwqyJK8zh0QdCI1ZVJ5Bbb/tGvUiAeooIXBJA565oA8+0PwVru
hXyC3v8AS2sJ2tZr1pLctMrwxohWPttbZkE4KZOBzxa+HPge68CacdPN5b3NtKollIi2utx0
JB7oVA68gj0OB2N1eWtlAZbueK3hHV5WCKPxPFc43xA0i4+TRob/AFuQ5H/EttjIg9zI2Ixz
/tUAdVSE47ZrkjP461RsQ2el6HAc/Pcym7n9vkTag/77NKPBBvQx17X9Y1XcCGg+0fZoSPTZ
Dtz/AMCJoA0tU8X6Bo0nlXmqW4m5HkRnzZSR6Rplj0Pas3/hK9W1NCNC8K6g5yQtxqbLZwke
uDukP02fiK3NL0DSNEDjS9Ls7IPy32eBY931wOfxrQwBjjpQByqaP4u1AFtR8QW+ng9YdKtg
T06ebKGJ/BR/hLbeAvD0E/2m4sv7TvOMXWqSNdyKR0KmTIX/AIDjoK6bHOaKAGRJ5a7QAqjo
o6D2+lPoooAKKKKACiiigAooooAK8evP+E0TxnI8en6s8IvsQ7La1+zlPPXq+N4Qw5Jyc7wD
249hrzB/iJqo8Yto8sumWkK3skD77aaR4kV1WPewIVfNDZVjxkfgAD01cBevAz3rhotg+O9w
FRg58OoWJPB/0g4x+oruhyuMYHTFcNEzD46XCkcHw6hABH/PwRk9+1AHdUUUUAc/46vI7DwJ
rlzLbw3CJZyZgmzslyMbTgg85xwe9b6hQPlAA6cCue8cNbf8Incx3dol5DNLDEbd3ZRJulQY
yvOec8eldCvTv1PWgBaKKKACq1/dxWNjLdTH5IlLbQyqXPZRuIGSeBkjk1ZrGu91/rcFijHy
bb/SLtScE53CNcFCrqSHJwQVKr60AS6Fp5srB2mUC5upWuJzt25ZjxkbmAIG0HBxkHFalIBj
vmloAKKKKACiiigAooooAKKK53V/GFjpt6dNtY59T1ZgNthYqHkXPd2OFjX3cjv1oA6EsAcd
65a+8aRPeS6b4etZNb1KNtsiWxCwQHP/AC1mPyr0Pyjc3HSoW8P614khLeJ7xbe0bn+yNPci
M9eJZcB5PcLtU+9dPZ2Fpp1sltY28Vtbx/chgjVEX6AACgDmo/B0+sOk/i+9TVNpDpp0SGOy
iP8AudZfrISPQCurjhjhjjjjRUSMbUVQAFHTAAp9FABRRRQAUUUUAFFFFABRRRQAUUVT1HVt
P0i3NxqV7b2kA/5aTyBB+tAFykJA6nFco/j6yuWKaHpmq62/TdZ2xWIHnGZZCqY46gmkz461
NfmXSNEjY8Ab7yYDnrwqA9P71AHW5zWHqXjDQNKlaC51SA3IB/0eHM0vH/TNAW/Ss9vAtvqC
keINX1XWsgAx3Fx5MBIP/PKHYp/4EDW9p2i6ZpCGPTLC1soyclLaFYwT77QM0AYJ8Ua3qLbN
E8J3hXkG41WQWcYPY7cNIf8AvgfWnLonifUGZ9V8Ri1Q5xBpNuqY9vMk3MfqAtdVRQBy9p8P
vDMNy11c6XHqF2cbrjUXa6ckHOcyZx+AFdMEUAAKAB0Ap1FACAADA6UtFFABRRRQAUUUUAFF
FFABRRRQAUUUUAFFFFABXieoSo3xU8mx1DX2tnvV+2R6jcXMVmG8wDbAYyCxBPCsNmAeccj2
yvFJbjWl+JV7pceoqLy6ul2zLrqYWNZ1dR5BO4FYw6FAPm3k+pAB7UCMfj9a4SEAfHi5wmM+
HEy3PJ+0Gu7I+XCnHp7VwcEjt8erxC2UXw6mB6fvzQB3tFFFAHN+L5bNLPT4ryx+2pJqdqkc
YkZCrmTIcEdduM49jXRgYrmvFMlp/afhu1uLaSWWXUwbby2wI3SKRtzccgAHj6eldKoxnk9e
9AC0UUUAVdRvYtPsJrqYFljUkIpAZz2VckDcTgDkckVW0Szkt7ISz7vtNyxnn3jaQzdAV3MF
IXAO04yD61Fc7tS1uOz4NpaDzbhWUje5x5a4ZCGXBZsq2QyrWx0oAKKKKACiiigAopM4zxWX
rfiPSfDtss+qXiwB22xx4LSSt6IgyzH6CgDVrD1vxZpegukFzK817JnybG0jM1xL9I15x7nj
3FcpfeKrnUp5ILzWbTwnY4ChJJon1BwR/dyVg7YyGb/dNacE/hPwPdzWkNvcvqkkfnXEkVrN
d3M4OTukkCksSQTgnA9AKAJDp/ibxLKW1G5bQNMbOLSykDXcq9vMmAxH/ux5I/vmt/SNC0zQ
bUWulWUNpD1YRryx9WJ5Y8nknNVrzXpLaxtLq20HVr37QpPlQRRpJEOPvrI6Y+ntULa1qtzo
891aeG75LpJAi2l7NDCXHGW3KzgAfnQB0FFYmlXHiS4knOraZp1pHsHki3vWmbdk5DZjUAdO
Rn/CDT08ZPcQPqU+hxw7v30VrFK7Yx/C7Ec59V/+sAdFRXPXWmeJpbuU2/iK1trVm/doNODO
i9huL4J98U/VNB1K/wBSNzb+JtR0+DZt+zW8UBXOOuWQn9fyoA3qKwL7w1LqOnWdrN4g1iKS
3JL3FpMsDzk/39q4/ICnQ+Go4NJn0+TVNZnSeTzDM9/J5qHj5VkXDKvHb1NAG7SE/l3JrlZt
N8LeFoLmS+1OS2W6iaOVtQ1aZ/MU9eJJDz7jn3rnNPTwpb30N34V8Ialqd5AW8q6SN44wTwc
yzsAR9N2Ow60AekfaYlzvkjXHGC4znn/AAqO51KxsiRd3ltb/wDXWUJ6+v0P5Vwb+CtS1u4a
8vdD8J6RNI/mM6ael7c5PO4yMqru/BvWtH/hV/h+71M6prqz67qBVV87UGBAAzwEQKmOT1Bo
Au6t8RfCOiIxv9fsVdRkxxSea30AXJzWQfiHcappUupaNp9nBpafK+pavfxwwg+m2Pex6jht
vWuwttE0qzgEFrpllBCDkRxW6KoPrgCrKWltHE0SW8SxucsgQAE+4oA4CxuD4mF283xBjlgt
1MlzBoeyIRLz96T5pB06gg8VL4fj+HjaxHHpa217qUwJW5uFkuZXI6/vZAcd84Nd3FbW8G7y
oI4933tiAZ+tSYAxx0oA52fxz4etLuWzmvnW4icxtGLWU4YcEZCYqxqvirTdHuja3K3zzhPM
8u3sZpsrz0KKRng8ZzW3XPeLdfudEs7WPTrVbvVL+4FtZ27ybFZiCSzHGQqqCTj0oAsXniex
stPtb5rfUZYLoZj8jT5pHHGfmQLuX8QKa/ii1GiPqq2GrPEj7DCNPlExPqI2UHHv0rnJvGWt
aRrU+iapbWU987Wf2KS2DrHIJ5GjYODkrt2OeM5A7VIvxJsLVJ/tVlfO8VzeKY7OEzGOCCQo
0z9Nq5H9O1AG7pviiLU1uWTSdZg8iIy/6TYPF5g9Ez95vbrzUOm+K5dRvLeBvDWvWaSjJnur
dEROM/NhyR6dOtZo+Imnm51W7b5dF020tpnuQjGSSSfLKirjpt2575apf+E9tLmbT5LKCU27
6kNMvVuoXgmtpGQsnysBkE7Qf94ehoAuzeKrqHU5LNfCmvyqkvl/aUjg8phn7wJlB29+Rn2q
bVvEV1pl35EXhvWb9doIntEhKZPGPnlU8fSquh+JzfObS7spVu0v7ixk8iItEhj+YMW7KybS
M9zjsam8T+MtO8KLD9ut72ZpYppglrB5hWOIAu7c4CgMvJ9aAJr3WtUhsraay8NX13NMCZLf
z4I2g9NxZ8En/ZLd6ZFrGtvo01zL4bkiv0kKpZNeRHzF/vbwcAdevPHSqJ+Iegx+IZNHk+0x
vC7RPctDiFXWPzCpbqMIM9Me9MtviPo06q01tqVosscc1sbi1I+0xvII1dME8bmTg4IDqSAD
QBp6Xquu3Us66j4d/s+NE3Rv9tSXzG9MKOPqag03VvE91fxxX3hu1srYgeZN/aYlI68KoTno
OuKbH488Nz6rLpkd+HuYnnjcCNioMKq0g3YxwGH459KSLx7oE3l4uXUyz28EYdMM7TorxkL1
wQ4yccc+hoAllu/FpuZRb6LoywrIQJZtTkDOmeG2rAcHHYn8ak1abxMk7jR7PR5bYINpvLmW
NtwPzZCxsMenNCeKtJuNEsdWinc2d/gW7+WctlWPIPIGEPWsfwx45XWNWj065Nost1ZC/s1t
mdmNuWO0yhlAjYqV+UFujHOMUAbV8PEbabbCxGkrdYP2kXHmNGD22YwcZ9a07IXAtYhdrCLj
YPMMIITd32g84+tc/ceOdKttcl0qW11AeTcRWj3QtS0CyybdqFx0zuXrxyKrQfErRJbZ7qSC
/t7QwvcW080GFu40YKzRYJJA3KcEA4OQCM0AdjRXLXfxA0O3vbixtzc399BdpZNbWkW5jM6s
wUEkLwEbJzgY5qEfEjQjew2Gy/F/MkTRWbWxWZ97spG085XYxbPAHOTQB19FFFABRRRQAhAP
UZrw3UnI1G/0Cz1mx2T60bvc+hzHy5DOCN0wIUoJfkLjkHjpyPc64+4+GXhy51eTUnW/Esk3
nPEt9KImbzBIQU3YxvAbHTIFAHUWa3S2US3kkcl1sAlaJSqFu+BkkD8TXEW4A+Pl6c5J8Ox8
Dt+/Nd8R8pAOD61wUAA+Pl3jknw4meen780Ad9RRRQBzurT2jeL/AA5ZzRT/AGwm5uYXjK7F
CRhG3555EoxgV0WK5y5+wXXxE0+NvtH2+x02aZcIPKMcropyeobMfA7jPpXR0ABOBk1n6xqI
06yDKC9xM4it4lKBpJCDgLvZQTgE4JHCmtAjIwa5Ky1/T9T13Umtr4XkunxyhLC2Y+blWAcv
G4A3bl2oc4IJwcGgDd0fTF0mwW3BRpGYyzyKpUSSscu+3J25JJwOBV8EHpXO6ZqHinUdRjlu
NGttM0sE7kubnzLpvQ7UBRR0/iJoi8JrLqYv9S1jVr5o5fMgge48mGLDZHyRBQ2Onz7uKALO
qeLvDuiuY9S1uxtpB/yzknUN+XWk1bxINNlt44NI1XUmmj8xTY2wdQvuzFVB9ic1fXStOjvJ
b1bC1W5kxvnEKh2x0y2MnFOvr2002zkub+5it7ZMl5ZnCqg9yaAMu6vfEN3o1vcaTptta3cp
Jlg1aYqYl5wf3W4E9OMjj0NVJbvUNJ0G7k8TeJLCzkkYiG6tYBH5Q9FWQuHbg9j9Kgk1/VvE
WIvC9n5NmSVfVr+IqgGMfuYjhpOe52rx/F2vaZ4PsLS+/tO/abVdW6fbr8q7oB2jUALGOScI
B15zQBy+l23inVbya403UdWgsZY9jXmt7A75P3oLZFUIeOGfHXhTXQaF8PPDmgyQXEdiLu+h
5W/vXM05b13N93/gOK6krnHJyO9LQBWj06xhlkljs7dJJG3u6xgFm9SccmrOKKKAEwASccnr
QQD1FLVa+1Gy0y3M99dwWsQBO+aRUHHuTQBZxzmiuTfx3ZXJMeiWGpa1LnaDZWpEQPvNJtjx
7hjTAPHWqcyPpehQNnCxhry4HpyQqA/99D+gB15OBk1zd9498NWMkkP9qR3N0mR9msla4lz6
bIwT19arDwBYXkom1/UNS1yQHcq3lwVhU89IY9sf5g9K6Gw0qw0uEQ6fZ29pEONlvCsa/koF
AHOf8JB4o1QMNG8LNaxkfLc61cCDB9okDuR9dtObw34i1RGTWfFdzDGc/utHhW2Ht+8O5/yI
rrMdPX1paAOe0jwR4b0SQy2Wj2wnPW4mBmmPrmRyW/Wug2jjjp09qWigAxzmiiigAooooAKK
KKACsDxT4bPiCGykt72Sw1Cwn+0Wl1HGr7H2lSCrcEEHp9K36KAPP7/wJfRQRanBdjVPEEeo
W149xd4iWRYty+WqqNqAJI+OOpyT6ZfifwDrNq80/hbc9zfRX0V3K08cZKzyGRVKshBVWY8g
hvz49UooA820/wCHFzDcNY3M6DTCNOuWMX/LSe2XYyMD/A2yM+2OlaOpeDLh7qxgtgk9tNrp
1i/nmYBl2jKIqjr0Rc9gvvXcUUAcj4c8PavaPLfXd6bWa61K4vbm0i2ujow2RxliMjCqjZHf
PaqniDwLqXiTXr+7uNcNrZSWD6fbQQwI5SORf3pO4cEkKMrzgdfTuaKAPOrD4WRNqCalrF+t
3dysZrtYreNBLIYTCwD7d4jKknaCBk5+jbj4SQ3ukmwvfEOoTiG3S0sZSiK1rCsiuFG0Dc3y
INx7KK9HooA4mb4X+HZ9M1KweziMN1k24aME2jeSsW5D1yQoY5PJplv8MNLh8mV5Vku4bmzu
EuTbRh1+zoiKoOMhTsyR7nGK7migDzHSfg3aaXdWlwusTZswBEsFvHCHwWO6XAPmN8w+Y9MV
ueGPh1p3hT+zDYyszWUFxE7uozcNKY8s3pjylAHpXZUUAczP4Pt7mXUJJLiZTeajb35CkDa0
OzaMjsfLGe/NYcvwrtptLbTJdYvJLSG1ltdPV40Js0kZS2GABcjYFBPQfnXoVFAHCH4Z2tvM
k+k6lcWFxA8MlvNsWUo0aSKxbd9/f5hLZPJAoPwzgOqrrba1qEmtxRosV+xBZWVnZvl+6Vbf
tKdAoAGO3d0UAIBgYxiloooAKKKKACiiigArz+2z/wAL+veOP+Edj/8AR9egVwNqB/wvu/O4
ZHh6MbfX9+ef8+tAHfUUUHpQBzemG1fx5r8sdyz3KWlnDNCYyBCB5zqQx4YNvPA6Y9xWlq2q
tp1lPLBZ3F9PHtAtrTa0rFjgcEgAe5PABNc7Z7n1LxT/AGRrNjLqt5ODEkilhbiJEibeo5OG
z7HjnrWha6dY+ELKWWCOe+1K9lzI8kqfaL+UAnG5iq5ChiFBAAGABQBjTWuv64l3o2uXNlbi
/VJHtNOnIks7cE53OQDJvI2HAUDnHqOw07SNO0i1+zabYW1nD/cgiCL+IHWmaVp32KGR5ykl
5O2+4lQMFdumQrM20YA4Bx371ekdY0LsQFUZJJwAPU+1ADsYGBUc88dtA800iRRoCWeRgqqP
Uk9BXMz+L31C4Nn4WsTq0ykiS7LGOzh/3pcHef8AZjDHjnFLF4P/ALRlFz4ovW1iUEFLVl2W
cRGcFYckMefvOWPpigCFvFl3rcslt4SsUvOCH1O53R2aHkYVsbpTx0UY/wBoVPYeDoGu49R1
y6k1rUYs+U9yoEMB7+VCPlXt8xy3H3q6ZEVFAUABRgYGMD0p1ACBQP8AE0tRSzxwRtJKyxxK
Ms7kKFHcknpXOTeP9A814dOmn1i4XrFpUDXOOccso2rz6sP0NAHUUVyzXXjHUpW+zaXYaTb8
gPqE/nzfXy4vk/DzDTW8GT6jIH8QeIdS1BNpBtYZPsluc+qx4Zu33mNAGjqvizQ9FcpqGp28
cuP9QhMkpPtGoLH8B2rN/wCEp1fU1zonhe9Me4j7Vqjizixz8wX5pCPbYOvatnT/AA/pOkBv
7L0yzsmJyTBAqbj6kgZNadAHJLoPifUpGOreJfskT53W2jwrH9MyuGf8Rt/CrVn4D8N2dybt
tMS8vDjN1qDtdS5xjIaQsR+GK6OigBAqgYAwMY4paKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAEJwC
f5158xmT453jW0UbTf8ACPw/619qlftJ3HOCeBnA7kD6j0IjIwa4S0/5LjqZ8rJGgwjzP7v7
5uPx/wDZaAOpgfVvMCy2dosZA3MlyxIO9s4+ToEwe3Jx05qEXesRqst5Z2EMKYaaQXbHYvz7
yMoM4AQ84zk9MVsVzHjaVLrRn0Zb+K2e/RhN1aT7KMCcxqoJZtrY6cbs8YoAx/B+np4bs7/W
bs6Y/wDbl/8Aa5b2O6JRo5Hby1UlBkAFcdMl26Y52NNj165kOo32nW0E74EVubxj5Eewnayj
KGQScblHKnrxtrKOuwS6mtrpWny6te2RMUFnZSbLSzT7uZZQRGchQQuGZegHer7eHL3WEZ/F
mpiS1UZbTrJmgtQP9tuHkHsSF45WgCCXxldXlwdP8PaVBrN0rbZ5ILvbb23AB3ylMEh8jYu5
tq5wM4qK68Ma7q3my+IpLXVU+d4dNjne3tEI27VcBS0uecl8gY4Xk4vt4u8M6bELHSpPtTxf
LHZaPbGfBA+7iMbV/wCBEDjrxR/aXjDUXIstCtdLh/57apcCR+emI4SR+bjrQBqZ1KBGhtdO
s0hjVxEq3G3ow2DATCgjcfYgDnJIqat4mttDXOqXOmWuSQqy3mHb5uMLtySUy2B3GO+RW/4R
TUL5h/bPibUZ05P2axxZw4PUEx/vD+L1p6X4X0LRvm0/SbO3lzkyLGC5Pu5+Y9e5oAwoPGOp
6hI0Wj+FNQvYQOLm4P2SEncR/wAtVV+AAflQ8nHbNPls/HepyoJ7/TNItiQGGngzzYJOTvlX
aOAv8Bzk8jHPY9KMYGBQBwlr4JWe6S41nTE1SYMreZqepPc7c7i2IygjXBCYwozuPTFbumz6
q8QT+xLOxVGCNEbjoAGDFdqYK7gu3plTkhSMVvUdKAMkyaybX/kG2JkKDK/a2wG2Zx/q+m/5
R7fN/s06WXWhbu0dhZtOoYIrXbBW+TIJPl8Zfj6YPsNSigDKnm1wLOIbGzbAl8rddMCxyuzP
yfLkF84zjavXJw6WXWsN5dlZNgPtDXTDJ3gJn5DwUJJ9CAOc5GnRQBmpJqxlZHtLVYucMty2
f9YR02f888N/vfL05pol1pnQGzs1XcoL/aWJC7m3HGzk7QhA7kkcYzWpRQBlwTa20v7+xskX
cgyl0zcfNv8A4B0+XHrk9KjWXXSq77CxB2JkC5YgEoxYfc5AcKB6gk8dK2KKAMp5taETKdPs
nYqcYumwG8vPOUHG/wCX6fN7Ujza7sdk0+xLqr7AbxuT5YKj/V8AvkH0AB5zga1FAGTNNroj
n8ixsWYGTyd92w3cDZnCcZO4H0AHXJw55dbHmeXZWR+Z9m66YbgHUIT+74ypYnrgqBzkkalF
AGbu1Uu6mzs/L42k3DZI8wj+5/c5+vHTmmRS64zx+dZWSjKbityx2/M2/Hyc/KFI9SSOMZrV
ooAy4JdcLR/aLOxUExh/LuWOAQd5GUGcHbj1yc4pFk1xgxexsEbAxtumbnYc/wDLMfx7R7jn
jGK1aKAMmZ9bW2cRWNg74O1Wu3wT5ZIGdnTzML/u89eKdPJrSiXyLOychXMe65YbmCDYD8nA
LbgT2ABGc4GpRQBkzya15cvlWFi7ES7d1yw3EY8vPyHGctn0wOueJHfV9jlLWzL73CZuGGV3
AKT8nddxI55CjPORpUUAZbyawJGVbGyMHy4L3TZx5hDfwf3MMPfj3pkdxrhcCSwshgp8y3Tn
jzGD/wDLPqECkDuxI4AzWuRkYNeL6nfaLqtl4w1fxDfzjU7K8ns9PtIrx4pbcINsXlopB3O3
zZwc5HYGgD1WKTWGaMyWdkgZk8zZcsxAy2/+AZx8mPXJ6Y5ZbSa0UiMtjYIxK+YEuWIX5Duw
fLGcPgD1HPHSuH0hdYv/AAr4turq/uI9fCfZnkt3VHjeG3XAHGxcuznK/wB/g8DD9KuJI9N+
Gd9HdyefPCtpKjOT50b2xds56lWjUg9sn1NAHaeZrv2R91jYNNk7U+1OQf3eeuzj958v+7z1
4oeXXhbTNHY2JnAYxKbpgCdg27j5fdtwPtg98DOvtdl0f4dXWtyanaX09tYPKl0gCxXEgU7c
AHoWwMA1xNv4411SLC88QaeJDe2VvNfJFGVtxNbu7DAJU/vE2AnjmgD0q7l1pUmFtYWU3Enl
iS6ZdxG3Zn5DjOWz1xgYznhry67+82WNh/y027rpsNhwEz+74ymSfQgDkHNeaxePtau7uW0m
12w0uGytbq4TUZrYPHqQjmZAVAPACqMheSSccVqSax40fU/EkNjqFrcNpdvb3tvbNYlWnWXe
5iJJBBATaDjPIzg5oA7pJNX34ayswm8jK3Lfd8wgH7nXZhsf3uM45pol1osN1nZDDoMi5b7m
9g5+512BCB3JI4xk8NbeMdb8QatbnSr2C10u8gvLq0ke03vJHD5SKSCRjLM5+gFUn+I2sy6x
4c08S2trb6ppFpeXN40DFbeSRiGHp8xGwZwAT1oA9Gjk1ky/PY2SoWTJW6YnBLb/AODqBsI9
ckcYqOOTXkQbrDTwxCk7bpiASrFsfuxwGCAeoJPGMVgeNvGVz4U8Q+H0Me7SbhLmTUZFiLvD
HGIwJBjJwDJzweK43VPiV4mt9Ee4JjstRie9mazeGMkRRmPYrs8igEB8MF3OSRgcGgD1IS68
IFP2GxD7clRdNwfLzj7nP7zK/wC7z14DriXXF3GCyspDh9u66Zf4AVH3O7ZB9AAec8cND431
G71y/nGq2lrBbXMMUGjSW++a6jeIOrK4OcuScEAgbTmslfiVqOneH7HWbvX9Pvlu1t57m2gt
CXsUMyrKPlOOAxUBsMWU4zg4APU5H1VY7jyLOy3DeIQ9yw3/AHdhYhDtz8+cZxhfU40e9eJa
n8SvFyZRoYNOuRd3yeQfJJVY4IZIkdpHVcgy/Ng544BxXRaX421y912w0eQQ/adRa2v7eRIG
CGweItL15DK67eef3innBwAel0UUUAFFFFABRRRQAUUUUABOBk1w1oH/AOF26oV6f2DB9M+c
+P613BGRiuI8VfDS08U60+ptrWq6fLJai1lWylCCRAxYBuOeT09qAE1/4q+HNGvxpkN5De6o
zFBBHKqxxEA5Mkp+VQMc4y3+ya5CPRZ9f1W41e/0/U/El7Ky7YIozY6fCFDBUDy7XdQHb7oI
bOSD21tG+DX/AAj8Esel+LNStWdy4eOCHP4kqSe3cD2rZPgTW2Vd/wAQdfJA2sVEK5HP+x15
6/8A1sAFm30rxZLAkCXWk+HrRAQkGmW3nuo7AM6hBxjolTr8P9Fnm8/Vzea5Pudg2qTmZF3d
dsXES9BjCDGKpf8ACB6sQwPj7xHzno0I6/8AAKRvAerEEf8ACfeIxnP8UPf/AIBQB2Nta21l
AIbaCKCJRwkaBVA+g4qXIxnPFcWvgfWEO5PH3iDcCSNwgYfiDHzQ3gbV2QoPH3iEKRj/AJYZ
4zjny89/xoA7WjNcW/gjWH/5n3xAOCpwIBx+EfB96jfwFqzDA8f+Ixyf4ou+f9j6UAdwTgZN
FcgPCOu7Sv8AwnutYbOf3Ftnv0Pl8dai/wCEN8QncT8QNYyxJ4t7cYyOf4Py9KAO0JwMmiuJ
bwT4gNv5X/CwdbHy43eTBnOeudmf1/Gnnwd4ikn8yX4gaucAgCO2t0H4gJg/lQB2ZOBk0mRj
OeK4uTwZ4iaRnX4g6wu4ncDb25GO2BsAH4UP4J1sxmJPH+vCMjukBbOc/e2Zx7UAdqTgZNFc
W3gfV2Lf8V74hAYHOPI7+n7vikPgfWWR428feINhbcuBAGBwf4vLzjnpxQB2tFcS3gPVipA8
feIxnP8AFD3/AOAUHwLq7Ag+PvEWMEDBhBGffZz/AEoA7YnAyaK4lvAerFSB4+8RjOf4oe//
AACg+BNVII/4T3xHzn+KHv8A9s6AO2oriW8B6sVIHj7xGM5/ih7/APAKD4E1Ugj/AIT3xHzn
+KHv/wBs6AO2JwMmiuJbwHqxUgePvEYzn+KHv/wCg+BNVII/4T3xHzn+KHv/ANs6AO2oriW8
B6sVIHj7xGM5/ih7/wDAKD4E1Ugj/hPfEfOf4oe//bOgDticDJorjP8AhBNQKAN478TZySxE
sIyD6fu+KYfAWqFX/wCK98Sbm6HzIuOv+x70AdsTgZNFcW/gTU23hfHniRQc4y8Jxn/tnQPA
molcP478SklskrJCOO4/1f8A+qgDtCcDJozXGN4F1FhIP+E78Sjdu2/vIeM9P+Wf+H4Up8Da
j5eB468S78k7jJARj6eVQB2VUG0XS5L77e2nWjXmR/pBgQycHj5sZrmD4D1Ugg+PvEmDno8I
/wDadK/gTVGL7fHviQAk4G+HgH38v6UAdLaaNaWOpajfQBxJqBRp0LfIWVdu4L2JGAT32imT
aDY3GtWGqyI32jT4pIrYA4SMPgMQvrhQPpXOnwJqhjYf8J74k3HODvh4z/2zpD4E1Ugj/hPf
EfOf4oe//bOgDptQ0LS9UsY7K9sYZbWKRZEhK4QMpyvA4IB7Hioh4a0VbqS5XS7QSywi3kIi
XDxht20rjBGeelc83gPVipA8feIxnP8AFD3/AOAUHwJqpBH/AAnviPnP8UPf/tnQB1M+kaZc
Rwx3Gn2kscHMSyQqwj/3cjjp2p19p8V7a3UO+S3e5j8t57dtkoGCOG6gjJwe2eK5RvAerFSB
4+8RjOf4oe//AACg+BNVII/4T3xHzn+KHv8A9s6AOp0/SLHSrG0s7O3WOG0hEEIPzFUAA25P
PYZ9cVKbG2KhfIiwEEYHlr90cgdOg9K5F/AmqkEL4+8RgHPVoe//AGzpT4E1Qgj/AIT3xJg5
/jh7/wDbOgDsJIIJGDyxI5ClcsoOASMj6cD8vaoZtMsbmRHuLO3maNy6GSJWKscZI468CuWf
wJqbE7fHniRVJPHmQk4Pv5f+fah/AmpNGVHjvxKGJPzeZD05/wCmf0/KgDqF0nTVuo7kWNqL
iJdqSiJd6L0ADYyBjimxaNpsPmeXYWqGV1eUrAgMjDkFsDkjPWuXbwHqpQgePvEYJzzvh7/8
ApX8Camc7fHviUAjvJD1/wC/dAHVTaZYTqRcWdvKu4uRJErDJxzyPYVWh0Czg1+TWg07XbW4
tkDSEpFGCCVROgyQpP0HSueHgTUyCG8eeJDkN0khHJ6f8s/8+1ddZ27WtnBA9xLcPHGEaaXG
+TA+82ABn6CgCfGBgUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
FFABRRRQAUUUUAFFFFABRRRQB5L8VbPxDda1D/ZUWqmMaZL5D2SzkC58wbeYnUKcd3yvt6Vb
a38TWvju71PULbWvOh1CWZTawSSpJY7CVi3b/KYcgBQu/d0xzXse1cYwMfSggEEEA560AeKQ
aN410nSoLqK01e61J7O0uLiE3vyzXH2ss6MSeD5e0HGAFz+GqNE8ex6ZrNzFqssmpQSXoCyK
wS6EsMRXyMP8ux0ITPqa9XxzmjHOaAPJPsPjn+2I0ZL6LT7XVrGeRzPve6UpGsq5zxGm12P9
4t7VUs7Hx5ZeGbFdQgub7/iVTRvawvJDKJDPF/rHVyXbbuI27SVDAHnj2UKoBAUAHrgdaXHO
aAOA8BjWdN8Pa4l7p94XguZZrKGWIp5kZG5FQMzMBkHhmyM/gKngXw3quj6xp1xqA1HzJNG3
alPc3TSLNdPICE2kkZRQ/IwMN35r0g8FAOBn+hpcD0oAyNbttenEA0S9sLVV3eaLy2abd024
2uuMc9c546YrE1Oy+IB0y6FnrWircGFlhC2Dgh8HB3GQgH3IIHoeldnRQBl+H4dYt9Gt49eu
bW51ILiaa1jKIx9cHv6ngegHStSjGBgUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAB
RRRQAUUUUAFFFFABRRRQB//Z</binary>
 <binary id="i_015.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQY
GBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYa
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAAR
CAA+AO4DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3maJ/EmvX1pLJImj6eywvFGxX7RKVDEMR
ztUMvHck56Val8H6dHGraXH/AGbdR8xz2x2lT7jowPcEHNVJL1fC+uXst6GTSdRdZvtAUlIJ
toVlfH3QwUEN0zkE1o3fivSoYx9nu4r2dx+7gtWErufYL0+pwBQBc8O3sl/pcU1wipcBnilV
Puh0Yq2PbKmtOsrw1Yy2GlRx3RU3Lu80u3oHdi5A9gWx+FatABRRRQAUUUUAFFFFABRRRQAU
UU1m2gk4A9TQA6is99a0xJNjajZh842mdc59OtXlcMAQQQe46UAOooooAKKKKACiiigAoooo
AKKKKACsTW9UnhuoNO0uBLjUZ1LjexWOJARl3I5xk4A7n6Ejbrl9PP2Tx7qkd02HvreGS2J6
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</binary>
 <binary id="i_016.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQY
GBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYa
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAAR
CACQAJYDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD6oopM0tABRSE4FJvHbtQA6ikDA9KAc0AL
RRRQAUUUUAFFFFABRRRQAUUm4UbsDJ4oAWikzzg9aWgAooooAq2crzwxynegOfldQD+lWV6U
Y5pGxjmgCtq99Bpel3d/dsVt7aJppCOoVRk/oK+YPEH7Ubw6wyaNo6y2COQHlfazj14B/nXt
/wAbLW7vPhdr0GmxzSztAcJFksR36e2a/O+SJ4XKyhkkVtpDcFT6EUAfon8MPH+neP8AQBf6
YrxyRkCaFjypx9frXbjk18rfsX6beQHX76a3litJhDHHKykIxXfke55H519UKMfSgB1FFFAB
RRRQAUUUUABpCQASTxSnpUF0pNtKAMnado98UAfPnxM/aKtvDviKbRtDsDdzWsxhnkmIVQQc
MBjOeldT8HvjTp3xCnbT5IXsdVRS5jbBSQA/wnr+navi/wAb2lzp/jLVYb2No51unyHU8nce
a7L9nPS729+K2lTWUE0sVuzvNJEDhFKMOT25IFAH34OpPc8EU+mZ49e1PoAKKKKACiiigBsi
7kK4BB4IPQ1wupfCXwTqWqPqN3oMEl5Icu3mOoY/QNj9K7yigDO0jSbTSLGOy022jtrWMDbG
nQf41oAYz70vNFABRRRQAUUUUAFFFFABSEcHmlooA47xR8O/C3ie583W9Hhubgc79zIT9dpF
aHhnwnovheN00DTobRX4YqSSfxJPpW+evv60tACbeB7c06iigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAX
FIaWg0AJRSN901WkuIYHSOSZVZugZuSaALVAqJMgfNy3oeOfapExkkE880AOxRiiigAxRiii
gAxRiiigAxRiikPAoAWioJZooRumkVR7mnpIsi7kIZfUGgCTFGKBRQAYooooAKRs9utLTWGf
UUAcX8X/ABVc+Dfh7qmtWsKzXEQVEUgkAuwUHg9s5r4C1vxTrGsanLqN5fzG5eQt8rEBfYD0
r9E/HHh+HxP4T1PR5iALqFkVm5Cvj5T+Bwa+Fdc+EHjHTNWnsE0ae7SOTbHNEuVcdc/SgD6N
/ZT8fX3izQb7S9WPmXGmeXslPVkYMAPqNn6172hPf8xXiX7NXwzv/AujXt3rXlLqGoCNvLjJ
JjVQ2A2QPm+Y5/nXtqfTANADqKKKACiiigAooooARuBx1qC7uDDbTShdxjQtj1wM1O3SoZ4w
8DowypBHIyeaAPzy+J3xH1vxt4guLm7uJLa3VysVvHldi54HHevTP2WfiPq8fjO38NahcNc2
N8H2eZyYmVC2c/8AAcfjXOfFX4M+JtG8WXT6Vp8t/YXUrSxSWy8IpPCkdjj0ruP2bvhDq+n+
J4PEviGH7FHahhBbsT5jOQVJI6Ywx7mgD6wDHHb/ABp9M28g+3HtT6ACiiigApDS0hoATHFI
QCckc+uKdQBigBAopRRQKAFooooAKKKKACiiigANBGRRRQAzA6fzFG0E4x0p2BRgUAFLRRQA
UUUUAf/Z</binary>
 <binary id="i_017.jpg" content-type="image/jpeg">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
RQAu0elG0elFFAAABRRRQB//2Q==</binary>
 <binary id="i_018.jpg" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQY
GBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYa
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAAR
CADVANIDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD6oo4pCM1zGs+NtD0TxFY6Lqd4lte3is0X
mfKpwVH3ug+8O9AHUUVEsgPIU9cGpAcjPagBaKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooARs9q8U8e+HNM8UfGzTNP1mB5bY6VcOdrFSGDQAEEEEdT
yK9sryrVef2hNIBGMaRc4IHX54KAF8P+ItS8Ja7D4Z8aXLT/AGhs6fqSqNki9Nj9MMMehHzD
n09QVw2WU5wPwNZXijQbHxHotzp2owJJHMhUOygmNuzrnoVOCD6ivPPDWu6t4Av18P8AjK4a
70Yny9O1psgHuIpckgEDcAd38PTmgD1yioI3VyGViQRx6GplOaAFooooAKKKKACiiigAoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACvKdTyP2htJIA/5BFz/wChwV6tXlWpr/xk
JpBz10i5/wDQ4KAPVCBVLV9Ls9WsJrPUIFmt5RhlP8x6VdBB6Up5oA8p0C+vvh5rMWga5I9x
4euX26dqDDJiOcCKUjp1XDEAdcmvUY2LKGTG3H1qnrWl2msafPY6lAk1pKu1lb37+31FefaH
fah8PtSGj+IbiW58Oytiw1GRy5iJ/wCWchPPXODk9QKAPUN2cFRkGnVBC6ygOj5BHbvnoany
KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBDXll6yN+0Hpqz5G3
Sbjyj6nfBmvUn+7xXl9+Fb9oDSSwYldJuMccD54KAPURS01Rj1p1ACEZBBqjrOnWuqaZNY38
Cz2sy7XVhn6H88VfooA8XstR1L4X+IF0rX5Z7rwhdHFlqDZxZnIwjnkAAEgE44WvYFl8wLsA
ZW5BzkEe1R6tplnq+nzWOpW6XFrKu1436Ef0ry/Sb2/+Gmrx6PqzyXPhS5fNlqL/ADm2J48q
TvjhcHB+8cnHQA9bXpx0parW8yTJHJAwaOT5gwOQwPcVYHXrQAtFFFABRRRQAUUUUAFFFFAB
RRRQAUUUUAFFFFABRRRQAUUUUAIeleWvqET/ALQ0NptcyR6RLzjjloTXqRrxgEp+1A3A+fSH
HI94aAPZ8c0tNUYwOPyp1ABRRRQAVn6rpltqmm3NjqMMc9pOhR43UEYPbH9a0KQ8gg0AeOw3
F98K9SWDVrua98IXMnl207Es9kx5CNk/c4IBz6DFeuxyK+05znp7+4qK/s7e8s5Le5iV4ZBt
ZWGcivKg178LNSWAxz3fg2VlEcv3msecHcR0jAx1HAU80Aevg8UtV7O6ivLaO5tpFlhkXcjK
c5qcdBQAtFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAV47dWrQ/tK29zJxHNpMpU
5/umAf1r2AOCM8Y+tecahpCRfG3TdUa8n82fTplEGzMahWhB+bPBPHGOefSgD0ZSc8456Yp9
NUnPIIBNOoAKKKKACiiigAPNVr6zt72xntbyJJbeZCkkbjhlIwQas0UAePyy6j8KdReZ2lu/
ArkZGfMksWbjIJ+ZkzjuSNx44r0/TdQtdRsra8064Se2uUEySDOGQjOR6dRwaty2sM1u0Esa
NCwKshGVIPUEV4vrEerfCfxDPqOmWtxqHgy5BeaxhJH2Bsgl0UAgLy3HHbmgD2tCTjqR6+tP
rO0jVbTWNPivtLuIrq1kXKyRsCp/EVeD5AI6fWgB9FAORkUUAFFFFABRRRQAUUUUAFFFFABR
RRQAUUUUAeZfHL4hv8PPCf261SGbUpmEUEcoJTOeSQCD0z3618q2/wAePGy+Jk1eW+ilCgj7
M6DygpIJAx82OB3r6F/af8EX3izwlBcaPE093YSeYYtxBMfTgdDySea+MRpl7JfpYLbStd7i
giCYbdnpQB+i/wAPPFtl428OW+sacSI5PldM/ccAEqfcAg/jXU15p+z/AOEbvwX8PoNO1Iob
uWZrhwv8BZVGP/Ha9LoAKKKKACiiigAooooAKhuIY5o2SVVaNhhlbuKmqOTnK8ZI496APizx
T8WdS8EeMPEOj+BDFBpDTM+yX5wsuPmdCDwCAowc9K7v4H/HvUNf8RweHvFqWqtcoRBdRKwZ
n64bkjpnsK8T+MngHVvCfiy8FxayGzncywTKSwZTxg988frR8G/D+tL4qtdct9LuLiz00meY
IoyVxt4Bxk/MD9AaAP0HHQZ4PpS1laDqtnremQ6hp0wmtZlEiuhODkZ78/hWlGev86AH0UUU
AFFFFABRRRQAUUUUAFFFFABRRRQAzaFBIGc9fevI9QjgP7RWmKkECMulTFmwMt80GMj2r14g
44rx2WcP+0zBCUUGPSJTv5ycmCgD2BVAbdjBI/E0+mKDx+uafQAUUUUAFFFFABRRRQAU1lDd
adRQBFNbxTLtljV19CM0kdtBFHsjiRE9FGKmoPNAHlfiHR7/AMB6jceIPDKST6NM/m6hpcaE
45y0sQHRsE5GDnAru/DmvWHiDS4r/SrmOe1k/iBBwehB9DWs4LKVwCCMc9K8e8U+H9T8Ca7L
4p8HI82nSYOpaUOQw6F0B6EfKeD2PFAHsJY9hntT6wvCHiLTvFGiwalpNwJIXX5kIIaJu6sD
yCDkfhW5kUALRSA56UtABRRRQAUUUUAFFFFABRRRQAV45cyeZ+0xbxrGAY9JkJb1yYK9jrxV
j/xlIP8AsEP/ADgoA9pHX60tFFABRRRQAUUUUAFFFFABRRRQAUUUUAFRyqGGCoIPBB7j+tSU
UAeN+I/DOreDPEknibwSiy2Eu5tQ0hHKrLyDvRcEbvven3q9I8K+ItP8UaTDqWkTCW2cY9Cr
dwR+IrbbGORXjvjHw7qnhHxPJ4v8HWxntipbUdMjG3z8Zy6/7WD6H7ooA9iUYFLXMeDfFNj4
t0iDUtKnXLHbPb7tzwsMgow6qQR3H866QMePrigB9FFFABRRRQAUUUUAFFFFABXizFf+GogM
HP8AZD/zhr2mvF2H/GUQP/UIf+cNAHtFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAARmo
3jypBOQexHSpKQjNAHmHizwnqWg6uPFHgJUS8zjUNO4Ed5HjkgHgOCFOQV4B9ees8I+LdM8V
2K3WlysZEx51u42yQE/wsD3HPTPSugkwOcHjngV5j4y8HX2l66PFfglEj1FCJNQ0+NdqahGD
kg4/jPzAHB+9QB6huGcU4c1zfg/xPZ+LNEh1HTGYqWMckbAbomHVWHY/0x610a8AUALRRRQA
UUUUAFFFFABXircftSf9wh/5w17XXizsB+1Fzt/5BD/zhoA9oopAQelLQAUUUooATFGKWigB
MUYpaKAExRS0UAJijFLRQAmKMUtFACYoxS0UANYZGDTXUFDkZAqQjJoxQB5d438J3un66vjD
wUMasihbuz/5Z3sXQjthgOev8IGK6vwl4nsPEunC5spVW5QBbm1J/eQOOGVl6gggjp2roiu0
AKMAdq8o8ceEb7w/rv8AwmPgiMLqHLahYhztvU4JIB+UPx7Z3HJoA9XBO7llxnpT653wZ4o0
7xZoyajpEjNHuMckci4eJ8DKsPXkV0G49hn1oAdRQPeigAooooAAQRkHivKH0TUP+GiRqwtZ
f7POlvGJ9p2bsw8Z6Z4P5V6PeX9rp9q895NFBaoOZpGCqPr+NcRD8VvBF34kWxTWYDexoyBj
uEfUZG7GD+dAHoqnJPPI7Zp1Qwt5m11OVIz8pBBqbNABSikpRQAUUUUAFFFFABRRTWwCfegB
2RRketcr4n8baB4YaJdf1OKzeX7qHLHj2ANW9A8SaT4it2l0LUre7XqQjglR7jrQBv0UiY2D
b0xxS0AFFFFABRRRQAGoLjnkgkYPAqekbB60AeaeL/Dd7oGrP4t8HJi6A3ahpiDal8o6tgf8
tACecHOFHFdT4N8UWHirSUvdOlBYErNAWBeFwcFGHYgg10Dgbcnp3ry3xZ4U1LQfET+LvA0H
nahLiO9sndRFNFgZZckYfKr39eKAPUwRjrS5Fc/4V8TWXibTlutOfawIWeBwRJA/dHB5BH07
VvKMZ9T1oAdRRRQB82/tk6pfWnhzS7C082K1nlzKyHCt1+U4+gNfIisUcOrMHB4xX6NfEzwN
YePPDc2k6hhNxDwzhcmJwRyB+n0NfP1v+yperdr9o8RQm2384tedue3z9aAOs+C3xI8Qn4fW
qS+GtY1Z4SyJdxhCrqFBGSWBzye1dYvxG8ZSyt5Pw81PYB1ZlH/s1ejeHdGtPD+jW+naanl2
sCbFX19/rWkEBOSO1AHlrfEDxltUxfD/AFN+PmyyDB9vm5pP+Fg+NN4/4t5qW3vh13D8N1eq
7c5zn86CpxxyfegDzA/EHxYJV/4t/q/kfxtlNw+g3VbHxA10XDB/AfiEQH7jhIs/iPM4r0UA
8ZH/ANak2Z9f8aAPPv8AhPtb6f8ACCeIeO4jiwf/ACJS/wDCfa3/ANCJ4h/79xf/AByvQlGK
WgDzz/hPdb/6ETxD/wB+4v8A45Tf+E81oyAHwL4jC9z5UXH/AJEr0TFMdevFAH5w/FLxFqPi
fxpqF5qTzowcqkExx5Q/u4HFavwP8Uaj4a8eWEmlJd3XmkxyWdvg+eME9CQM5A/Kvor4t/s+
QeMPEraxouopps04/wBIRoN4Zsn5hhhjr+laHwW+BUHgHWH1bU79NRvwCsO2HYIs9+p5/wAa
AOwPj7WQiEeBvEJ3DP8Aq4v/AI5R/wAJ7rnbwJ4h/wC/cX/xyvQNgOM9qdigDz3/AIT7Wu/g
XxCP+2cX/wAcprfEHWFlVR4E8RkN38uL/wCOV6IR7ZpojA28DjpxQB583j7WxnHgTxFxycxx
f/HKbB8Q9XnjMkXgXxFszjmOIHP/AH8r0TB70AHvg0Aeff8ACfa3/wBCJ4h/79xf/HKP+E91
v/oRPEP/AH7i/wDjleh/hSYoA88bx5rZGD4E8QkHj/Vxf/HKrp8Q9UaY248C+Igy9f3UWP8A
0ZXpZFNAOecflQB4Rq1/4mj8U2uteEfBmr2M0sgGpwSpGkd0mR83DH5uXy2MnPWvcbZ5JIY3
kXypGALIecGpQpHI45pQv/6qAF59aKXFFAAaOtFFABig9KKKAAUooooAKKKKACiiigAooooA
TaM0EDIoooAWiiigAooooAKKKKACiiigApKKKACiiigAooooA//Z</binary>
</FictionBook>
